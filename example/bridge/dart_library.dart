// ignore_for_file: avoid_function_literals_in_foreach_calls
// ignore_for_file: deprecated_member_use
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: invalid_use_of_protected_member
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: unnecessary_constructor_name

import 'package:shelf_easy/shelf_easy.dart';
import 'dart:async';
import 'dart:collection';
import 'dart:convert';
import 'dart:core';
import 'dart:math';
import 'dart:typed_data';
import 'dart:io';
import 'dart:isolate';

///
///Dart核心库桥接类
///
class DartLibrary {
  ///class ArgumentError
  static final classArgumentError = VmClass<ArgumentError>(
    identifier: 'ArgumentError',
    superclassNames: ['Object', 'Error'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ArgumentError.new),
      'notNull': VmProxy(identifier: 'notNull', externalStaticPropertyReader: () => ArgumentError.notNull),
      'value': VmProxy(identifier: 'value', externalStaticPropertyReader: () => ArgumentError.value),
      'checkNotNull': VmProxy(identifier: 'checkNotNull', externalStaticPropertyReader: () => ArgumentError.checkNotNull),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ArgumentError instance) => instance.hashCode),
      'invalidValue': VmProxy(identifier: 'invalidValue', externalInstancePropertyReader: (ArgumentError instance) => instance.invalidValue),
      'message': VmProxy(identifier: 'message', externalInstancePropertyReader: (ArgumentError instance) => instance.message),
      'name': VmProxy(identifier: 'name', externalInstancePropertyReader: (ArgumentError instance) => instance.name),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ArgumentError instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ArgumentError instance) => instance.runtimeType),
      'stackTrace': VmProxy(identifier: 'stackTrace', externalInstancePropertyReader: (ArgumentError instance) => instance.stackTrace),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ArgumentError instance) => instance.toString),
    },
  );

  ///class AsciiCodec
  static final classAsciiCodec = VmClass<AsciiCodec>(
    identifier: 'AsciiCodec',
    superclassNames: ['Object', 'Codec', 'Encoding'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => AsciiCodec.new),
      'decode': VmProxy(identifier: 'decode', externalInstancePropertyReader: (AsciiCodec instance) => instance.decode),
      'decoder': VmProxy(identifier: 'decoder', externalInstancePropertyReader: (AsciiCodec instance) => instance.decoder),
      'decodeStream': VmProxy(identifier: 'decodeStream', externalInstancePropertyReader: (AsciiCodec instance) => instance.decodeStream),
      'encode': VmProxy(identifier: 'encode', externalInstancePropertyReader: (AsciiCodec instance) => instance.encode),
      'encoder': VmProxy(identifier: 'encoder', externalInstancePropertyReader: (AsciiCodec instance) => instance.encoder),
      'fuse': VmProxy(identifier: 'fuse', externalInstancePropertyReader: (AsciiCodec instance) => instance.fuse),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (AsciiCodec instance) => instance.hashCode),
      'inverted': VmProxy(identifier: 'inverted', externalInstancePropertyReader: (AsciiCodec instance) => instance.inverted),
      'name': VmProxy(identifier: 'name', externalInstancePropertyReader: (AsciiCodec instance) => instance.name),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (AsciiCodec instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (AsciiCodec instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (AsciiCodec instance) => instance.toString),
    },
  );

  ///class AsciiDecoder
  static final classAsciiDecoder = VmClass<AsciiDecoder>(
    identifier: 'AsciiDecoder',
    superclassNames: ['Object', 'StreamTransformer', 'StreamTransformerBase', 'Converter', '_UnicodeSubsetDecoder'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => AsciiDecoder.new),
      'bind': VmProxy(identifier: 'bind', externalInstancePropertyReader: (AsciiDecoder instance) => instance.bind),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (AsciiDecoder instance) => instance.cast),
      'convert': VmProxy(identifier: 'convert', externalInstancePropertyReader: (AsciiDecoder instance) => instance.convert),
      'fuse': VmProxy(identifier: 'fuse', externalInstancePropertyReader: (AsciiDecoder instance) => instance.fuse),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (AsciiDecoder instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (AsciiDecoder instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (AsciiDecoder instance) => instance.runtimeType),
      'startChunkedConversion': VmProxy(identifier: 'startChunkedConversion', externalInstancePropertyReader: (AsciiDecoder instance) => instance.startChunkedConversion),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (AsciiDecoder instance) => instance.toString),
    },
  );

  ///class AsciiEncoder
  static final classAsciiEncoder = VmClass<AsciiEncoder>(
    identifier: 'AsciiEncoder',
    superclassNames: ['Object', 'StreamTransformer', 'StreamTransformerBase', 'Converter', '_UnicodeSubsetEncoder'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => AsciiEncoder.new),
      'bind': VmProxy(identifier: 'bind', externalInstancePropertyReader: (AsciiEncoder instance) => instance.bind),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (AsciiEncoder instance) => instance.cast),
      'convert': VmProxy(identifier: 'convert', externalInstancePropertyReader: (AsciiEncoder instance) => instance.convert),
      'fuse': VmProxy(identifier: 'fuse', externalInstancePropertyReader: (AsciiEncoder instance) => instance.fuse),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (AsciiEncoder instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (AsciiEncoder instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (AsciiEncoder instance) => instance.runtimeType),
      'startChunkedConversion': VmProxy(identifier: 'startChunkedConversion', externalInstancePropertyReader: (AsciiEncoder instance) => instance.startChunkedConversion),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (AsciiEncoder instance) => instance.toString),
    },
  );

  ///class AssertionError
  static final classAssertionError = VmClass<AssertionError>(
    identifier: 'AssertionError',
    superclassNames: ['Object', 'Error'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => AssertionError.new),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (AssertionError instance) => instance.hashCode),
      'message': VmProxy(identifier: 'message', externalInstancePropertyReader: (AssertionError instance) => instance.message),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (AssertionError instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (AssertionError instance) => instance.runtimeType),
      'stackTrace': VmProxy(identifier: 'stackTrace', externalInstancePropertyReader: (AssertionError instance) => instance.stackTrace),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (AssertionError instance) => instance.toString),
    },
  );

  ///class AsyncError
  static final classAsyncError = VmClass<AsyncError>(
    identifier: 'AsyncError',
    superclassNames: ['Object', 'Error'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => AsyncError.new),
      'defaultStackTrace': VmProxy(identifier: 'defaultStackTrace', externalStaticPropertyReader: () => AsyncError.defaultStackTrace),
      'error': VmProxy(identifier: 'error', externalInstancePropertyReader: (AsyncError instance) => instance.error),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (AsyncError instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (AsyncError instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (AsyncError instance) => instance.runtimeType),
      'stackTrace': VmProxy(identifier: 'stackTrace', externalInstancePropertyReader: (AsyncError instance) => instance.stackTrace),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (AsyncError instance) => instance.toString),
    },
  );

  ///class Base64Codec
  static final classBase64Codec = VmClass<Base64Codec>(
    identifier: 'Base64Codec',
    superclassNames: ['Object', 'Codec'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Base64Codec.new),
      'urlSafe': VmProxy(identifier: 'urlSafe', externalStaticPropertyReader: () => Base64Codec.urlSafe),
      'decode': VmProxy(identifier: 'decode', externalInstancePropertyReader: (Base64Codec instance) => instance.decode),
      'decoder': VmProxy(identifier: 'decoder', externalInstancePropertyReader: (Base64Codec instance) => instance.decoder),
      'encode': VmProxy(identifier: 'encode', externalInstancePropertyReader: (Base64Codec instance) => instance.encode),
      'encoder': VmProxy(identifier: 'encoder', externalInstancePropertyReader: (Base64Codec instance) => instance.encoder),
      'fuse': VmProxy(identifier: 'fuse', externalInstancePropertyReader: (Base64Codec instance) => instance.fuse),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Base64Codec instance) => instance.hashCode),
      'inverted': VmProxy(identifier: 'inverted', externalInstancePropertyReader: (Base64Codec instance) => instance.inverted),
      'normalize': VmProxy(identifier: 'normalize', externalInstancePropertyReader: (Base64Codec instance) => instance.normalize),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Base64Codec instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Base64Codec instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Base64Codec instance) => instance.toString),
    },
  );

  ///class Base64Decoder
  static final classBase64Decoder = VmClass<Base64Decoder>(
    identifier: 'Base64Decoder',
    superclassNames: ['Object', 'StreamTransformer', 'StreamTransformerBase', 'Converter'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Base64Decoder.new),
      'bind': VmProxy(identifier: 'bind', externalInstancePropertyReader: (Base64Decoder instance) => instance.bind),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (Base64Decoder instance) => instance.cast),
      'convert': VmProxy(identifier: 'convert', externalInstancePropertyReader: (Base64Decoder instance) => instance.convert),
      'fuse': VmProxy(identifier: 'fuse', externalInstancePropertyReader: (Base64Decoder instance) => instance.fuse),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Base64Decoder instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Base64Decoder instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Base64Decoder instance) => instance.runtimeType),
      'startChunkedConversion': VmProxy(identifier: 'startChunkedConversion', externalInstancePropertyReader: (Base64Decoder instance) => instance.startChunkedConversion),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Base64Decoder instance) => instance.toString),
    },
  );

  ///class Base64Encoder
  static final classBase64Encoder = VmClass<Base64Encoder>(
    identifier: 'Base64Encoder',
    superclassNames: ['Object', 'StreamTransformer', 'StreamTransformerBase', 'Converter'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Base64Encoder.new),
      'urlSafe': VmProxy(identifier: 'urlSafe', externalStaticPropertyReader: () => Base64Encoder.urlSafe),
      'bind': VmProxy(identifier: 'bind', externalInstancePropertyReader: (Base64Encoder instance) => instance.bind),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (Base64Encoder instance) => instance.cast),
      'convert': VmProxy(identifier: 'convert', externalInstancePropertyReader: (Base64Encoder instance) => instance.convert),
      'fuse': VmProxy(identifier: 'fuse', externalInstancePropertyReader: (Base64Encoder instance) => instance.fuse),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Base64Encoder instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Base64Encoder instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Base64Encoder instance) => instance.runtimeType),
      'startChunkedConversion': VmProxy(identifier: 'startChunkedConversion', externalInstancePropertyReader: (Base64Encoder instance) => instance.startChunkedConversion),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Base64Encoder instance) => instance.toString),
    },
  );

  ///class BigInt
  static final classBigInt = VmClass<BigInt>(
    identifier: 'BigInt',
    superclassNames: ['Object', 'Comparable'],
    externalProxyMap: {
      'from': VmProxy(identifier: 'from', externalStaticPropertyReader: () => BigInt.from),
      'one': VmProxy(identifier: 'one', externalStaticPropertyReader: () => BigInt.one),
      'parse': VmProxy(identifier: 'parse', externalStaticPropertyReader: () => BigInt.parse),
      'tryParse': VmProxy(identifier: 'tryParse', externalStaticPropertyReader: () => BigInt.tryParse),
      'two': VmProxy(identifier: 'two', externalStaticPropertyReader: () => BigInt.two),
      'zero': VmProxy(identifier: 'zero', externalStaticPropertyReader: () => BigInt.zero),
      'abs': VmProxy(identifier: 'abs', externalInstancePropertyReader: (BigInt instance) => instance.abs),
      'bitLength': VmProxy(identifier: 'bitLength', externalInstancePropertyReader: (BigInt instance) => instance.bitLength),
      'compareTo': VmProxy(identifier: 'compareTo', externalInstancePropertyReader: (BigInt instance) => instance.compareTo),
      'gcd': VmProxy(identifier: 'gcd', externalInstancePropertyReader: (BigInt instance) => instance.gcd),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (BigInt instance) => instance.hashCode),
      'isEven': VmProxy(identifier: 'isEven', externalInstancePropertyReader: (BigInt instance) => instance.isEven),
      'isNegative': VmProxy(identifier: 'isNegative', externalInstancePropertyReader: (BigInt instance) => instance.isNegative),
      'isOdd': VmProxy(identifier: 'isOdd', externalInstancePropertyReader: (BigInt instance) => instance.isOdd),
      'isValidInt': VmProxy(identifier: 'isValidInt', externalInstancePropertyReader: (BigInt instance) => instance.isValidInt),
      'modInverse': VmProxy(identifier: 'modInverse', externalInstancePropertyReader: (BigInt instance) => instance.modInverse),
      'modPow': VmProxy(identifier: 'modPow', externalInstancePropertyReader: (BigInt instance) => instance.modPow),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (BigInt instance) => instance.noSuchMethod),
      'pow': VmProxy(identifier: 'pow', externalInstancePropertyReader: (BigInt instance) => instance.pow),
      'remainder': VmProxy(identifier: 'remainder', externalInstancePropertyReader: (BigInt instance) => instance.remainder),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (BigInt instance) => instance.runtimeType),
      'sign': VmProxy(identifier: 'sign', externalInstancePropertyReader: (BigInt instance) => instance.sign),
      'toDouble': VmProxy(identifier: 'toDouble', externalInstancePropertyReader: (BigInt instance) => instance.toDouble),
      'toInt': VmProxy(identifier: 'toInt', externalInstancePropertyReader: (BigInt instance) => instance.toInt),
      'toRadixString': VmProxy(identifier: 'toRadixString', externalInstancePropertyReader: (BigInt instance) => instance.toRadixString),
      'toSigned': VmProxy(identifier: 'toSigned', externalInstancePropertyReader: (BigInt instance) => instance.toSigned),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (BigInt instance) => instance.toString),
      'toUnsigned': VmProxy(identifier: 'toUnsigned', externalInstancePropertyReader: (BigInt instance) => instance.toUnsigned),
    },
  );

  ///class bool
  static final classBool = VmClass<bool>(
    identifier: 'bool',
    superclassNames: ['Object'],
    externalProxyMap: {
      'fromEnvironment': VmProxy(identifier: 'fromEnvironment', externalStaticPropertyReader: () => bool.fromEnvironment),
      'hasEnvironment': VmProxy(identifier: 'hasEnvironment', externalStaticPropertyReader: () => bool.hasEnvironment),
      'parse': VmProxy(identifier: 'parse', externalStaticPropertyReader: () => bool.parse),
      'tryParse': VmProxy(identifier: 'tryParse', externalStaticPropertyReader: () => bool.tryParse),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (bool instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (bool instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (bool instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (bool instance) => instance.toString),
    },
  );

  ///class ByteBuffer
  static final classByteBuffer = VmClass<ByteBuffer>(
    identifier: 'ByteBuffer',
    superclassNames: ['Object'],
    externalProxyMap: {
      'asByteData': VmProxy(identifier: 'asByteData', externalInstancePropertyReader: (ByteBuffer instance) => instance.asByteData),
      'asFloat32List': VmProxy(identifier: 'asFloat32List', externalInstancePropertyReader: (ByteBuffer instance) => instance.asFloat32List),
      'asFloat32x4List': VmProxy(identifier: 'asFloat32x4List', externalInstancePropertyReader: (ByteBuffer instance) => instance.asFloat32x4List),
      'asFloat64List': VmProxy(identifier: 'asFloat64List', externalInstancePropertyReader: (ByteBuffer instance) => instance.asFloat64List),
      'asFloat64x2List': VmProxy(identifier: 'asFloat64x2List', externalInstancePropertyReader: (ByteBuffer instance) => instance.asFloat64x2List),
      'asInt16List': VmProxy(identifier: 'asInt16List', externalInstancePropertyReader: (ByteBuffer instance) => instance.asInt16List),
      'asInt32List': VmProxy(identifier: 'asInt32List', externalInstancePropertyReader: (ByteBuffer instance) => instance.asInt32List),
      'asInt32x4List': VmProxy(identifier: 'asInt32x4List', externalInstancePropertyReader: (ByteBuffer instance) => instance.asInt32x4List),
      'asInt64List': VmProxy(identifier: 'asInt64List', externalInstancePropertyReader: (ByteBuffer instance) => instance.asInt64List),
      'asInt8List': VmProxy(identifier: 'asInt8List', externalInstancePropertyReader: (ByteBuffer instance) => instance.asInt8List),
      'asUint16List': VmProxy(identifier: 'asUint16List', externalInstancePropertyReader: (ByteBuffer instance) => instance.asUint16List),
      'asUint32List': VmProxy(identifier: 'asUint32List', externalInstancePropertyReader: (ByteBuffer instance) => instance.asUint32List),
      'asUint64List': VmProxy(identifier: 'asUint64List', externalInstancePropertyReader: (ByteBuffer instance) => instance.asUint64List),
      'asUint8ClampedList': VmProxy(identifier: 'asUint8ClampedList', externalInstancePropertyReader: (ByteBuffer instance) => instance.asUint8ClampedList),
      'asUint8List': VmProxy(identifier: 'asUint8List', externalInstancePropertyReader: (ByteBuffer instance) => instance.asUint8List),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ByteBuffer instance) => instance.hashCode),
      'lengthInBytes': VmProxy(identifier: 'lengthInBytes', externalInstancePropertyReader: (ByteBuffer instance) => instance.lengthInBytes),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ByteBuffer instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ByteBuffer instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ByteBuffer instance) => instance.toString),
    },
  );

  ///class ByteConversionSink
  static final classByteConversionSink = VmClass<ByteConversionSink>(
    identifier: 'ByteConversionSink',
    superclassNames: ['Object', 'Sink', 'ChunkedConversionSink'],
    externalProxyMap: {
      'from': VmProxy(identifier: 'from', externalStaticPropertyReader: () => ByteConversionSink.from),
      'withCallback': VmProxy(identifier: 'withCallback', externalStaticPropertyReader: () => ByteConversionSink.withCallback, externalStaticFunctionCaller: (a0) => ByteConversionSink.withCallback((b0) => a0(b0))),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (ByteConversionSink instance) => instance.add),
      'addSlice': VmProxy(identifier: 'addSlice', externalInstancePropertyReader: (ByteConversionSink instance) => instance.addSlice),
      'close': VmProxy(identifier: 'close', externalInstancePropertyReader: (ByteConversionSink instance) => instance.close),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ByteConversionSink instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ByteConversionSink instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ByteConversionSink instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ByteConversionSink instance) => instance.toString),
    },
  );

  ///class ByteConversionSinkBase
  static final classByteConversionSinkBase = VmClass<ByteConversionSinkBase>(
    identifier: 'ByteConversionSinkBase',
    superclassNames: ['Object', 'Sink', 'ChunkedConversionSink', 'ByteConversionSink'],
    externalProxyMap: {
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (ByteConversionSinkBase instance) => instance.add),
      'addSlice': VmProxy(identifier: 'addSlice', externalInstancePropertyReader: (ByteConversionSinkBase instance) => instance.addSlice),
      'close': VmProxy(identifier: 'close', externalInstancePropertyReader: (ByteConversionSinkBase instance) => instance.close),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ByteConversionSinkBase instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ByteConversionSinkBase instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ByteConversionSinkBase instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ByteConversionSinkBase instance) => instance.toString),
    },
  );

  ///class ByteData
  static final classByteData = VmClass<ByteData>(
    identifier: 'ByteData',
    superclassNames: ['Object', 'TypedData'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ByteData.new),
      'sublistView': VmProxy(identifier: 'sublistView', externalStaticPropertyReader: () => ByteData.sublistView),
      'view': VmProxy(identifier: 'view', externalStaticPropertyReader: () => ByteData.view),
      'buffer': VmProxy(identifier: 'buffer', externalInstancePropertyReader: (ByteData instance) => instance.buffer),
      'elementSizeInBytes': VmProxy(identifier: 'elementSizeInBytes', externalInstancePropertyReader: (ByteData instance) => instance.elementSizeInBytes),
      'getFloat32': VmProxy(identifier: 'getFloat32', externalInstancePropertyReader: (ByteData instance) => instance.getFloat32),
      'getFloat64': VmProxy(identifier: 'getFloat64', externalInstancePropertyReader: (ByteData instance) => instance.getFloat64),
      'getInt16': VmProxy(identifier: 'getInt16', externalInstancePropertyReader: (ByteData instance) => instance.getInt16),
      'getInt32': VmProxy(identifier: 'getInt32', externalInstancePropertyReader: (ByteData instance) => instance.getInt32),
      'getInt64': VmProxy(identifier: 'getInt64', externalInstancePropertyReader: (ByteData instance) => instance.getInt64),
      'getInt8': VmProxy(identifier: 'getInt8', externalInstancePropertyReader: (ByteData instance) => instance.getInt8),
      'getUint16': VmProxy(identifier: 'getUint16', externalInstancePropertyReader: (ByteData instance) => instance.getUint16),
      'getUint32': VmProxy(identifier: 'getUint32', externalInstancePropertyReader: (ByteData instance) => instance.getUint32),
      'getUint64': VmProxy(identifier: 'getUint64', externalInstancePropertyReader: (ByteData instance) => instance.getUint64),
      'getUint8': VmProxy(identifier: 'getUint8', externalInstancePropertyReader: (ByteData instance) => instance.getUint8),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ByteData instance) => instance.hashCode),
      'lengthInBytes': VmProxy(identifier: 'lengthInBytes', externalInstancePropertyReader: (ByteData instance) => instance.lengthInBytes),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ByteData instance) => instance.noSuchMethod),
      'offsetInBytes': VmProxy(identifier: 'offsetInBytes', externalInstancePropertyReader: (ByteData instance) => instance.offsetInBytes),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ByteData instance) => instance.runtimeType),
      'setFloat32': VmProxy(identifier: 'setFloat32', externalInstancePropertyReader: (ByteData instance) => instance.setFloat32),
      'setFloat64': VmProxy(identifier: 'setFloat64', externalInstancePropertyReader: (ByteData instance) => instance.setFloat64),
      'setInt16': VmProxy(identifier: 'setInt16', externalInstancePropertyReader: (ByteData instance) => instance.setInt16),
      'setInt32': VmProxy(identifier: 'setInt32', externalInstancePropertyReader: (ByteData instance) => instance.setInt32),
      'setInt64': VmProxy(identifier: 'setInt64', externalInstancePropertyReader: (ByteData instance) => instance.setInt64),
      'setInt8': VmProxy(identifier: 'setInt8', externalInstancePropertyReader: (ByteData instance) => instance.setInt8),
      'setUint16': VmProxy(identifier: 'setUint16', externalInstancePropertyReader: (ByteData instance) => instance.setUint16),
      'setUint32': VmProxy(identifier: 'setUint32', externalInstancePropertyReader: (ByteData instance) => instance.setUint32),
      'setUint64': VmProxy(identifier: 'setUint64', externalInstancePropertyReader: (ByteData instance) => instance.setUint64),
      'setUint8': VmProxy(identifier: 'setUint8', externalInstancePropertyReader: (ByteData instance) => instance.setUint8),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ByteData instance) => instance.toString),
    },
  );

  ///class Capability
  static final classCapability = VmClass<Capability>(
    identifier: 'Capability',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Capability.new),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Capability instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Capability instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Capability instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Capability instance) => instance.toString),
    },
  );

  ///class CertificateException
  static final classCertificateException = VmClass<CertificateException>(
    identifier: 'CertificateException',
    superclassNames: ['Object', 'Exception', 'IOException', 'TlsException'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => CertificateException.new),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (CertificateException instance) => instance.hashCode),
      'message': VmProxy(identifier: 'message', externalInstancePropertyReader: (CertificateException instance) => instance.message),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (CertificateException instance) => instance.noSuchMethod),
      'osError': VmProxy(identifier: 'osError', externalInstancePropertyReader: (CertificateException instance) => instance.osError),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (CertificateException instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (CertificateException instance) => instance.toString),
      'type': VmProxy(identifier: 'type', externalInstancePropertyReader: (CertificateException instance) => instance.type),
    },
  );

  ///class ChunkedConversionSink
  static final classChunkedConversionSink = VmClass<ChunkedConversionSink>(
    identifier: 'ChunkedConversionSink',
    superclassNames: ['Object', 'Sink'],
    externalProxyMap: {
      'withCallback': VmProxy(identifier: 'withCallback', externalStaticPropertyReader: () => ChunkedConversionSink.withCallback, externalStaticFunctionCaller: (a0) => ChunkedConversionSink.withCallback((b0) => a0(b0))),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (ChunkedConversionSink instance) => instance.add),
      'close': VmProxy(identifier: 'close', externalInstancePropertyReader: (ChunkedConversionSink instance) => instance.close),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ChunkedConversionSink instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ChunkedConversionSink instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ChunkedConversionSink instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ChunkedConversionSink instance) => instance.toString),
    },
  );

  ///class ClosableStringSink
  static final classClosableStringSink = VmClass<ClosableStringSink>(
    identifier: 'ClosableStringSink',
    superclassNames: ['Object', 'StringSink'],
    externalProxyMap: {
      'fromStringSink': VmProxy(identifier: 'fromStringSink', externalStaticPropertyReader: () => ClosableStringSink.fromStringSink),
      'close': VmProxy(identifier: 'close', externalInstancePropertyReader: (ClosableStringSink instance) => instance.close),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ClosableStringSink instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ClosableStringSink instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ClosableStringSink instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ClosableStringSink instance) => instance.toString),
      'write': VmProxy(identifier: 'write', externalInstancePropertyReader: (ClosableStringSink instance) => instance.write),
      'writeAll': VmProxy(identifier: 'writeAll', externalInstancePropertyReader: (ClosableStringSink instance) => instance.writeAll),
      'writeCharCode': VmProxy(identifier: 'writeCharCode', externalInstancePropertyReader: (ClosableStringSink instance) => instance.writeCharCode),
      'writeln': VmProxy(identifier: 'writeln', externalInstancePropertyReader: (ClosableStringSink instance) => instance.writeln),
    },
  );

  ///class Codec
  static final classCodec = VmClass<Codec>(
    identifier: 'Codec',
    superclassNames: ['Object'],
    externalProxyMap: {
      'decode': VmProxy(identifier: 'decode', externalInstancePropertyReader: (Codec instance) => instance.decode),
      'decoder': VmProxy(identifier: 'decoder', externalInstancePropertyReader: (Codec instance) => instance.decoder),
      'encode': VmProxy(identifier: 'encode', externalInstancePropertyReader: (Codec instance) => instance.encode),
      'encoder': VmProxy(identifier: 'encoder', externalInstancePropertyReader: (Codec instance) => instance.encoder),
      'fuse': VmProxy(identifier: 'fuse', externalInstancePropertyReader: (Codec instance) => instance.fuse),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Codec instance) => instance.hashCode),
      'inverted': VmProxy(identifier: 'inverted', externalInstancePropertyReader: (Codec instance) => instance.inverted),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Codec instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Codec instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Codec instance) => instance.toString),
    },
  );

  ///class Comparable
  static final classComparable = VmClass<Comparable>(
    identifier: 'Comparable',
    superclassNames: ['Object'],
    externalProxyMap: {
      'compare': VmProxy(identifier: 'compare', externalStaticPropertyReader: () => Comparable.compare),
      'compareTo': VmProxy(identifier: 'compareTo', externalInstancePropertyReader: (Comparable instance) => instance.compareTo),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Comparable instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Comparable instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Comparable instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Comparable instance) => instance.toString),
    },
  );

  ///class Completer
  static final classCompleter = VmClass<Completer>(
    identifier: 'Completer',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Completer.new),
      'sync': VmProxy(identifier: 'sync', externalStaticPropertyReader: () => Completer.sync),
      'complete': VmProxy(identifier: 'complete', externalInstancePropertyReader: (Completer instance) => instance.complete),
      'completeError': VmProxy(identifier: 'completeError', externalInstancePropertyReader: (Completer instance) => instance.completeError),
      'future': VmProxy(identifier: 'future', externalInstancePropertyReader: (Completer instance) => instance.future),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Completer instance) => instance.hashCode),
      'isCompleted': VmProxy(identifier: 'isCompleted', externalInstancePropertyReader: (Completer instance) => instance.isCompleted),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Completer instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Completer instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Completer instance) => instance.toString),
    },
  );

  ///class ConcurrentModificationError
  static final classConcurrentModificationError = VmClass<ConcurrentModificationError>(
    identifier: 'ConcurrentModificationError',
    superclassNames: ['Object', 'Error'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ConcurrentModificationError.new),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ConcurrentModificationError instance) => instance.hashCode),
      'modifiedObject': VmProxy(identifier: 'modifiedObject', externalInstancePropertyReader: (ConcurrentModificationError instance) => instance.modifiedObject),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ConcurrentModificationError instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ConcurrentModificationError instance) => instance.runtimeType),
      'stackTrace': VmProxy(identifier: 'stackTrace', externalInstancePropertyReader: (ConcurrentModificationError instance) => instance.stackTrace),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ConcurrentModificationError instance) => instance.toString),
    },
  );

  ///class ConnectionTask
  static final classConnectionTask = VmClass<ConnectionTask>(
    identifier: 'ConnectionTask',
    superclassNames: ['Object'],
    externalProxyMap: {
      'cancel': VmProxy(identifier: 'cancel', externalInstancePropertyReader: (ConnectionTask instance) => instance.cancel),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ConnectionTask instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ConnectionTask instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ConnectionTask instance) => instance.runtimeType),
      'socket': VmProxy(identifier: 'socket', externalInstancePropertyReader: (ConnectionTask instance) => instance.socket),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ConnectionTask instance) => instance.toString),
    },
  );

  ///class Converter
  static final classConverter = VmClass<Converter>(
    identifier: 'Converter',
    superclassNames: ['Object', 'StreamTransformer', 'StreamTransformerBase'],
    externalProxyMap: {
      'castFrom': VmProxy(identifier: 'castFrom', externalStaticPropertyReader: () => Converter.castFrom),
      'bind': VmProxy(identifier: 'bind', externalInstancePropertyReader: (Converter instance) => instance.bind),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (Converter instance) => instance.cast),
      'convert': VmProxy(identifier: 'convert', externalInstancePropertyReader: (Converter instance) => instance.convert),
      'fuse': VmProxy(identifier: 'fuse', externalInstancePropertyReader: (Converter instance) => instance.fuse),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Converter instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Converter instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Converter instance) => instance.runtimeType),
      'startChunkedConversion': VmProxy(identifier: 'startChunkedConversion', externalInstancePropertyReader: (Converter instance) => instance.startChunkedConversion),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Converter instance) => instance.toString),
    },
  );

  ///class Datagram
  static final classDatagram = VmClass<Datagram>(
    identifier: 'Datagram',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Datagram.new),
      'address': VmProxy(identifier: 'address', externalInstancePropertyReader: (Datagram instance) => instance.address, externalInstancePropertyWriter: (Datagram instance, value) => instance.address = value),
      'data': VmProxy(identifier: 'data', externalInstancePropertyReader: (Datagram instance) => instance.data, externalInstancePropertyWriter: (Datagram instance, value) => instance.data = value),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Datagram instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Datagram instance) => instance.noSuchMethod),
      'port': VmProxy(identifier: 'port', externalInstancePropertyReader: (Datagram instance) => instance.port, externalInstancePropertyWriter: (Datagram instance, value) => instance.port = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Datagram instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Datagram instance) => instance.toString),
    },
  );

  ///class DateTime
  static final classDateTime = VmClass<DateTime>(
    identifier: 'DateTime',
    superclassNames: ['Object', 'Comparable'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => DateTime.new),
      'fromMicrosecondsSinceEpoch': VmProxy(identifier: 'fromMicrosecondsSinceEpoch', externalStaticPropertyReader: () => DateTime.fromMicrosecondsSinceEpoch),
      'fromMillisecondsSinceEpoch': VmProxy(identifier: 'fromMillisecondsSinceEpoch', externalStaticPropertyReader: () => DateTime.fromMillisecondsSinceEpoch),
      'now': VmProxy(identifier: 'now', externalStaticPropertyReader: () => DateTime.now),
      'timestamp': VmProxy(identifier: 'timestamp', externalStaticPropertyReader: () => DateTime.timestamp),
      'utc': VmProxy(identifier: 'utc', externalStaticPropertyReader: () => DateTime.utc),
      'april': VmProxy(identifier: 'april', externalStaticPropertyReader: () => DateTime.april),
      'august': VmProxy(identifier: 'august', externalStaticPropertyReader: () => DateTime.august),
      'daysPerWeek': VmProxy(identifier: 'daysPerWeek', externalStaticPropertyReader: () => DateTime.daysPerWeek),
      'december': VmProxy(identifier: 'december', externalStaticPropertyReader: () => DateTime.december),
      'february': VmProxy(identifier: 'february', externalStaticPropertyReader: () => DateTime.february),
      'friday': VmProxy(identifier: 'friday', externalStaticPropertyReader: () => DateTime.friday),
      'january': VmProxy(identifier: 'january', externalStaticPropertyReader: () => DateTime.january),
      'july': VmProxy(identifier: 'july', externalStaticPropertyReader: () => DateTime.july),
      'june': VmProxy(identifier: 'june', externalStaticPropertyReader: () => DateTime.june),
      'march': VmProxy(identifier: 'march', externalStaticPropertyReader: () => DateTime.march),
      'may': VmProxy(identifier: 'may', externalStaticPropertyReader: () => DateTime.may),
      'monday': VmProxy(identifier: 'monday', externalStaticPropertyReader: () => DateTime.monday),
      'monthsPerYear': VmProxy(identifier: 'monthsPerYear', externalStaticPropertyReader: () => DateTime.monthsPerYear),
      'november': VmProxy(identifier: 'november', externalStaticPropertyReader: () => DateTime.november),
      'october': VmProxy(identifier: 'october', externalStaticPropertyReader: () => DateTime.october),
      'parse': VmProxy(identifier: 'parse', externalStaticPropertyReader: () => DateTime.parse),
      'saturday': VmProxy(identifier: 'saturday', externalStaticPropertyReader: () => DateTime.saturday),
      'september': VmProxy(identifier: 'september', externalStaticPropertyReader: () => DateTime.september),
      'sunday': VmProxy(identifier: 'sunday', externalStaticPropertyReader: () => DateTime.sunday),
      'thursday': VmProxy(identifier: 'thursday', externalStaticPropertyReader: () => DateTime.thursday),
      'tryParse': VmProxy(identifier: 'tryParse', externalStaticPropertyReader: () => DateTime.tryParse),
      'tuesday': VmProxy(identifier: 'tuesday', externalStaticPropertyReader: () => DateTime.tuesday),
      'wednesday': VmProxy(identifier: 'wednesday', externalStaticPropertyReader: () => DateTime.wednesday),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (DateTime instance) => instance.add),
      'compareTo': VmProxy(identifier: 'compareTo', externalInstancePropertyReader: (DateTime instance) => instance.compareTo),
      'copyWith': VmProxy(identifier: 'copyWith', externalInstancePropertyReader: (DateTime instance) => instance.copyWith),
      'day': VmProxy(identifier: 'day', externalInstancePropertyReader: (DateTime instance) => instance.day),
      'difference': VmProxy(identifier: 'difference', externalInstancePropertyReader: (DateTime instance) => instance.difference),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (DateTime instance) => instance.hashCode),
      'hour': VmProxy(identifier: 'hour', externalInstancePropertyReader: (DateTime instance) => instance.hour),
      'isAfter': VmProxy(identifier: 'isAfter', externalInstancePropertyReader: (DateTime instance) => instance.isAfter),
      'isAtSameMomentAs': VmProxy(identifier: 'isAtSameMomentAs', externalInstancePropertyReader: (DateTime instance) => instance.isAtSameMomentAs),
      'isBefore': VmProxy(identifier: 'isBefore', externalInstancePropertyReader: (DateTime instance) => instance.isBefore),
      'isUtc': VmProxy(identifier: 'isUtc', externalInstancePropertyReader: (DateTime instance) => instance.isUtc),
      'microsecond': VmProxy(identifier: 'microsecond', externalInstancePropertyReader: (DateTime instance) => instance.microsecond),
      'microsecondsSinceEpoch': VmProxy(identifier: 'microsecondsSinceEpoch', externalInstancePropertyReader: (DateTime instance) => instance.microsecondsSinceEpoch),
      'millisecond': VmProxy(identifier: 'millisecond', externalInstancePropertyReader: (DateTime instance) => instance.millisecond),
      'millisecondsSinceEpoch': VmProxy(identifier: 'millisecondsSinceEpoch', externalInstancePropertyReader: (DateTime instance) => instance.millisecondsSinceEpoch),
      'minute': VmProxy(identifier: 'minute', externalInstancePropertyReader: (DateTime instance) => instance.minute),
      'month': VmProxy(identifier: 'month', externalInstancePropertyReader: (DateTime instance) => instance.month),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (DateTime instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (DateTime instance) => instance.runtimeType),
      'second': VmProxy(identifier: 'second', externalInstancePropertyReader: (DateTime instance) => instance.second),
      'subtract': VmProxy(identifier: 'subtract', externalInstancePropertyReader: (DateTime instance) => instance.subtract),
      'timeZoneName': VmProxy(identifier: 'timeZoneName', externalInstancePropertyReader: (DateTime instance) => instance.timeZoneName),
      'timeZoneOffset': VmProxy(identifier: 'timeZoneOffset', externalInstancePropertyReader: (DateTime instance) => instance.timeZoneOffset),
      'toIso8601String': VmProxy(identifier: 'toIso8601String', externalInstancePropertyReader: (DateTime instance) => instance.toIso8601String),
      'toLocal': VmProxy(identifier: 'toLocal', externalInstancePropertyReader: (DateTime instance) => instance.toLocal),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (DateTime instance) => instance.toString),
      'toUtc': VmProxy(identifier: 'toUtc', externalInstancePropertyReader: (DateTime instance) => instance.toUtc),
      'weekday': VmProxy(identifier: 'weekday', externalInstancePropertyReader: (DateTime instance) => instance.weekday),
      'year': VmProxy(identifier: 'year', externalInstancePropertyReader: (DateTime instance) => instance.year),
    },
  );

  ///class DeferredLoadException
  static final classDeferredLoadException = VmClass<DeferredLoadException>(
    identifier: 'DeferredLoadException',
    superclassNames: ['Object', 'Exception'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => DeferredLoadException.new),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (DeferredLoadException instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (DeferredLoadException instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (DeferredLoadException instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (DeferredLoadException instance) => instance.toString),
    },
  );

  ///class Deprecated
  static final classDeprecated = VmClass<Deprecated>(
    identifier: 'Deprecated',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Deprecated.new),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Deprecated instance) => instance.hashCode),
      'message': VmProxy(identifier: 'message', externalInstancePropertyReader: (Deprecated instance) => instance.message),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Deprecated instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Deprecated instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Deprecated instance) => instance.toString),
    },
  );

  ///class Directory
  static final classDirectory = VmClass<Directory>(
    identifier: 'Directory',
    superclassNames: ['Object', 'FileSystemEntity'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Directory.new),
      'fromRawPath': VmProxy(identifier: 'fromRawPath', externalStaticPropertyReader: () => Directory.fromRawPath),
      'fromUri': VmProxy(identifier: 'fromUri', externalStaticPropertyReader: () => Directory.fromUri),
      'current': VmProxy(identifier: 'current', externalStaticPropertyReader: () => Directory.current, externalStaticPropertyWriter: (value) => Directory.current = value),
      'systemTemp': VmProxy(identifier: 'systemTemp', externalStaticPropertyReader: () => Directory.systemTemp),
      'absolute': VmProxy(identifier: 'absolute', externalInstancePropertyReader: (Directory instance) => instance.absolute),
      'create': VmProxy(identifier: 'create', externalInstancePropertyReader: (Directory instance) => instance.create),
      'createSync': VmProxy(identifier: 'createSync', externalInstancePropertyReader: (Directory instance) => instance.createSync),
      'createTemp': VmProxy(identifier: 'createTemp', externalInstancePropertyReader: (Directory instance) => instance.createTemp),
      'createTempSync': VmProxy(identifier: 'createTempSync', externalInstancePropertyReader: (Directory instance) => instance.createTempSync),
      'delete': VmProxy(identifier: 'delete', externalInstancePropertyReader: (Directory instance) => instance.delete),
      'deleteSync': VmProxy(identifier: 'deleteSync', externalInstancePropertyReader: (Directory instance) => instance.deleteSync),
      'exists': VmProxy(identifier: 'exists', externalInstancePropertyReader: (Directory instance) => instance.exists),
      'existsSync': VmProxy(identifier: 'existsSync', externalInstancePropertyReader: (Directory instance) => instance.existsSync),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Directory instance) => instance.hashCode),
      'isAbsolute': VmProxy(identifier: 'isAbsolute', externalInstancePropertyReader: (Directory instance) => instance.isAbsolute),
      'list': VmProxy(identifier: 'list', externalInstancePropertyReader: (Directory instance) => instance.list),
      'listSync': VmProxy(identifier: 'listSync', externalInstancePropertyReader: (Directory instance) => instance.listSync),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Directory instance) => instance.noSuchMethod),
      'parent': VmProxy(identifier: 'parent', externalInstancePropertyReader: (Directory instance) => instance.parent),
      'path': VmProxy(identifier: 'path', externalInstancePropertyReader: (Directory instance) => instance.path),
      'rename': VmProxy(identifier: 'rename', externalInstancePropertyReader: (Directory instance) => instance.rename),
      'renameSync': VmProxy(identifier: 'renameSync', externalInstancePropertyReader: (Directory instance) => instance.renameSync),
      'resolveSymbolicLinks': VmProxy(identifier: 'resolveSymbolicLinks', externalInstancePropertyReader: (Directory instance) => instance.resolveSymbolicLinks),
      'resolveSymbolicLinksSync': VmProxy(identifier: 'resolveSymbolicLinksSync', externalInstancePropertyReader: (Directory instance) => instance.resolveSymbolicLinksSync),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Directory instance) => instance.runtimeType),
      'stat': VmProxy(identifier: 'stat', externalInstancePropertyReader: (Directory instance) => instance.stat),
      'statSync': VmProxy(identifier: 'statSync', externalInstancePropertyReader: (Directory instance) => instance.statSync),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Directory instance) => instance.toString),
      'uri': VmProxy(identifier: 'uri', externalInstancePropertyReader: (Directory instance) => instance.uri),
      'watch': VmProxy(identifier: 'watch', externalInstancePropertyReader: (Directory instance) => instance.watch),
    },
  );

  ///class double
  static final classDouble = VmClass<double>(
    identifier: 'double',
    superclassNames: ['Object', 'Comparable', 'num'],
    externalProxyMap: {
      'infinity': VmProxy(identifier: 'infinity', externalStaticPropertyReader: () => double.infinity),
      'maxFinite': VmProxy(identifier: 'maxFinite', externalStaticPropertyReader: () => double.maxFinite),
      'minPositive': VmProxy(identifier: 'minPositive', externalStaticPropertyReader: () => double.minPositive),
      'nan': VmProxy(identifier: 'nan', externalStaticPropertyReader: () => double.nan),
      'negativeInfinity': VmProxy(identifier: 'negativeInfinity', externalStaticPropertyReader: () => double.negativeInfinity),
      'parse': VmProxy(identifier: 'parse', externalStaticPropertyReader: () => double.parse),
      'tryParse': VmProxy(identifier: 'tryParse', externalStaticPropertyReader: () => double.tryParse),
      'abs': VmProxy(identifier: 'abs', externalInstancePropertyReader: (double instance) => instance.abs),
      'ceil': VmProxy(identifier: 'ceil', externalInstancePropertyReader: (double instance) => instance.ceil),
      'ceilToDouble': VmProxy(identifier: 'ceilToDouble', externalInstancePropertyReader: (double instance) => instance.ceilToDouble),
      'clamp': VmProxy(identifier: 'clamp', externalInstancePropertyReader: (double instance) => instance.clamp),
      'compareTo': VmProxy(identifier: 'compareTo', externalInstancePropertyReader: (double instance) => instance.compareTo),
      'floor': VmProxy(identifier: 'floor', externalInstancePropertyReader: (double instance) => instance.floor),
      'floorToDouble': VmProxy(identifier: 'floorToDouble', externalInstancePropertyReader: (double instance) => instance.floorToDouble),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (double instance) => instance.hashCode),
      'isFinite': VmProxy(identifier: 'isFinite', externalInstancePropertyReader: (double instance) => instance.isFinite),
      'isInfinite': VmProxy(identifier: 'isInfinite', externalInstancePropertyReader: (double instance) => instance.isInfinite),
      'isNaN': VmProxy(identifier: 'isNaN', externalInstancePropertyReader: (double instance) => instance.isNaN),
      'isNegative': VmProxy(identifier: 'isNegative', externalInstancePropertyReader: (double instance) => instance.isNegative),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (double instance) => instance.noSuchMethod),
      'remainder': VmProxy(identifier: 'remainder', externalInstancePropertyReader: (double instance) => instance.remainder),
      'round': VmProxy(identifier: 'round', externalInstancePropertyReader: (double instance) => instance.round),
      'roundToDouble': VmProxy(identifier: 'roundToDouble', externalInstancePropertyReader: (double instance) => instance.roundToDouble),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (double instance) => instance.runtimeType),
      'sign': VmProxy(identifier: 'sign', externalInstancePropertyReader: (double instance) => instance.sign),
      'toDouble': VmProxy(identifier: 'toDouble', externalInstancePropertyReader: (double instance) => instance.toDouble),
      'toInt': VmProxy(identifier: 'toInt', externalInstancePropertyReader: (double instance) => instance.toInt),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (double instance) => instance.toString),
      'toStringAsExponential': VmProxy(identifier: 'toStringAsExponential', externalInstancePropertyReader: (double instance) => instance.toStringAsExponential),
      'toStringAsFixed': VmProxy(identifier: 'toStringAsFixed', externalInstancePropertyReader: (double instance) => instance.toStringAsFixed),
      'toStringAsPrecision': VmProxy(identifier: 'toStringAsPrecision', externalInstancePropertyReader: (double instance) => instance.toStringAsPrecision),
      'truncate': VmProxy(identifier: 'truncate', externalInstancePropertyReader: (double instance) => instance.truncate),
      'truncateToDouble': VmProxy(identifier: 'truncateToDouble', externalInstancePropertyReader: (double instance) => instance.truncateToDouble),
    },
  );

  ///class DoubleLinkedQueue
  static final classDoubleLinkedQueue = VmClass<DoubleLinkedQueue>(
    identifier: 'DoubleLinkedQueue',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable', 'Queue'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => DoubleLinkedQueue.new),
      'from': VmProxy(identifier: 'from', externalStaticPropertyReader: () => DoubleLinkedQueue.from),
      'of': VmProxy(identifier: 'of', externalStaticPropertyReader: () => DoubleLinkedQueue.of),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.addAll),
      'addFirst': VmProxy(identifier: 'addFirst', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.addFirst),
      'addLast': VmProxy(identifier: 'addLast', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.addLast),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.any, externalInstanceFunctionCaller: (DoubleLinkedQueue instance, a0) => instance.any((b0) => a0(b0))),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.elementAtOrNull),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.every, externalInstanceFunctionCaller: (DoubleLinkedQueue instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.expand, externalInstanceFunctionCaller: (DoubleLinkedQueue instance, a0) => instance.expand((b0) => a0(b0))),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.first),
      'firstEntry': VmProxy(identifier: 'firstEntry', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.firstEntry),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.firstWhere, externalInstanceFunctionCaller: (DoubleLinkedQueue instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.fold, externalInstanceFunctionCaller: (DoubleLinkedQueue instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.forEach, externalInstanceFunctionCaller: (DoubleLinkedQueue instance, a0) => instance.forEach((b0) => a0(b0))),
      'forEachEntry': VmProxy(identifier: 'forEachEntry', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.forEachEntry, externalInstanceFunctionCaller: (DoubleLinkedQueue instance, a0) => instance.forEachEntry((b0) => a0(b0))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.indexed),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.last),
      'lastEntry': VmProxy(identifier: 'lastEntry', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.lastEntry),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.lastWhere, externalInstanceFunctionCaller: (DoubleLinkedQueue instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.length),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.map, externalInstanceFunctionCaller: (DoubleLinkedQueue instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.noSuchMethod),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.reduce, externalInstanceFunctionCaller: (DoubleLinkedQueue instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.remove),
      'removeFirst': VmProxy(identifier: 'removeFirst', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.removeFirst),
      'removeLast': VmProxy(identifier: 'removeLast', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.removeLast),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.removeWhere, externalInstanceFunctionCaller: (DoubleLinkedQueue instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.retainWhere, externalInstanceFunctionCaller: (DoubleLinkedQueue instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.runtimeType),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.singleWhere, externalInstanceFunctionCaller: (DoubleLinkedQueue instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.skipWhile, externalInstanceFunctionCaller: (DoubleLinkedQueue instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.takeWhile, externalInstanceFunctionCaller: (DoubleLinkedQueue instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.where, externalInstanceFunctionCaller: (DoubleLinkedQueue instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (DoubleLinkedQueue instance) => instance.whereType),
    },
  );

  ///class Duration
  static final classDuration = VmClass<Duration>(
    identifier: 'Duration',
    superclassNames: ['Object', 'Comparable'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Duration.new),
      'hoursPerDay': VmProxy(identifier: 'hoursPerDay', externalStaticPropertyReader: () => Duration.hoursPerDay),
      'microsecondsPerDay': VmProxy(identifier: 'microsecondsPerDay', externalStaticPropertyReader: () => Duration.microsecondsPerDay),
      'microsecondsPerHour': VmProxy(identifier: 'microsecondsPerHour', externalStaticPropertyReader: () => Duration.microsecondsPerHour),
      'microsecondsPerMillisecond': VmProxy(identifier: 'microsecondsPerMillisecond', externalStaticPropertyReader: () => Duration.microsecondsPerMillisecond),
      'microsecondsPerMinute': VmProxy(identifier: 'microsecondsPerMinute', externalStaticPropertyReader: () => Duration.microsecondsPerMinute),
      'microsecondsPerSecond': VmProxy(identifier: 'microsecondsPerSecond', externalStaticPropertyReader: () => Duration.microsecondsPerSecond),
      'millisecondsPerDay': VmProxy(identifier: 'millisecondsPerDay', externalStaticPropertyReader: () => Duration.millisecondsPerDay),
      'millisecondsPerHour': VmProxy(identifier: 'millisecondsPerHour', externalStaticPropertyReader: () => Duration.millisecondsPerHour),
      'millisecondsPerMinute': VmProxy(identifier: 'millisecondsPerMinute', externalStaticPropertyReader: () => Duration.millisecondsPerMinute),
      'millisecondsPerSecond': VmProxy(identifier: 'millisecondsPerSecond', externalStaticPropertyReader: () => Duration.millisecondsPerSecond),
      'minutesPerDay': VmProxy(identifier: 'minutesPerDay', externalStaticPropertyReader: () => Duration.minutesPerDay),
      'minutesPerHour': VmProxy(identifier: 'minutesPerHour', externalStaticPropertyReader: () => Duration.minutesPerHour),
      'secondsPerDay': VmProxy(identifier: 'secondsPerDay', externalStaticPropertyReader: () => Duration.secondsPerDay),
      'secondsPerHour': VmProxy(identifier: 'secondsPerHour', externalStaticPropertyReader: () => Duration.secondsPerHour),
      'secondsPerMinute': VmProxy(identifier: 'secondsPerMinute', externalStaticPropertyReader: () => Duration.secondsPerMinute),
      'zero': VmProxy(identifier: 'zero', externalStaticPropertyReader: () => Duration.zero),
      'abs': VmProxy(identifier: 'abs', externalInstancePropertyReader: (Duration instance) => instance.abs),
      'compareTo': VmProxy(identifier: 'compareTo', externalInstancePropertyReader: (Duration instance) => instance.compareTo),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Duration instance) => instance.hashCode),
      'inDays': VmProxy(identifier: 'inDays', externalInstancePropertyReader: (Duration instance) => instance.inDays),
      'inHours': VmProxy(identifier: 'inHours', externalInstancePropertyReader: (Duration instance) => instance.inHours),
      'inMicroseconds': VmProxy(identifier: 'inMicroseconds', externalInstancePropertyReader: (Duration instance) => instance.inMicroseconds),
      'inMilliseconds': VmProxy(identifier: 'inMilliseconds', externalInstancePropertyReader: (Duration instance) => instance.inMilliseconds),
      'inMinutes': VmProxy(identifier: 'inMinutes', externalInstancePropertyReader: (Duration instance) => instance.inMinutes),
      'inSeconds': VmProxy(identifier: 'inSeconds', externalInstancePropertyReader: (Duration instance) => instance.inSeconds),
      'isNegative': VmProxy(identifier: 'isNegative', externalInstancePropertyReader: (Duration instance) => instance.isNegative),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Duration instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Duration instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Duration instance) => instance.toString),
    },
  );

  ///class Encoding
  static final classEncoding = VmClass<Encoding>(
    identifier: 'Encoding',
    superclassNames: ['Object', 'Codec'],
    externalProxyMap: {
      'getByName': VmProxy(identifier: 'getByName', externalStaticPropertyReader: () => Encoding.getByName),
      'decode': VmProxy(identifier: 'decode', externalInstancePropertyReader: (Encoding instance) => instance.decode),
      'decoder': VmProxy(identifier: 'decoder', externalInstancePropertyReader: (Encoding instance) => instance.decoder),
      'decodeStream': VmProxy(identifier: 'decodeStream', externalInstancePropertyReader: (Encoding instance) => instance.decodeStream),
      'encode': VmProxy(identifier: 'encode', externalInstancePropertyReader: (Encoding instance) => instance.encode),
      'encoder': VmProxy(identifier: 'encoder', externalInstancePropertyReader: (Encoding instance) => instance.encoder),
      'fuse': VmProxy(identifier: 'fuse', externalInstancePropertyReader: (Encoding instance) => instance.fuse),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Encoding instance) => instance.hashCode),
      'inverted': VmProxy(identifier: 'inverted', externalInstancePropertyReader: (Encoding instance) => instance.inverted),
      'name': VmProxy(identifier: 'name', externalInstancePropertyReader: (Encoding instance) => instance.name),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Encoding instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Encoding instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Encoding instance) => instance.toString),
    },
  );

  ///class Endian
  static final classEndian = VmClass<Endian>(
    identifier: 'Endian',
    superclassNames: ['Object'],
    externalProxyMap: {
      'big': VmProxy(identifier: 'big', externalStaticPropertyReader: () => Endian.big),
      'host': VmProxy(identifier: 'host', externalStaticPropertyReader: () => Endian.host),
      'little': VmProxy(identifier: 'little', externalStaticPropertyReader: () => Endian.little),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Endian instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Endian instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Endian instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Endian instance) => instance.toString),
    },
  );

  ///class Enum
  static final classEnum = VmClass<Enum>(
    identifier: 'Enum',
    superclassNames: ['Object'],
    externalProxyMap: {
      'compareByIndex': VmProxy(identifier: 'compareByIndex', externalStaticPropertyReader: () => Enum.compareByIndex),
      'compareByName': VmProxy(identifier: 'compareByName', externalStaticPropertyReader: () => Enum.compareByName),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Enum instance) => instance.hashCode),
      'index': VmProxy(identifier: 'index', externalInstancePropertyReader: (Enum instance) => instance.index),
      'name': VmProxy(identifier: 'name', externalInstancePropertyReader: (Enum instance) => instance.name),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Enum instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Enum instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Enum instance) => instance.toString),
    },
  );

  ///class Error
  static final classError = VmClass<Error>(
    identifier: 'Error',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Error.new),
      'safeToString': VmProxy(identifier: 'safeToString', externalStaticPropertyReader: () => Error.safeToString),
      'throwWithStackTrace': VmProxy(identifier: 'throwWithStackTrace', externalStaticPropertyReader: () => Error.throwWithStackTrace),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Error instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Error instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Error instance) => instance.runtimeType),
      'stackTrace': VmProxy(identifier: 'stackTrace', externalInstancePropertyReader: (Error instance) => instance.stackTrace),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Error instance) => instance.toString),
    },
  );

  ///class EventSink
  static final classEventSink = VmClass<EventSink>(
    identifier: 'EventSink',
    superclassNames: ['Object', 'Sink'],
    externalProxyMap: {
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (EventSink instance) => instance.add),
      'addError': VmProxy(identifier: 'addError', externalInstancePropertyReader: (EventSink instance) => instance.addError),
      'close': VmProxy(identifier: 'close', externalInstancePropertyReader: (EventSink instance) => instance.close),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (EventSink instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (EventSink instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (EventSink instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (EventSink instance) => instance.toString),
    },
  );

  ///class Exception
  static final classException = VmClass<Exception>(
    identifier: 'Exception',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Exception.new),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Exception instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Exception instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Exception instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Exception instance) => instance.toString),
    },
  );

  ///class Expando
  static final classExpando = VmClass<Expando>(
    identifier: 'Expando',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Expando.new),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Expando instance) => instance.hashCode),
      'name': VmProxy(identifier: 'name', externalInstancePropertyReader: (Expando instance) => instance.name),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Expando instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Expando instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Expando instance) => instance.toString),
    },
  );

  ///class File
  static final classFile = VmClass<File>(
    identifier: 'File',
    superclassNames: ['Object', 'FileSystemEntity'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => File.new),
      'fromRawPath': VmProxy(identifier: 'fromRawPath', externalStaticPropertyReader: () => File.fromRawPath),
      'fromUri': VmProxy(identifier: 'fromUri', externalStaticPropertyReader: () => File.fromUri),
      'absolute': VmProxy(identifier: 'absolute', externalInstancePropertyReader: (File instance) => instance.absolute),
      'copy': VmProxy(identifier: 'copy', externalInstancePropertyReader: (File instance) => instance.copy),
      'copySync': VmProxy(identifier: 'copySync', externalInstancePropertyReader: (File instance) => instance.copySync),
      'create': VmProxy(identifier: 'create', externalInstancePropertyReader: (File instance) => instance.create),
      'createSync': VmProxy(identifier: 'createSync', externalInstancePropertyReader: (File instance) => instance.createSync),
      'delete': VmProxy(identifier: 'delete', externalInstancePropertyReader: (File instance) => instance.delete),
      'deleteSync': VmProxy(identifier: 'deleteSync', externalInstancePropertyReader: (File instance) => instance.deleteSync),
      'exists': VmProxy(identifier: 'exists', externalInstancePropertyReader: (File instance) => instance.exists),
      'existsSync': VmProxy(identifier: 'existsSync', externalInstancePropertyReader: (File instance) => instance.existsSync),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (File instance) => instance.hashCode),
      'isAbsolute': VmProxy(identifier: 'isAbsolute', externalInstancePropertyReader: (File instance) => instance.isAbsolute),
      'lastAccessed': VmProxy(identifier: 'lastAccessed', externalInstancePropertyReader: (File instance) => instance.lastAccessed),
      'lastAccessedSync': VmProxy(identifier: 'lastAccessedSync', externalInstancePropertyReader: (File instance) => instance.lastAccessedSync),
      'lastModified': VmProxy(identifier: 'lastModified', externalInstancePropertyReader: (File instance) => instance.lastModified),
      'lastModifiedSync': VmProxy(identifier: 'lastModifiedSync', externalInstancePropertyReader: (File instance) => instance.lastModifiedSync),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (File instance) => instance.length),
      'lengthSync': VmProxy(identifier: 'lengthSync', externalInstancePropertyReader: (File instance) => instance.lengthSync),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (File instance) => instance.noSuchMethod),
      'open': VmProxy(identifier: 'open', externalInstancePropertyReader: (File instance) => instance.open),
      'openRead': VmProxy(identifier: 'openRead', externalInstancePropertyReader: (File instance) => instance.openRead),
      'openSync': VmProxy(identifier: 'openSync', externalInstancePropertyReader: (File instance) => instance.openSync),
      'openWrite': VmProxy(identifier: 'openWrite', externalInstancePropertyReader: (File instance) => instance.openWrite),
      'parent': VmProxy(identifier: 'parent', externalInstancePropertyReader: (File instance) => instance.parent),
      'path': VmProxy(identifier: 'path', externalInstancePropertyReader: (File instance) => instance.path),
      'readAsBytes': VmProxy(identifier: 'readAsBytes', externalInstancePropertyReader: (File instance) => instance.readAsBytes),
      'readAsBytesSync': VmProxy(identifier: 'readAsBytesSync', externalInstancePropertyReader: (File instance) => instance.readAsBytesSync),
      'readAsLines': VmProxy(identifier: 'readAsLines', externalInstancePropertyReader: (File instance) => instance.readAsLines),
      'readAsLinesSync': VmProxy(identifier: 'readAsLinesSync', externalInstancePropertyReader: (File instance) => instance.readAsLinesSync),
      'readAsString': VmProxy(identifier: 'readAsString', externalInstancePropertyReader: (File instance) => instance.readAsString),
      'readAsStringSync': VmProxy(identifier: 'readAsStringSync', externalInstancePropertyReader: (File instance) => instance.readAsStringSync),
      'rename': VmProxy(identifier: 'rename', externalInstancePropertyReader: (File instance) => instance.rename),
      'renameSync': VmProxy(identifier: 'renameSync', externalInstancePropertyReader: (File instance) => instance.renameSync),
      'resolveSymbolicLinks': VmProxy(identifier: 'resolveSymbolicLinks', externalInstancePropertyReader: (File instance) => instance.resolveSymbolicLinks),
      'resolveSymbolicLinksSync': VmProxy(identifier: 'resolveSymbolicLinksSync', externalInstancePropertyReader: (File instance) => instance.resolveSymbolicLinksSync),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (File instance) => instance.runtimeType),
      'setLastAccessed': VmProxy(identifier: 'setLastAccessed', externalInstancePropertyReader: (File instance) => instance.setLastAccessed),
      'setLastAccessedSync': VmProxy(identifier: 'setLastAccessedSync', externalInstancePropertyReader: (File instance) => instance.setLastAccessedSync),
      'setLastModified': VmProxy(identifier: 'setLastModified', externalInstancePropertyReader: (File instance) => instance.setLastModified),
      'setLastModifiedSync': VmProxy(identifier: 'setLastModifiedSync', externalInstancePropertyReader: (File instance) => instance.setLastModifiedSync),
      'stat': VmProxy(identifier: 'stat', externalInstancePropertyReader: (File instance) => instance.stat),
      'statSync': VmProxy(identifier: 'statSync', externalInstancePropertyReader: (File instance) => instance.statSync),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (File instance) => instance.toString),
      'uri': VmProxy(identifier: 'uri', externalInstancePropertyReader: (File instance) => instance.uri),
      'watch': VmProxy(identifier: 'watch', externalInstancePropertyReader: (File instance) => instance.watch),
      'writeAsBytes': VmProxy(identifier: 'writeAsBytes', externalInstancePropertyReader: (File instance) => instance.writeAsBytes),
      'writeAsBytesSync': VmProxy(identifier: 'writeAsBytesSync', externalInstancePropertyReader: (File instance) => instance.writeAsBytesSync),
      'writeAsString': VmProxy(identifier: 'writeAsString', externalInstancePropertyReader: (File instance) => instance.writeAsString),
      'writeAsStringSync': VmProxy(identifier: 'writeAsStringSync', externalInstancePropertyReader: (File instance) => instance.writeAsStringSync),
    },
  );

  ///class FileLock
  static final classFileLock = VmClass<FileLock>(
    identifier: 'FileLock',
    superclassNames: ['Object'],
    externalProxyMap: {
      'blockingExclusive': VmProxy(identifier: 'blockingExclusive', externalStaticPropertyReader: () => FileLock.blockingExclusive),
      'blockingShared': VmProxy(identifier: 'blockingShared', externalStaticPropertyReader: () => FileLock.blockingShared),
      'exclusive': VmProxy(identifier: 'exclusive', externalStaticPropertyReader: () => FileLock.exclusive),
      'shared': VmProxy(identifier: 'shared', externalStaticPropertyReader: () => FileLock.shared),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (FileLock instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (FileLock instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (FileLock instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (FileLock instance) => instance.toString),
    },
  );

  ///class FileMode
  static final classFileMode = VmClass<FileMode>(
    identifier: 'FileMode',
    superclassNames: ['Object'],
    externalProxyMap: {
      'append': VmProxy(identifier: 'append', externalStaticPropertyReader: () => FileMode.append),
      'read': VmProxy(identifier: 'read', externalStaticPropertyReader: () => FileMode.read),
      'write': VmProxy(identifier: 'write', externalStaticPropertyReader: () => FileMode.write),
      'writeOnly': VmProxy(identifier: 'writeOnly', externalStaticPropertyReader: () => FileMode.writeOnly),
      'writeOnlyAppend': VmProxy(identifier: 'writeOnlyAppend', externalStaticPropertyReader: () => FileMode.writeOnlyAppend),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (FileMode instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (FileMode instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (FileMode instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (FileMode instance) => instance.toString),
    },
  );

  ///class FileStat
  static final classFileStat = VmClass<FileStat>(
    identifier: 'FileStat',
    superclassNames: ['Object'],
    externalProxyMap: {
      'stat': VmProxy(identifier: 'stat', externalStaticPropertyReader: () => FileStat.stat),
      'statSync': VmProxy(identifier: 'statSync', externalStaticPropertyReader: () => FileStat.statSync),
      'accessed': VmProxy(identifier: 'accessed', externalInstancePropertyReader: (FileStat instance) => instance.accessed),
      'changed': VmProxy(identifier: 'changed', externalInstancePropertyReader: (FileStat instance) => instance.changed),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (FileStat instance) => instance.hashCode),
      'mode': VmProxy(identifier: 'mode', externalInstancePropertyReader: (FileStat instance) => instance.mode),
      'modeString': VmProxy(identifier: 'modeString', externalInstancePropertyReader: (FileStat instance) => instance.modeString),
      'modified': VmProxy(identifier: 'modified', externalInstancePropertyReader: (FileStat instance) => instance.modified),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (FileStat instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (FileStat instance) => instance.runtimeType),
      'size': VmProxy(identifier: 'size', externalInstancePropertyReader: (FileStat instance) => instance.size),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (FileStat instance) => instance.toString),
      'type': VmProxy(identifier: 'type', externalInstancePropertyReader: (FileStat instance) => instance.type),
    },
  );

  ///class FileSystemCreateEvent
  static final classFileSystemCreateEvent = VmClass<FileSystemCreateEvent>(
    identifier: 'FileSystemCreateEvent',
    superclassNames: ['Object', 'FileSystemEvent'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => FileSystemCreateEvent.new),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (FileSystemCreateEvent instance) => instance.hashCode),
      'isDirectory': VmProxy(identifier: 'isDirectory', externalInstancePropertyReader: (FileSystemCreateEvent instance) => instance.isDirectory),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (FileSystemCreateEvent instance) => instance.noSuchMethod),
      'path': VmProxy(identifier: 'path', externalInstancePropertyReader: (FileSystemCreateEvent instance) => instance.path),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (FileSystemCreateEvent instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (FileSystemCreateEvent instance) => instance.toString),
      'type': VmProxy(identifier: 'type', externalInstancePropertyReader: (FileSystemCreateEvent instance) => instance.type),
    },
  );

  ///class FileSystemDeleteEvent
  static final classFileSystemDeleteEvent = VmClass<FileSystemDeleteEvent>(
    identifier: 'FileSystemDeleteEvent',
    superclassNames: ['Object', 'FileSystemEvent'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => FileSystemDeleteEvent.new),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (FileSystemDeleteEvent instance) => instance.hashCode),
      'isDirectory': VmProxy(identifier: 'isDirectory', externalInstancePropertyReader: (FileSystemDeleteEvent instance) => instance.isDirectory),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (FileSystemDeleteEvent instance) => instance.noSuchMethod),
      'path': VmProxy(identifier: 'path', externalInstancePropertyReader: (FileSystemDeleteEvent instance) => instance.path),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (FileSystemDeleteEvent instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (FileSystemDeleteEvent instance) => instance.toString),
      'type': VmProxy(identifier: 'type', externalInstancePropertyReader: (FileSystemDeleteEvent instance) => instance.type),
    },
  );

  ///class FileSystemEntity
  static final classFileSystemEntity = VmClass<FileSystemEntity>(
    identifier: 'FileSystemEntity',
    superclassNames: ['Object'],
    externalProxyMap: {
      'identical': VmProxy(identifier: 'identical', externalStaticPropertyReader: () => FileSystemEntity.identical),
      'identicalSync': VmProxy(identifier: 'identicalSync', externalStaticPropertyReader: () => FileSystemEntity.identicalSync),
      'isDirectory': VmProxy(identifier: 'isDirectory', externalStaticPropertyReader: () => FileSystemEntity.isDirectory),
      'isDirectorySync': VmProxy(identifier: 'isDirectorySync', externalStaticPropertyReader: () => FileSystemEntity.isDirectorySync),
      'isFile': VmProxy(identifier: 'isFile', externalStaticPropertyReader: () => FileSystemEntity.isFile),
      'isFileSync': VmProxy(identifier: 'isFileSync', externalStaticPropertyReader: () => FileSystemEntity.isFileSync),
      'isLink': VmProxy(identifier: 'isLink', externalStaticPropertyReader: () => FileSystemEntity.isLink),
      'isLinkSync': VmProxy(identifier: 'isLinkSync', externalStaticPropertyReader: () => FileSystemEntity.isLinkSync),
      'isWatchSupported': VmProxy(identifier: 'isWatchSupported', externalStaticPropertyReader: () => FileSystemEntity.isWatchSupported),
      'parentOf': VmProxy(identifier: 'parentOf', externalStaticPropertyReader: () => FileSystemEntity.parentOf),
      'type': VmProxy(identifier: 'type', externalStaticPropertyReader: () => FileSystemEntity.type),
      'typeSync': VmProxy(identifier: 'typeSync', externalStaticPropertyReader: () => FileSystemEntity.typeSync),
      'absolute': VmProxy(identifier: 'absolute', externalInstancePropertyReader: (FileSystemEntity instance) => instance.absolute),
      'delete': VmProxy(identifier: 'delete', externalInstancePropertyReader: (FileSystemEntity instance) => instance.delete),
      'deleteSync': VmProxy(identifier: 'deleteSync', externalInstancePropertyReader: (FileSystemEntity instance) => instance.deleteSync),
      'exists': VmProxy(identifier: 'exists', externalInstancePropertyReader: (FileSystemEntity instance) => instance.exists),
      'existsSync': VmProxy(identifier: 'existsSync', externalInstancePropertyReader: (FileSystemEntity instance) => instance.existsSync),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (FileSystemEntity instance) => instance.hashCode),
      'isAbsolute': VmProxy(identifier: 'isAbsolute', externalInstancePropertyReader: (FileSystemEntity instance) => instance.isAbsolute),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (FileSystemEntity instance) => instance.noSuchMethod),
      'parent': VmProxy(identifier: 'parent', externalInstancePropertyReader: (FileSystemEntity instance) => instance.parent),
      'path': VmProxy(identifier: 'path', externalInstancePropertyReader: (FileSystemEntity instance) => instance.path),
      'rename': VmProxy(identifier: 'rename', externalInstancePropertyReader: (FileSystemEntity instance) => instance.rename),
      'renameSync': VmProxy(identifier: 'renameSync', externalInstancePropertyReader: (FileSystemEntity instance) => instance.renameSync),
      'resolveSymbolicLinks': VmProxy(identifier: 'resolveSymbolicLinks', externalInstancePropertyReader: (FileSystemEntity instance) => instance.resolveSymbolicLinks),
      'resolveSymbolicLinksSync': VmProxy(identifier: 'resolveSymbolicLinksSync', externalInstancePropertyReader: (FileSystemEntity instance) => instance.resolveSymbolicLinksSync),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (FileSystemEntity instance) => instance.runtimeType),
      'stat': VmProxy(identifier: 'stat', externalInstancePropertyReader: (FileSystemEntity instance) => instance.stat),
      'statSync': VmProxy(identifier: 'statSync', externalInstancePropertyReader: (FileSystemEntity instance) => instance.statSync),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (FileSystemEntity instance) => instance.toString),
      'uri': VmProxy(identifier: 'uri', externalInstancePropertyReader: (FileSystemEntity instance) => instance.uri),
      'watch': VmProxy(identifier: 'watch', externalInstancePropertyReader: (FileSystemEntity instance) => instance.watch),
    },
  );

  ///class FileSystemEntityType
  static final classFileSystemEntityType = VmClass<FileSystemEntityType>(
    identifier: 'FileSystemEntityType',
    superclassNames: ['Object'],
    externalProxyMap: {
      'directory': VmProxy(identifier: 'directory', externalStaticPropertyReader: () => FileSystemEntityType.directory),
      'file': VmProxy(identifier: 'file', externalStaticPropertyReader: () => FileSystemEntityType.file),
      'link': VmProxy(identifier: 'link', externalStaticPropertyReader: () => FileSystemEntityType.link),
      'NOT_FOUND': VmProxy(identifier: 'NOT_FOUND', externalStaticPropertyReader: () => FileSystemEntityType.NOT_FOUND),
      'notFound': VmProxy(identifier: 'notFound', externalStaticPropertyReader: () => FileSystemEntityType.notFound),
      'pipe': VmProxy(identifier: 'pipe', externalStaticPropertyReader: () => FileSystemEntityType.pipe),
      'unixDomainSock': VmProxy(identifier: 'unixDomainSock', externalStaticPropertyReader: () => FileSystemEntityType.unixDomainSock),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (FileSystemEntityType instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (FileSystemEntityType instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (FileSystemEntityType instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (FileSystemEntityType instance) => instance.toString),
    },
  );

  ///class FileSystemEvent
  static final classFileSystemEvent = VmClass<FileSystemEvent>(
    identifier: 'FileSystemEvent',
    superclassNames: ['Object'],
    externalProxyMap: {
      'all': VmProxy(identifier: 'all', externalStaticPropertyReader: () => FileSystemEvent.all),
      'create': VmProxy(identifier: 'create', externalStaticPropertyReader: () => FileSystemEvent.create),
      'delete': VmProxy(identifier: 'delete', externalStaticPropertyReader: () => FileSystemEvent.delete),
      'modify': VmProxy(identifier: 'modify', externalStaticPropertyReader: () => FileSystemEvent.modify),
      'move': VmProxy(identifier: 'move', externalStaticPropertyReader: () => FileSystemEvent.move),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (FileSystemEvent instance) => instance.hashCode),
      'isDirectory': VmProxy(identifier: 'isDirectory', externalInstancePropertyReader: (FileSystemEvent instance) => instance.isDirectory),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (FileSystemEvent instance) => instance.noSuchMethod),
      'path': VmProxy(identifier: 'path', externalInstancePropertyReader: (FileSystemEvent instance) => instance.path),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (FileSystemEvent instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (FileSystemEvent instance) => instance.toString),
      'type': VmProxy(identifier: 'type', externalInstancePropertyReader: (FileSystemEvent instance) => instance.type),
    },
  );

  ///class FileSystemException
  static final classFileSystemException = VmClass<FileSystemException>(
    identifier: 'FileSystemException',
    superclassNames: ['Object', 'Exception', 'IOException'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => FileSystemException.new),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (FileSystemException instance) => instance.hashCode),
      'message': VmProxy(identifier: 'message', externalInstancePropertyReader: (FileSystemException instance) => instance.message),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (FileSystemException instance) => instance.noSuchMethod),
      'osError': VmProxy(identifier: 'osError', externalInstancePropertyReader: (FileSystemException instance) => instance.osError),
      'path': VmProxy(identifier: 'path', externalInstancePropertyReader: (FileSystemException instance) => instance.path),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (FileSystemException instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (FileSystemException instance) => instance.toString),
    },
  );

  ///class FileSystemModifyEvent
  static final classFileSystemModifyEvent = VmClass<FileSystemModifyEvent>(
    identifier: 'FileSystemModifyEvent',
    superclassNames: ['Object', 'FileSystemEvent'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => FileSystemModifyEvent.new),
      'contentChanged': VmProxy(identifier: 'contentChanged', externalInstancePropertyReader: (FileSystemModifyEvent instance) => instance.contentChanged),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (FileSystemModifyEvent instance) => instance.hashCode),
      'isDirectory': VmProxy(identifier: 'isDirectory', externalInstancePropertyReader: (FileSystemModifyEvent instance) => instance.isDirectory),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (FileSystemModifyEvent instance) => instance.noSuchMethod),
      'path': VmProxy(identifier: 'path', externalInstancePropertyReader: (FileSystemModifyEvent instance) => instance.path),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (FileSystemModifyEvent instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (FileSystemModifyEvent instance) => instance.toString),
      'type': VmProxy(identifier: 'type', externalInstancePropertyReader: (FileSystemModifyEvent instance) => instance.type),
    },
  );

  ///class FileSystemMoveEvent
  static final classFileSystemMoveEvent = VmClass<FileSystemMoveEvent>(
    identifier: 'FileSystemMoveEvent',
    superclassNames: ['Object', 'FileSystemEvent'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => FileSystemMoveEvent.new),
      'destination': VmProxy(identifier: 'destination', externalInstancePropertyReader: (FileSystemMoveEvent instance) => instance.destination),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (FileSystemMoveEvent instance) => instance.hashCode),
      'isDirectory': VmProxy(identifier: 'isDirectory', externalInstancePropertyReader: (FileSystemMoveEvent instance) => instance.isDirectory),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (FileSystemMoveEvent instance) => instance.noSuchMethod),
      'path': VmProxy(identifier: 'path', externalInstancePropertyReader: (FileSystemMoveEvent instance) => instance.path),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (FileSystemMoveEvent instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (FileSystemMoveEvent instance) => instance.toString),
      'type': VmProxy(identifier: 'type', externalInstancePropertyReader: (FileSystemMoveEvent instance) => instance.type),
    },
  );

  ///class Finalizer
  static final classFinalizer = VmClass<Finalizer>(
    identifier: 'Finalizer',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Finalizer.new, externalStaticFunctionCaller: (a0) => Finalizer.new((b0) => a0(b0))),
      'attach': VmProxy(identifier: 'attach', externalInstancePropertyReader: (Finalizer instance) => instance.attach),
      'detach': VmProxy(identifier: 'detach', externalInstancePropertyReader: (Finalizer instance) => instance.detach),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Finalizer instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Finalizer instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Finalizer instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Finalizer instance) => instance.toString),
    },
  );

  ///class Float32List
  static final classFloat32List = VmClass<Float32List>(
    identifier: 'Float32List',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable', 'List', 'TypedData', '_TypedFloatList'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Float32List.new),
      'fromList': VmProxy(identifier: 'fromList', externalStaticPropertyReader: () => Float32List.fromList),
      'sublistView': VmProxy(identifier: 'sublistView', externalStaticPropertyReader: () => Float32List.sublistView),
      'view': VmProxy(identifier: 'view', externalStaticPropertyReader: () => Float32List.view),
      'bytesPerElement': VmProxy(identifier: 'bytesPerElement', externalStaticPropertyReader: () => Float32List.bytesPerElement),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (Float32List instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (Float32List instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (Float32List instance) => instance.any, externalInstanceFunctionCaller: (Float32List instance, a0) => instance.any((b0) => a0(b0))),
      'asMap': VmProxy(identifier: 'asMap', externalInstancePropertyReader: (Float32List instance) => instance.asMap),
      'buffer': VmProxy(identifier: 'buffer', externalInstancePropertyReader: (Float32List instance) => instance.buffer),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (Float32List instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (Float32List instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (Float32List instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (Float32List instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (Float32List instance) => instance.elementAtOrNull),
      'elementSizeInBytes': VmProxy(identifier: 'elementSizeInBytes', externalInstancePropertyReader: (Float32List instance) => instance.elementSizeInBytes),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (Float32List instance) => instance.every, externalInstanceFunctionCaller: (Float32List instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (Float32List instance) => instance.expand, externalInstanceFunctionCaller: (Float32List instance, a0) => instance.expand((b0) => a0(b0))),
      'fillRange': VmProxy(identifier: 'fillRange', externalInstancePropertyReader: (Float32List instance) => instance.fillRange),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (Float32List instance) => instance.first, externalInstancePropertyWriter: (Float32List instance, value) => instance.first = value),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (Float32List instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (Float32List instance) => instance.firstWhere, externalInstanceFunctionCaller: (Float32List instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (Float32List instance) => instance.fold, externalInstanceFunctionCaller: (Float32List instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (Float32List instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (Float32List instance) => instance.forEach, externalInstanceFunctionCaller: (Float32List instance, a0) => instance.forEach((b0) => a0(b0))),
      'getRange': VmProxy(identifier: 'getRange', externalInstancePropertyReader: (Float32List instance) => instance.getRange),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Float32List instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (Float32List instance) => instance.indexed),
      'indexOf': VmProxy(identifier: 'indexOf', externalInstancePropertyReader: (Float32List instance) => instance.indexOf),
      'indexWhere': VmProxy(identifier: 'indexWhere', externalInstancePropertyReader: (Float32List instance) => instance.indexWhere, externalInstanceFunctionCaller: (Float32List instance, a0, [a1 = 0]) => instance.indexWhere((b0) => a0(b0), a1)),
      'insert': VmProxy(identifier: 'insert', externalInstancePropertyReader: (Float32List instance) => instance.insert),
      'insertAll': VmProxy(identifier: 'insertAll', externalInstancePropertyReader: (Float32List instance) => instance.insertAll),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (Float32List instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (Float32List instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (Float32List instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (Float32List instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyWriter: (Float32List instance, value) => instance.last = value, externalInstancePropertyReader: (Float32List instance) => instance.last),
      'lastIndexOf': VmProxy(identifier: 'lastIndexOf', externalInstancePropertyReader: (Float32List instance) => instance.lastIndexOf),
      'lastIndexWhere': VmProxy(identifier: 'lastIndexWhere', externalInstancePropertyReader: (Float32List instance) => instance.lastIndexWhere, externalInstanceFunctionCaller: (Float32List instance, a0, [a1]) => instance.lastIndexWhere((b0) => a0(b0), a1)),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (Float32List instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (Float32List instance) => instance.lastWhere, externalInstanceFunctionCaller: (Float32List instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (Float32List instance) => instance.length, externalInstancePropertyWriter: (Float32List instance, value) => instance.length = value),
      'lengthInBytes': VmProxy(identifier: 'lengthInBytes', externalInstancePropertyReader: (Float32List instance) => instance.lengthInBytes),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (Float32List instance) => instance.map, externalInstanceFunctionCaller: (Float32List instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (Float32List instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Float32List instance) => instance.noSuchMethod),
      'offsetInBytes': VmProxy(identifier: 'offsetInBytes', externalInstancePropertyReader: (Float32List instance) => instance.offsetInBytes),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (Float32List instance) => instance.reduce, externalInstanceFunctionCaller: (Float32List instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (Float32List instance) => instance.remove),
      'removeAt': VmProxy(identifier: 'removeAt', externalInstancePropertyReader: (Float32List instance) => instance.removeAt),
      'removeLast': VmProxy(identifier: 'removeLast', externalInstancePropertyReader: (Float32List instance) => instance.removeLast),
      'removeRange': VmProxy(identifier: 'removeRange', externalInstancePropertyReader: (Float32List instance) => instance.removeRange),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (Float32List instance) => instance.removeWhere, externalInstanceFunctionCaller: (Float32List instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'replaceRange': VmProxy(identifier: 'replaceRange', externalInstancePropertyReader: (Float32List instance) => instance.replaceRange),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (Float32List instance) => instance.retainWhere, externalInstanceFunctionCaller: (Float32List instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'reversed': VmProxy(identifier: 'reversed', externalInstancePropertyReader: (Float32List instance) => instance.reversed),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Float32List instance) => instance.runtimeType),
      'setAll': VmProxy(identifier: 'setAll', externalInstancePropertyReader: (Float32List instance) => instance.setAll),
      'setRange': VmProxy(identifier: 'setRange', externalInstancePropertyReader: (Float32List instance) => instance.setRange),
      'shuffle': VmProxy(identifier: 'shuffle', externalInstancePropertyReader: (Float32List instance) => instance.shuffle),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (Float32List instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (Float32List instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (Float32List instance) => instance.singleWhere, externalInstanceFunctionCaller: (Float32List instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (Float32List instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (Float32List instance) => instance.skipWhile, externalInstanceFunctionCaller: (Float32List instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'sort': VmProxy(identifier: 'sort', externalInstancePropertyReader: (Float32List instance) => instance.sort, externalInstanceFunctionCaller: (Float32List instance, [a0]) => instance.sort(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'sublist': VmProxy(identifier: 'sublist', externalInstancePropertyReader: (Float32List instance) => instance.sublist),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (Float32List instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (Float32List instance) => instance.takeWhile, externalInstanceFunctionCaller: (Float32List instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (Float32List instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (Float32List instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Float32List instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (Float32List instance) => instance.where, externalInstanceFunctionCaller: (Float32List instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (Float32List instance) => instance.whereType),
    },
  );

  ///class Float32x4
  static final classFloat32x4 = VmClass<Float32x4>(
    identifier: 'Float32x4',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Float32x4.new),
      'fromFloat64x2': VmProxy(identifier: 'fromFloat64x2', externalStaticPropertyReader: () => Float32x4.fromFloat64x2),
      'fromInt32x4Bits': VmProxy(identifier: 'fromInt32x4Bits', externalStaticPropertyReader: () => Float32x4.fromInt32x4Bits),
      'splat': VmProxy(identifier: 'splat', externalStaticPropertyReader: () => Float32x4.splat),
      'zero': VmProxy(identifier: 'zero', externalStaticPropertyReader: () => Float32x4.zero),
      'wwww': VmProxy(identifier: 'wwww', externalStaticPropertyReader: () => Float32x4.wwww),
      'wwwx': VmProxy(identifier: 'wwwx', externalStaticPropertyReader: () => Float32x4.wwwx),
      'wwwy': VmProxy(identifier: 'wwwy', externalStaticPropertyReader: () => Float32x4.wwwy),
      'wwwz': VmProxy(identifier: 'wwwz', externalStaticPropertyReader: () => Float32x4.wwwz),
      'wwxw': VmProxy(identifier: 'wwxw', externalStaticPropertyReader: () => Float32x4.wwxw),
      'wwxx': VmProxy(identifier: 'wwxx', externalStaticPropertyReader: () => Float32x4.wwxx),
      'wwxy': VmProxy(identifier: 'wwxy', externalStaticPropertyReader: () => Float32x4.wwxy),
      'wwxz': VmProxy(identifier: 'wwxz', externalStaticPropertyReader: () => Float32x4.wwxz),
      'wwyw': VmProxy(identifier: 'wwyw', externalStaticPropertyReader: () => Float32x4.wwyw),
      'wwyx': VmProxy(identifier: 'wwyx', externalStaticPropertyReader: () => Float32x4.wwyx),
      'wwyy': VmProxy(identifier: 'wwyy', externalStaticPropertyReader: () => Float32x4.wwyy),
      'wwyz': VmProxy(identifier: 'wwyz', externalStaticPropertyReader: () => Float32x4.wwyz),
      'wwzw': VmProxy(identifier: 'wwzw', externalStaticPropertyReader: () => Float32x4.wwzw),
      'wwzx': VmProxy(identifier: 'wwzx', externalStaticPropertyReader: () => Float32x4.wwzx),
      'wwzy': VmProxy(identifier: 'wwzy', externalStaticPropertyReader: () => Float32x4.wwzy),
      'wwzz': VmProxy(identifier: 'wwzz', externalStaticPropertyReader: () => Float32x4.wwzz),
      'wxww': VmProxy(identifier: 'wxww', externalStaticPropertyReader: () => Float32x4.wxww),
      'wxwx': VmProxy(identifier: 'wxwx', externalStaticPropertyReader: () => Float32x4.wxwx),
      'wxwy': VmProxy(identifier: 'wxwy', externalStaticPropertyReader: () => Float32x4.wxwy),
      'wxwz': VmProxy(identifier: 'wxwz', externalStaticPropertyReader: () => Float32x4.wxwz),
      'wxxw': VmProxy(identifier: 'wxxw', externalStaticPropertyReader: () => Float32x4.wxxw),
      'wxxx': VmProxy(identifier: 'wxxx', externalStaticPropertyReader: () => Float32x4.wxxx),
      'wxxy': VmProxy(identifier: 'wxxy', externalStaticPropertyReader: () => Float32x4.wxxy),
      'wxxz': VmProxy(identifier: 'wxxz', externalStaticPropertyReader: () => Float32x4.wxxz),
      'wxyw': VmProxy(identifier: 'wxyw', externalStaticPropertyReader: () => Float32x4.wxyw),
      'wxyx': VmProxy(identifier: 'wxyx', externalStaticPropertyReader: () => Float32x4.wxyx),
      'wxyy': VmProxy(identifier: 'wxyy', externalStaticPropertyReader: () => Float32x4.wxyy),
      'wxyz': VmProxy(identifier: 'wxyz', externalStaticPropertyReader: () => Float32x4.wxyz),
      'wxzw': VmProxy(identifier: 'wxzw', externalStaticPropertyReader: () => Float32x4.wxzw),
      'wxzx': VmProxy(identifier: 'wxzx', externalStaticPropertyReader: () => Float32x4.wxzx),
      'wxzy': VmProxy(identifier: 'wxzy', externalStaticPropertyReader: () => Float32x4.wxzy),
      'wxzz': VmProxy(identifier: 'wxzz', externalStaticPropertyReader: () => Float32x4.wxzz),
      'wyww': VmProxy(identifier: 'wyww', externalStaticPropertyReader: () => Float32x4.wyww),
      'wywx': VmProxy(identifier: 'wywx', externalStaticPropertyReader: () => Float32x4.wywx),
      'wywy': VmProxy(identifier: 'wywy', externalStaticPropertyReader: () => Float32x4.wywy),
      'wywz': VmProxy(identifier: 'wywz', externalStaticPropertyReader: () => Float32x4.wywz),
      'wyxw': VmProxy(identifier: 'wyxw', externalStaticPropertyReader: () => Float32x4.wyxw),
      'wyxx': VmProxy(identifier: 'wyxx', externalStaticPropertyReader: () => Float32x4.wyxx),
      'wyxy': VmProxy(identifier: 'wyxy', externalStaticPropertyReader: () => Float32x4.wyxy),
      'wyxz': VmProxy(identifier: 'wyxz', externalStaticPropertyReader: () => Float32x4.wyxz),
      'wyyw': VmProxy(identifier: 'wyyw', externalStaticPropertyReader: () => Float32x4.wyyw),
      'wyyx': VmProxy(identifier: 'wyyx', externalStaticPropertyReader: () => Float32x4.wyyx),
      'wyyy': VmProxy(identifier: 'wyyy', externalStaticPropertyReader: () => Float32x4.wyyy),
      'wyyz': VmProxy(identifier: 'wyyz', externalStaticPropertyReader: () => Float32x4.wyyz),
      'wyzw': VmProxy(identifier: 'wyzw', externalStaticPropertyReader: () => Float32x4.wyzw),
      'wyzx': VmProxy(identifier: 'wyzx', externalStaticPropertyReader: () => Float32x4.wyzx),
      'wyzy': VmProxy(identifier: 'wyzy', externalStaticPropertyReader: () => Float32x4.wyzy),
      'wyzz': VmProxy(identifier: 'wyzz', externalStaticPropertyReader: () => Float32x4.wyzz),
      'wzww': VmProxy(identifier: 'wzww', externalStaticPropertyReader: () => Float32x4.wzww),
      'wzwx': VmProxy(identifier: 'wzwx', externalStaticPropertyReader: () => Float32x4.wzwx),
      'wzwy': VmProxy(identifier: 'wzwy', externalStaticPropertyReader: () => Float32x4.wzwy),
      'wzwz': VmProxy(identifier: 'wzwz', externalStaticPropertyReader: () => Float32x4.wzwz),
      'wzxw': VmProxy(identifier: 'wzxw', externalStaticPropertyReader: () => Float32x4.wzxw),
      'wzxx': VmProxy(identifier: 'wzxx', externalStaticPropertyReader: () => Float32x4.wzxx),
      'wzxy': VmProxy(identifier: 'wzxy', externalStaticPropertyReader: () => Float32x4.wzxy),
      'wzxz': VmProxy(identifier: 'wzxz', externalStaticPropertyReader: () => Float32x4.wzxz),
      'wzyw': VmProxy(identifier: 'wzyw', externalStaticPropertyReader: () => Float32x4.wzyw),
      'wzyx': VmProxy(identifier: 'wzyx', externalStaticPropertyReader: () => Float32x4.wzyx),
      'wzyy': VmProxy(identifier: 'wzyy', externalStaticPropertyReader: () => Float32x4.wzyy),
      'wzyz': VmProxy(identifier: 'wzyz', externalStaticPropertyReader: () => Float32x4.wzyz),
      'wzzw': VmProxy(identifier: 'wzzw', externalStaticPropertyReader: () => Float32x4.wzzw),
      'wzzx': VmProxy(identifier: 'wzzx', externalStaticPropertyReader: () => Float32x4.wzzx),
      'wzzy': VmProxy(identifier: 'wzzy', externalStaticPropertyReader: () => Float32x4.wzzy),
      'wzzz': VmProxy(identifier: 'wzzz', externalStaticPropertyReader: () => Float32x4.wzzz),
      'xwww': VmProxy(identifier: 'xwww', externalStaticPropertyReader: () => Float32x4.xwww),
      'xwwx': VmProxy(identifier: 'xwwx', externalStaticPropertyReader: () => Float32x4.xwwx),
      'xwwy': VmProxy(identifier: 'xwwy', externalStaticPropertyReader: () => Float32x4.xwwy),
      'xwwz': VmProxy(identifier: 'xwwz', externalStaticPropertyReader: () => Float32x4.xwwz),
      'xwxw': VmProxy(identifier: 'xwxw', externalStaticPropertyReader: () => Float32x4.xwxw),
      'xwxx': VmProxy(identifier: 'xwxx', externalStaticPropertyReader: () => Float32x4.xwxx),
      'xwxy': VmProxy(identifier: 'xwxy', externalStaticPropertyReader: () => Float32x4.xwxy),
      'xwxz': VmProxy(identifier: 'xwxz', externalStaticPropertyReader: () => Float32x4.xwxz),
      'xwyw': VmProxy(identifier: 'xwyw', externalStaticPropertyReader: () => Float32x4.xwyw),
      'xwyx': VmProxy(identifier: 'xwyx', externalStaticPropertyReader: () => Float32x4.xwyx),
      'xwyy': VmProxy(identifier: 'xwyy', externalStaticPropertyReader: () => Float32x4.xwyy),
      'xwyz': VmProxy(identifier: 'xwyz', externalStaticPropertyReader: () => Float32x4.xwyz),
      'xwzw': VmProxy(identifier: 'xwzw', externalStaticPropertyReader: () => Float32x4.xwzw),
      'xwzx': VmProxy(identifier: 'xwzx', externalStaticPropertyReader: () => Float32x4.xwzx),
      'xwzy': VmProxy(identifier: 'xwzy', externalStaticPropertyReader: () => Float32x4.xwzy),
      'xwzz': VmProxy(identifier: 'xwzz', externalStaticPropertyReader: () => Float32x4.xwzz),
      'xxww': VmProxy(identifier: 'xxww', externalStaticPropertyReader: () => Float32x4.xxww),
      'xxwx': VmProxy(identifier: 'xxwx', externalStaticPropertyReader: () => Float32x4.xxwx),
      'xxwy': VmProxy(identifier: 'xxwy', externalStaticPropertyReader: () => Float32x4.xxwy),
      'xxwz': VmProxy(identifier: 'xxwz', externalStaticPropertyReader: () => Float32x4.xxwz),
      'xxxw': VmProxy(identifier: 'xxxw', externalStaticPropertyReader: () => Float32x4.xxxw),
      'xxxx': VmProxy(identifier: 'xxxx', externalStaticPropertyReader: () => Float32x4.xxxx),
      'xxxy': VmProxy(identifier: 'xxxy', externalStaticPropertyReader: () => Float32x4.xxxy),
      'xxxz': VmProxy(identifier: 'xxxz', externalStaticPropertyReader: () => Float32x4.xxxz),
      'xxyw': VmProxy(identifier: 'xxyw', externalStaticPropertyReader: () => Float32x4.xxyw),
      'xxyx': VmProxy(identifier: 'xxyx', externalStaticPropertyReader: () => Float32x4.xxyx),
      'xxyy': VmProxy(identifier: 'xxyy', externalStaticPropertyReader: () => Float32x4.xxyy),
      'xxyz': VmProxy(identifier: 'xxyz', externalStaticPropertyReader: () => Float32x4.xxyz),
      'xxzw': VmProxy(identifier: 'xxzw', externalStaticPropertyReader: () => Float32x4.xxzw),
      'xxzx': VmProxy(identifier: 'xxzx', externalStaticPropertyReader: () => Float32x4.xxzx),
      'xxzy': VmProxy(identifier: 'xxzy', externalStaticPropertyReader: () => Float32x4.xxzy),
      'xxzz': VmProxy(identifier: 'xxzz', externalStaticPropertyReader: () => Float32x4.xxzz),
      'xyww': VmProxy(identifier: 'xyww', externalStaticPropertyReader: () => Float32x4.xyww),
      'xywx': VmProxy(identifier: 'xywx', externalStaticPropertyReader: () => Float32x4.xywx),
      'xywy': VmProxy(identifier: 'xywy', externalStaticPropertyReader: () => Float32x4.xywy),
      'xywz': VmProxy(identifier: 'xywz', externalStaticPropertyReader: () => Float32x4.xywz),
      'xyxw': VmProxy(identifier: 'xyxw', externalStaticPropertyReader: () => Float32x4.xyxw),
      'xyxx': VmProxy(identifier: 'xyxx', externalStaticPropertyReader: () => Float32x4.xyxx),
      'xyxy': VmProxy(identifier: 'xyxy', externalStaticPropertyReader: () => Float32x4.xyxy),
      'xyxz': VmProxy(identifier: 'xyxz', externalStaticPropertyReader: () => Float32x4.xyxz),
      'xyyw': VmProxy(identifier: 'xyyw', externalStaticPropertyReader: () => Float32x4.xyyw),
      'xyyx': VmProxy(identifier: 'xyyx', externalStaticPropertyReader: () => Float32x4.xyyx),
      'xyyy': VmProxy(identifier: 'xyyy', externalStaticPropertyReader: () => Float32x4.xyyy),
      'xyyz': VmProxy(identifier: 'xyyz', externalStaticPropertyReader: () => Float32x4.xyyz),
      'xyzw': VmProxy(identifier: 'xyzw', externalStaticPropertyReader: () => Float32x4.xyzw),
      'xyzx': VmProxy(identifier: 'xyzx', externalStaticPropertyReader: () => Float32x4.xyzx),
      'xyzy': VmProxy(identifier: 'xyzy', externalStaticPropertyReader: () => Float32x4.xyzy),
      'xyzz': VmProxy(identifier: 'xyzz', externalStaticPropertyReader: () => Float32x4.xyzz),
      'xzww': VmProxy(identifier: 'xzww', externalStaticPropertyReader: () => Float32x4.xzww),
      'xzwx': VmProxy(identifier: 'xzwx', externalStaticPropertyReader: () => Float32x4.xzwx),
      'xzwy': VmProxy(identifier: 'xzwy', externalStaticPropertyReader: () => Float32x4.xzwy),
      'xzwz': VmProxy(identifier: 'xzwz', externalStaticPropertyReader: () => Float32x4.xzwz),
      'xzxw': VmProxy(identifier: 'xzxw', externalStaticPropertyReader: () => Float32x4.xzxw),
      'xzxx': VmProxy(identifier: 'xzxx', externalStaticPropertyReader: () => Float32x4.xzxx),
      'xzxy': VmProxy(identifier: 'xzxy', externalStaticPropertyReader: () => Float32x4.xzxy),
      'xzxz': VmProxy(identifier: 'xzxz', externalStaticPropertyReader: () => Float32x4.xzxz),
      'xzyw': VmProxy(identifier: 'xzyw', externalStaticPropertyReader: () => Float32x4.xzyw),
      'xzyx': VmProxy(identifier: 'xzyx', externalStaticPropertyReader: () => Float32x4.xzyx),
      'xzyy': VmProxy(identifier: 'xzyy', externalStaticPropertyReader: () => Float32x4.xzyy),
      'xzyz': VmProxy(identifier: 'xzyz', externalStaticPropertyReader: () => Float32x4.xzyz),
      'xzzw': VmProxy(identifier: 'xzzw', externalStaticPropertyReader: () => Float32x4.xzzw),
      'xzzx': VmProxy(identifier: 'xzzx', externalStaticPropertyReader: () => Float32x4.xzzx),
      'xzzy': VmProxy(identifier: 'xzzy', externalStaticPropertyReader: () => Float32x4.xzzy),
      'xzzz': VmProxy(identifier: 'xzzz', externalStaticPropertyReader: () => Float32x4.xzzz),
      'ywww': VmProxy(identifier: 'ywww', externalStaticPropertyReader: () => Float32x4.ywww),
      'ywwx': VmProxy(identifier: 'ywwx', externalStaticPropertyReader: () => Float32x4.ywwx),
      'ywwy': VmProxy(identifier: 'ywwy', externalStaticPropertyReader: () => Float32x4.ywwy),
      'ywwz': VmProxy(identifier: 'ywwz', externalStaticPropertyReader: () => Float32x4.ywwz),
      'ywxw': VmProxy(identifier: 'ywxw', externalStaticPropertyReader: () => Float32x4.ywxw),
      'ywxx': VmProxy(identifier: 'ywxx', externalStaticPropertyReader: () => Float32x4.ywxx),
      'ywxy': VmProxy(identifier: 'ywxy', externalStaticPropertyReader: () => Float32x4.ywxy),
      'ywxz': VmProxy(identifier: 'ywxz', externalStaticPropertyReader: () => Float32x4.ywxz),
      'ywyw': VmProxy(identifier: 'ywyw', externalStaticPropertyReader: () => Float32x4.ywyw),
      'ywyx': VmProxy(identifier: 'ywyx', externalStaticPropertyReader: () => Float32x4.ywyx),
      'ywyy': VmProxy(identifier: 'ywyy', externalStaticPropertyReader: () => Float32x4.ywyy),
      'ywyz': VmProxy(identifier: 'ywyz', externalStaticPropertyReader: () => Float32x4.ywyz),
      'ywzw': VmProxy(identifier: 'ywzw', externalStaticPropertyReader: () => Float32x4.ywzw),
      'ywzx': VmProxy(identifier: 'ywzx', externalStaticPropertyReader: () => Float32x4.ywzx),
      'ywzy': VmProxy(identifier: 'ywzy', externalStaticPropertyReader: () => Float32x4.ywzy),
      'ywzz': VmProxy(identifier: 'ywzz', externalStaticPropertyReader: () => Float32x4.ywzz),
      'yxww': VmProxy(identifier: 'yxww', externalStaticPropertyReader: () => Float32x4.yxww),
      'yxwx': VmProxy(identifier: 'yxwx', externalStaticPropertyReader: () => Float32x4.yxwx),
      'yxwy': VmProxy(identifier: 'yxwy', externalStaticPropertyReader: () => Float32x4.yxwy),
      'yxwz': VmProxy(identifier: 'yxwz', externalStaticPropertyReader: () => Float32x4.yxwz),
      'yxxw': VmProxy(identifier: 'yxxw', externalStaticPropertyReader: () => Float32x4.yxxw),
      'yxxx': VmProxy(identifier: 'yxxx', externalStaticPropertyReader: () => Float32x4.yxxx),
      'yxxy': VmProxy(identifier: 'yxxy', externalStaticPropertyReader: () => Float32x4.yxxy),
      'yxxz': VmProxy(identifier: 'yxxz', externalStaticPropertyReader: () => Float32x4.yxxz),
      'yxyw': VmProxy(identifier: 'yxyw', externalStaticPropertyReader: () => Float32x4.yxyw),
      'yxyx': VmProxy(identifier: 'yxyx', externalStaticPropertyReader: () => Float32x4.yxyx),
      'yxyy': VmProxy(identifier: 'yxyy', externalStaticPropertyReader: () => Float32x4.yxyy),
      'yxyz': VmProxy(identifier: 'yxyz', externalStaticPropertyReader: () => Float32x4.yxyz),
      'yxzw': VmProxy(identifier: 'yxzw', externalStaticPropertyReader: () => Float32x4.yxzw),
      'yxzx': VmProxy(identifier: 'yxzx', externalStaticPropertyReader: () => Float32x4.yxzx),
      'yxzy': VmProxy(identifier: 'yxzy', externalStaticPropertyReader: () => Float32x4.yxzy),
      'yxzz': VmProxy(identifier: 'yxzz', externalStaticPropertyReader: () => Float32x4.yxzz),
      'yyww': VmProxy(identifier: 'yyww', externalStaticPropertyReader: () => Float32x4.yyww),
      'yywx': VmProxy(identifier: 'yywx', externalStaticPropertyReader: () => Float32x4.yywx),
      'yywy': VmProxy(identifier: 'yywy', externalStaticPropertyReader: () => Float32x4.yywy),
      'yywz': VmProxy(identifier: 'yywz', externalStaticPropertyReader: () => Float32x4.yywz),
      'yyxw': VmProxy(identifier: 'yyxw', externalStaticPropertyReader: () => Float32x4.yyxw),
      'yyxx': VmProxy(identifier: 'yyxx', externalStaticPropertyReader: () => Float32x4.yyxx),
      'yyxy': VmProxy(identifier: 'yyxy', externalStaticPropertyReader: () => Float32x4.yyxy),
      'yyxz': VmProxy(identifier: 'yyxz', externalStaticPropertyReader: () => Float32x4.yyxz),
      'yyyw': VmProxy(identifier: 'yyyw', externalStaticPropertyReader: () => Float32x4.yyyw),
      'yyyx': VmProxy(identifier: 'yyyx', externalStaticPropertyReader: () => Float32x4.yyyx),
      'yyyy': VmProxy(identifier: 'yyyy', externalStaticPropertyReader: () => Float32x4.yyyy),
      'yyyz': VmProxy(identifier: 'yyyz', externalStaticPropertyReader: () => Float32x4.yyyz),
      'yyzw': VmProxy(identifier: 'yyzw', externalStaticPropertyReader: () => Float32x4.yyzw),
      'yyzx': VmProxy(identifier: 'yyzx', externalStaticPropertyReader: () => Float32x4.yyzx),
      'yyzy': VmProxy(identifier: 'yyzy', externalStaticPropertyReader: () => Float32x4.yyzy),
      'yyzz': VmProxy(identifier: 'yyzz', externalStaticPropertyReader: () => Float32x4.yyzz),
      'yzww': VmProxy(identifier: 'yzww', externalStaticPropertyReader: () => Float32x4.yzww),
      'yzwx': VmProxy(identifier: 'yzwx', externalStaticPropertyReader: () => Float32x4.yzwx),
      'yzwy': VmProxy(identifier: 'yzwy', externalStaticPropertyReader: () => Float32x4.yzwy),
      'yzwz': VmProxy(identifier: 'yzwz', externalStaticPropertyReader: () => Float32x4.yzwz),
      'yzxw': VmProxy(identifier: 'yzxw', externalStaticPropertyReader: () => Float32x4.yzxw),
      'yzxx': VmProxy(identifier: 'yzxx', externalStaticPropertyReader: () => Float32x4.yzxx),
      'yzxy': VmProxy(identifier: 'yzxy', externalStaticPropertyReader: () => Float32x4.yzxy),
      'yzxz': VmProxy(identifier: 'yzxz', externalStaticPropertyReader: () => Float32x4.yzxz),
      'yzyw': VmProxy(identifier: 'yzyw', externalStaticPropertyReader: () => Float32x4.yzyw),
      'yzyx': VmProxy(identifier: 'yzyx', externalStaticPropertyReader: () => Float32x4.yzyx),
      'yzyy': VmProxy(identifier: 'yzyy', externalStaticPropertyReader: () => Float32x4.yzyy),
      'yzyz': VmProxy(identifier: 'yzyz', externalStaticPropertyReader: () => Float32x4.yzyz),
      'yzzw': VmProxy(identifier: 'yzzw', externalStaticPropertyReader: () => Float32x4.yzzw),
      'yzzx': VmProxy(identifier: 'yzzx', externalStaticPropertyReader: () => Float32x4.yzzx),
      'yzzy': VmProxy(identifier: 'yzzy', externalStaticPropertyReader: () => Float32x4.yzzy),
      'yzzz': VmProxy(identifier: 'yzzz', externalStaticPropertyReader: () => Float32x4.yzzz),
      'zwww': VmProxy(identifier: 'zwww', externalStaticPropertyReader: () => Float32x4.zwww),
      'zwwx': VmProxy(identifier: 'zwwx', externalStaticPropertyReader: () => Float32x4.zwwx),
      'zwwy': VmProxy(identifier: 'zwwy', externalStaticPropertyReader: () => Float32x4.zwwy),
      'zwwz': VmProxy(identifier: 'zwwz', externalStaticPropertyReader: () => Float32x4.zwwz),
      'zwxw': VmProxy(identifier: 'zwxw', externalStaticPropertyReader: () => Float32x4.zwxw),
      'zwxx': VmProxy(identifier: 'zwxx', externalStaticPropertyReader: () => Float32x4.zwxx),
      'zwxy': VmProxy(identifier: 'zwxy', externalStaticPropertyReader: () => Float32x4.zwxy),
      'zwxz': VmProxy(identifier: 'zwxz', externalStaticPropertyReader: () => Float32x4.zwxz),
      'zwyw': VmProxy(identifier: 'zwyw', externalStaticPropertyReader: () => Float32x4.zwyw),
      'zwyx': VmProxy(identifier: 'zwyx', externalStaticPropertyReader: () => Float32x4.zwyx),
      'zwyy': VmProxy(identifier: 'zwyy', externalStaticPropertyReader: () => Float32x4.zwyy),
      'zwyz': VmProxy(identifier: 'zwyz', externalStaticPropertyReader: () => Float32x4.zwyz),
      'zwzw': VmProxy(identifier: 'zwzw', externalStaticPropertyReader: () => Float32x4.zwzw),
      'zwzx': VmProxy(identifier: 'zwzx', externalStaticPropertyReader: () => Float32x4.zwzx),
      'zwzy': VmProxy(identifier: 'zwzy', externalStaticPropertyReader: () => Float32x4.zwzy),
      'zwzz': VmProxy(identifier: 'zwzz', externalStaticPropertyReader: () => Float32x4.zwzz),
      'zxww': VmProxy(identifier: 'zxww', externalStaticPropertyReader: () => Float32x4.zxww),
      'zxwx': VmProxy(identifier: 'zxwx', externalStaticPropertyReader: () => Float32x4.zxwx),
      'zxwy': VmProxy(identifier: 'zxwy', externalStaticPropertyReader: () => Float32x4.zxwy),
      'zxwz': VmProxy(identifier: 'zxwz', externalStaticPropertyReader: () => Float32x4.zxwz),
      'zxxw': VmProxy(identifier: 'zxxw', externalStaticPropertyReader: () => Float32x4.zxxw),
      'zxxx': VmProxy(identifier: 'zxxx', externalStaticPropertyReader: () => Float32x4.zxxx),
      'zxxy': VmProxy(identifier: 'zxxy', externalStaticPropertyReader: () => Float32x4.zxxy),
      'zxxz': VmProxy(identifier: 'zxxz', externalStaticPropertyReader: () => Float32x4.zxxz),
      'zxyw': VmProxy(identifier: 'zxyw', externalStaticPropertyReader: () => Float32x4.zxyw),
      'zxyx': VmProxy(identifier: 'zxyx', externalStaticPropertyReader: () => Float32x4.zxyx),
      'zxyy': VmProxy(identifier: 'zxyy', externalStaticPropertyReader: () => Float32x4.zxyy),
      'zxyz': VmProxy(identifier: 'zxyz', externalStaticPropertyReader: () => Float32x4.zxyz),
      'zxzw': VmProxy(identifier: 'zxzw', externalStaticPropertyReader: () => Float32x4.zxzw),
      'zxzx': VmProxy(identifier: 'zxzx', externalStaticPropertyReader: () => Float32x4.zxzx),
      'zxzy': VmProxy(identifier: 'zxzy', externalStaticPropertyReader: () => Float32x4.zxzy),
      'zxzz': VmProxy(identifier: 'zxzz', externalStaticPropertyReader: () => Float32x4.zxzz),
      'zyww': VmProxy(identifier: 'zyww', externalStaticPropertyReader: () => Float32x4.zyww),
      'zywx': VmProxy(identifier: 'zywx', externalStaticPropertyReader: () => Float32x4.zywx),
      'zywy': VmProxy(identifier: 'zywy', externalStaticPropertyReader: () => Float32x4.zywy),
      'zywz': VmProxy(identifier: 'zywz', externalStaticPropertyReader: () => Float32x4.zywz),
      'zyxw': VmProxy(identifier: 'zyxw', externalStaticPropertyReader: () => Float32x4.zyxw),
      'zyxx': VmProxy(identifier: 'zyxx', externalStaticPropertyReader: () => Float32x4.zyxx),
      'zyxy': VmProxy(identifier: 'zyxy', externalStaticPropertyReader: () => Float32x4.zyxy),
      'zyxz': VmProxy(identifier: 'zyxz', externalStaticPropertyReader: () => Float32x4.zyxz),
      'zyyw': VmProxy(identifier: 'zyyw', externalStaticPropertyReader: () => Float32x4.zyyw),
      'zyyx': VmProxy(identifier: 'zyyx', externalStaticPropertyReader: () => Float32x4.zyyx),
      'zyyy': VmProxy(identifier: 'zyyy', externalStaticPropertyReader: () => Float32x4.zyyy),
      'zyyz': VmProxy(identifier: 'zyyz', externalStaticPropertyReader: () => Float32x4.zyyz),
      'zyzw': VmProxy(identifier: 'zyzw', externalStaticPropertyReader: () => Float32x4.zyzw),
      'zyzx': VmProxy(identifier: 'zyzx', externalStaticPropertyReader: () => Float32x4.zyzx),
      'zyzy': VmProxy(identifier: 'zyzy', externalStaticPropertyReader: () => Float32x4.zyzy),
      'zyzz': VmProxy(identifier: 'zyzz', externalStaticPropertyReader: () => Float32x4.zyzz),
      'zzww': VmProxy(identifier: 'zzww', externalStaticPropertyReader: () => Float32x4.zzww),
      'zzwx': VmProxy(identifier: 'zzwx', externalStaticPropertyReader: () => Float32x4.zzwx),
      'zzwy': VmProxy(identifier: 'zzwy', externalStaticPropertyReader: () => Float32x4.zzwy),
      'zzwz': VmProxy(identifier: 'zzwz', externalStaticPropertyReader: () => Float32x4.zzwz),
      'zzxw': VmProxy(identifier: 'zzxw', externalStaticPropertyReader: () => Float32x4.zzxw),
      'zzxx': VmProxy(identifier: 'zzxx', externalStaticPropertyReader: () => Float32x4.zzxx),
      'zzxy': VmProxy(identifier: 'zzxy', externalStaticPropertyReader: () => Float32x4.zzxy),
      'zzxz': VmProxy(identifier: 'zzxz', externalStaticPropertyReader: () => Float32x4.zzxz),
      'zzyw': VmProxy(identifier: 'zzyw', externalStaticPropertyReader: () => Float32x4.zzyw),
      'zzyx': VmProxy(identifier: 'zzyx', externalStaticPropertyReader: () => Float32x4.zzyx),
      'zzyy': VmProxy(identifier: 'zzyy', externalStaticPropertyReader: () => Float32x4.zzyy),
      'zzyz': VmProxy(identifier: 'zzyz', externalStaticPropertyReader: () => Float32x4.zzyz),
      'zzzw': VmProxy(identifier: 'zzzw', externalStaticPropertyReader: () => Float32x4.zzzw),
      'zzzx': VmProxy(identifier: 'zzzx', externalStaticPropertyReader: () => Float32x4.zzzx),
      'zzzy': VmProxy(identifier: 'zzzy', externalStaticPropertyReader: () => Float32x4.zzzy),
      'zzzz': VmProxy(identifier: 'zzzz', externalStaticPropertyReader: () => Float32x4.zzzz),
      'abs': VmProxy(identifier: 'abs', externalInstancePropertyReader: (Float32x4 instance) => instance.abs),
      'clamp': VmProxy(identifier: 'clamp', externalInstancePropertyReader: (Float32x4 instance) => instance.clamp),
      'equal': VmProxy(identifier: 'equal', externalInstancePropertyReader: (Float32x4 instance) => instance.equal),
      'greaterThan': VmProxy(identifier: 'greaterThan', externalInstancePropertyReader: (Float32x4 instance) => instance.greaterThan),
      'greaterThanOrEqual': VmProxy(identifier: 'greaterThanOrEqual', externalInstancePropertyReader: (Float32x4 instance) => instance.greaterThanOrEqual),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Float32x4 instance) => instance.hashCode),
      'lessThan': VmProxy(identifier: 'lessThan', externalInstancePropertyReader: (Float32x4 instance) => instance.lessThan),
      'lessThanOrEqual': VmProxy(identifier: 'lessThanOrEqual', externalInstancePropertyReader: (Float32x4 instance) => instance.lessThanOrEqual),
      'max': VmProxy(identifier: 'max', externalInstancePropertyReader: (Float32x4 instance) => instance.max),
      'min': VmProxy(identifier: 'min', externalInstancePropertyReader: (Float32x4 instance) => instance.min),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Float32x4 instance) => instance.noSuchMethod),
      'notEqual': VmProxy(identifier: 'notEqual', externalInstancePropertyReader: (Float32x4 instance) => instance.notEqual),
      'reciprocal': VmProxy(identifier: 'reciprocal', externalInstancePropertyReader: (Float32x4 instance) => instance.reciprocal),
      'reciprocalSqrt': VmProxy(identifier: 'reciprocalSqrt', externalInstancePropertyReader: (Float32x4 instance) => instance.reciprocalSqrt),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Float32x4 instance) => instance.runtimeType),
      'scale': VmProxy(identifier: 'scale', externalInstancePropertyReader: (Float32x4 instance) => instance.scale),
      'shuffle': VmProxy(identifier: 'shuffle', externalInstancePropertyReader: (Float32x4 instance) => instance.shuffle),
      'shuffleMix': VmProxy(identifier: 'shuffleMix', externalInstancePropertyReader: (Float32x4 instance) => instance.shuffleMix),
      'signMask': VmProxy(identifier: 'signMask', externalInstancePropertyReader: (Float32x4 instance) => instance.signMask),
      'sqrt': VmProxy(identifier: 'sqrt', externalInstancePropertyReader: (Float32x4 instance) => instance.sqrt),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Float32x4 instance) => instance.toString),
      'w': VmProxy(identifier: 'w', externalInstancePropertyReader: (Float32x4 instance) => instance.w),
      'withW': VmProxy(identifier: 'withW', externalInstancePropertyReader: (Float32x4 instance) => instance.withW),
      'withX': VmProxy(identifier: 'withX', externalInstancePropertyReader: (Float32x4 instance) => instance.withX),
      'withY': VmProxy(identifier: 'withY', externalInstancePropertyReader: (Float32x4 instance) => instance.withY),
      'withZ': VmProxy(identifier: 'withZ', externalInstancePropertyReader: (Float32x4 instance) => instance.withZ),
      'x': VmProxy(identifier: 'x', externalInstancePropertyReader: (Float32x4 instance) => instance.x),
      'y': VmProxy(identifier: 'y', externalInstancePropertyReader: (Float32x4 instance) => instance.y),
      'z': VmProxy(identifier: 'z', externalInstancePropertyReader: (Float32x4 instance) => instance.z),
    },
  );

  ///class Float32x4List
  static final classFloat32x4List = VmClass<Float32x4List>(
    identifier: 'Float32x4List',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable', 'List', 'TypedData'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Float32x4List.new),
      'fromList': VmProxy(identifier: 'fromList', externalStaticPropertyReader: () => Float32x4List.fromList),
      'sublistView': VmProxy(identifier: 'sublistView', externalStaticPropertyReader: () => Float32x4List.sublistView),
      'view': VmProxy(identifier: 'view', externalStaticPropertyReader: () => Float32x4List.view),
      'bytesPerElement': VmProxy(identifier: 'bytesPerElement', externalStaticPropertyReader: () => Float32x4List.bytesPerElement),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (Float32x4List instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (Float32x4List instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (Float32x4List instance) => instance.any, externalInstanceFunctionCaller: (Float32x4List instance, a0) => instance.any((b0) => a0(b0))),
      'asMap': VmProxy(identifier: 'asMap', externalInstancePropertyReader: (Float32x4List instance) => instance.asMap),
      'buffer': VmProxy(identifier: 'buffer', externalInstancePropertyReader: (Float32x4List instance) => instance.buffer),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (Float32x4List instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (Float32x4List instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (Float32x4List instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (Float32x4List instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (Float32x4List instance) => instance.elementAtOrNull),
      'elementSizeInBytes': VmProxy(identifier: 'elementSizeInBytes', externalInstancePropertyReader: (Float32x4List instance) => instance.elementSizeInBytes),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (Float32x4List instance) => instance.every, externalInstanceFunctionCaller: (Float32x4List instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (Float32x4List instance) => instance.expand, externalInstanceFunctionCaller: (Float32x4List instance, a0) => instance.expand((b0) => a0(b0))),
      'fillRange': VmProxy(identifier: 'fillRange', externalInstancePropertyReader: (Float32x4List instance) => instance.fillRange),
      'first': VmProxy(identifier: 'first', externalInstancePropertyWriter: (Float32x4List instance, value) => instance.first = value, externalInstancePropertyReader: (Float32x4List instance) => instance.first),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (Float32x4List instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (Float32x4List instance) => instance.firstWhere, externalInstanceFunctionCaller: (Float32x4List instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (Float32x4List instance) => instance.fold, externalInstanceFunctionCaller: (Float32x4List instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (Float32x4List instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (Float32x4List instance) => instance.forEach, externalInstanceFunctionCaller: (Float32x4List instance, a0) => instance.forEach((b0) => a0(b0))),
      'getRange': VmProxy(identifier: 'getRange', externalInstancePropertyReader: (Float32x4List instance) => instance.getRange),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Float32x4List instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (Float32x4List instance) => instance.indexed),
      'indexOf': VmProxy(identifier: 'indexOf', externalInstancePropertyReader: (Float32x4List instance) => instance.indexOf),
      'indexWhere': VmProxy(identifier: 'indexWhere', externalInstancePropertyReader: (Float32x4List instance) => instance.indexWhere, externalInstanceFunctionCaller: (Float32x4List instance, a0, [a1 = 0]) => instance.indexWhere((b0) => a0(b0), a1)),
      'insert': VmProxy(identifier: 'insert', externalInstancePropertyReader: (Float32x4List instance) => instance.insert),
      'insertAll': VmProxy(identifier: 'insertAll', externalInstancePropertyReader: (Float32x4List instance) => instance.insertAll),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (Float32x4List instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (Float32x4List instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (Float32x4List instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (Float32x4List instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (Float32x4List instance) => instance.last, externalInstancePropertyWriter: (Float32x4List instance, value) => instance.last = value),
      'lastIndexOf': VmProxy(identifier: 'lastIndexOf', externalInstancePropertyReader: (Float32x4List instance) => instance.lastIndexOf),
      'lastIndexWhere': VmProxy(identifier: 'lastIndexWhere', externalInstancePropertyReader: (Float32x4List instance) => instance.lastIndexWhere, externalInstanceFunctionCaller: (Float32x4List instance, a0, [a1]) => instance.lastIndexWhere((b0) => a0(b0), a1)),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (Float32x4List instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (Float32x4List instance) => instance.lastWhere, externalInstanceFunctionCaller: (Float32x4List instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (Float32x4List instance) => instance.length, externalInstancePropertyWriter: (Float32x4List instance, value) => instance.length = value),
      'lengthInBytes': VmProxy(identifier: 'lengthInBytes', externalInstancePropertyReader: (Float32x4List instance) => instance.lengthInBytes),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (Float32x4List instance) => instance.map, externalInstanceFunctionCaller: (Float32x4List instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (Float32x4List instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Float32x4List instance) => instance.noSuchMethod),
      'offsetInBytes': VmProxy(identifier: 'offsetInBytes', externalInstancePropertyReader: (Float32x4List instance) => instance.offsetInBytes),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (Float32x4List instance) => instance.reduce, externalInstanceFunctionCaller: (Float32x4List instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (Float32x4List instance) => instance.remove),
      'removeAt': VmProxy(identifier: 'removeAt', externalInstancePropertyReader: (Float32x4List instance) => instance.removeAt),
      'removeLast': VmProxy(identifier: 'removeLast', externalInstancePropertyReader: (Float32x4List instance) => instance.removeLast),
      'removeRange': VmProxy(identifier: 'removeRange', externalInstancePropertyReader: (Float32x4List instance) => instance.removeRange),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (Float32x4List instance) => instance.removeWhere, externalInstanceFunctionCaller: (Float32x4List instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'replaceRange': VmProxy(identifier: 'replaceRange', externalInstancePropertyReader: (Float32x4List instance) => instance.replaceRange),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (Float32x4List instance) => instance.retainWhere, externalInstanceFunctionCaller: (Float32x4List instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'reversed': VmProxy(identifier: 'reversed', externalInstancePropertyReader: (Float32x4List instance) => instance.reversed),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Float32x4List instance) => instance.runtimeType),
      'setAll': VmProxy(identifier: 'setAll', externalInstancePropertyReader: (Float32x4List instance) => instance.setAll),
      'setRange': VmProxy(identifier: 'setRange', externalInstancePropertyReader: (Float32x4List instance) => instance.setRange),
      'shuffle': VmProxy(identifier: 'shuffle', externalInstancePropertyReader: (Float32x4List instance) => instance.shuffle),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (Float32x4List instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (Float32x4List instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (Float32x4List instance) => instance.singleWhere, externalInstanceFunctionCaller: (Float32x4List instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (Float32x4List instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (Float32x4List instance) => instance.skipWhile, externalInstanceFunctionCaller: (Float32x4List instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'sort': VmProxy(identifier: 'sort', externalInstancePropertyReader: (Float32x4List instance) => instance.sort, externalInstanceFunctionCaller: (Float32x4List instance, [a0]) => instance.sort(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'sublist': VmProxy(identifier: 'sublist', externalInstancePropertyReader: (Float32x4List instance) => instance.sublist),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (Float32x4List instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (Float32x4List instance) => instance.takeWhile, externalInstanceFunctionCaller: (Float32x4List instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (Float32x4List instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (Float32x4List instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Float32x4List instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (Float32x4List instance) => instance.where, externalInstanceFunctionCaller: (Float32x4List instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (Float32x4List instance) => instance.whereType),
    },
  );

  ///class Float64List
  static final classFloat64List = VmClass<Float64List>(
    identifier: 'Float64List',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable', 'List', 'TypedData', '_TypedFloatList'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Float64List.new),
      'fromList': VmProxy(identifier: 'fromList', externalStaticPropertyReader: () => Float64List.fromList),
      'sublistView': VmProxy(identifier: 'sublistView', externalStaticPropertyReader: () => Float64List.sublistView),
      'view': VmProxy(identifier: 'view', externalStaticPropertyReader: () => Float64List.view),
      'bytesPerElement': VmProxy(identifier: 'bytesPerElement', externalStaticPropertyReader: () => Float64List.bytesPerElement),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (Float64List instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (Float64List instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (Float64List instance) => instance.any, externalInstanceFunctionCaller: (Float64List instance, a0) => instance.any((b0) => a0(b0))),
      'asMap': VmProxy(identifier: 'asMap', externalInstancePropertyReader: (Float64List instance) => instance.asMap),
      'buffer': VmProxy(identifier: 'buffer', externalInstancePropertyReader: (Float64List instance) => instance.buffer),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (Float64List instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (Float64List instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (Float64List instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (Float64List instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (Float64List instance) => instance.elementAtOrNull),
      'elementSizeInBytes': VmProxy(identifier: 'elementSizeInBytes', externalInstancePropertyReader: (Float64List instance) => instance.elementSizeInBytes),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (Float64List instance) => instance.every, externalInstanceFunctionCaller: (Float64List instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (Float64List instance) => instance.expand, externalInstanceFunctionCaller: (Float64List instance, a0) => instance.expand((b0) => a0(b0))),
      'fillRange': VmProxy(identifier: 'fillRange', externalInstancePropertyReader: (Float64List instance) => instance.fillRange),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (Float64List instance) => instance.first, externalInstancePropertyWriter: (Float64List instance, value) => instance.first = value),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (Float64List instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (Float64List instance) => instance.firstWhere, externalInstanceFunctionCaller: (Float64List instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (Float64List instance) => instance.fold, externalInstanceFunctionCaller: (Float64List instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (Float64List instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (Float64List instance) => instance.forEach, externalInstanceFunctionCaller: (Float64List instance, a0) => instance.forEach((b0) => a0(b0))),
      'getRange': VmProxy(identifier: 'getRange', externalInstancePropertyReader: (Float64List instance) => instance.getRange),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Float64List instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (Float64List instance) => instance.indexed),
      'indexOf': VmProxy(identifier: 'indexOf', externalInstancePropertyReader: (Float64List instance) => instance.indexOf),
      'indexWhere': VmProxy(identifier: 'indexWhere', externalInstancePropertyReader: (Float64List instance) => instance.indexWhere, externalInstanceFunctionCaller: (Float64List instance, a0, [a1 = 0]) => instance.indexWhere((b0) => a0(b0), a1)),
      'insert': VmProxy(identifier: 'insert', externalInstancePropertyReader: (Float64List instance) => instance.insert),
      'insertAll': VmProxy(identifier: 'insertAll', externalInstancePropertyReader: (Float64List instance) => instance.insertAll),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (Float64List instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (Float64List instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (Float64List instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (Float64List instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyWriter: (Float64List instance, value) => instance.last = value, externalInstancePropertyReader: (Float64List instance) => instance.last),
      'lastIndexOf': VmProxy(identifier: 'lastIndexOf', externalInstancePropertyReader: (Float64List instance) => instance.lastIndexOf),
      'lastIndexWhere': VmProxy(identifier: 'lastIndexWhere', externalInstancePropertyReader: (Float64List instance) => instance.lastIndexWhere, externalInstanceFunctionCaller: (Float64List instance, a0, [a1]) => instance.lastIndexWhere((b0) => a0(b0), a1)),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (Float64List instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (Float64List instance) => instance.lastWhere, externalInstanceFunctionCaller: (Float64List instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (Float64List instance) => instance.length, externalInstancePropertyWriter: (Float64List instance, value) => instance.length = value),
      'lengthInBytes': VmProxy(identifier: 'lengthInBytes', externalInstancePropertyReader: (Float64List instance) => instance.lengthInBytes),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (Float64List instance) => instance.map, externalInstanceFunctionCaller: (Float64List instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (Float64List instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Float64List instance) => instance.noSuchMethod),
      'offsetInBytes': VmProxy(identifier: 'offsetInBytes', externalInstancePropertyReader: (Float64List instance) => instance.offsetInBytes),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (Float64List instance) => instance.reduce, externalInstanceFunctionCaller: (Float64List instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (Float64List instance) => instance.remove),
      'removeAt': VmProxy(identifier: 'removeAt', externalInstancePropertyReader: (Float64List instance) => instance.removeAt),
      'removeLast': VmProxy(identifier: 'removeLast', externalInstancePropertyReader: (Float64List instance) => instance.removeLast),
      'removeRange': VmProxy(identifier: 'removeRange', externalInstancePropertyReader: (Float64List instance) => instance.removeRange),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (Float64List instance) => instance.removeWhere, externalInstanceFunctionCaller: (Float64List instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'replaceRange': VmProxy(identifier: 'replaceRange', externalInstancePropertyReader: (Float64List instance) => instance.replaceRange),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (Float64List instance) => instance.retainWhere, externalInstanceFunctionCaller: (Float64List instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'reversed': VmProxy(identifier: 'reversed', externalInstancePropertyReader: (Float64List instance) => instance.reversed),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Float64List instance) => instance.runtimeType),
      'setAll': VmProxy(identifier: 'setAll', externalInstancePropertyReader: (Float64List instance) => instance.setAll),
      'setRange': VmProxy(identifier: 'setRange', externalInstancePropertyReader: (Float64List instance) => instance.setRange),
      'shuffle': VmProxy(identifier: 'shuffle', externalInstancePropertyReader: (Float64List instance) => instance.shuffle),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (Float64List instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (Float64List instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (Float64List instance) => instance.singleWhere, externalInstanceFunctionCaller: (Float64List instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (Float64List instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (Float64List instance) => instance.skipWhile, externalInstanceFunctionCaller: (Float64List instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'sort': VmProxy(identifier: 'sort', externalInstancePropertyReader: (Float64List instance) => instance.sort, externalInstanceFunctionCaller: (Float64List instance, [a0]) => instance.sort(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'sublist': VmProxy(identifier: 'sublist', externalInstancePropertyReader: (Float64List instance) => instance.sublist),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (Float64List instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (Float64List instance) => instance.takeWhile, externalInstanceFunctionCaller: (Float64List instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (Float64List instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (Float64List instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Float64List instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (Float64List instance) => instance.where, externalInstanceFunctionCaller: (Float64List instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (Float64List instance) => instance.whereType),
    },
  );

  ///class Float64x2
  static final classFloat64x2 = VmClass<Float64x2>(
    identifier: 'Float64x2',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Float64x2.new),
      'fromFloat32x4': VmProxy(identifier: 'fromFloat32x4', externalStaticPropertyReader: () => Float64x2.fromFloat32x4),
      'splat': VmProxy(identifier: 'splat', externalStaticPropertyReader: () => Float64x2.splat),
      'zero': VmProxy(identifier: 'zero', externalStaticPropertyReader: () => Float64x2.zero),
      'abs': VmProxy(identifier: 'abs', externalInstancePropertyReader: (Float64x2 instance) => instance.abs),
      'clamp': VmProxy(identifier: 'clamp', externalInstancePropertyReader: (Float64x2 instance) => instance.clamp),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Float64x2 instance) => instance.hashCode),
      'max': VmProxy(identifier: 'max', externalInstancePropertyReader: (Float64x2 instance) => instance.max),
      'min': VmProxy(identifier: 'min', externalInstancePropertyReader: (Float64x2 instance) => instance.min),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Float64x2 instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Float64x2 instance) => instance.runtimeType),
      'scale': VmProxy(identifier: 'scale', externalInstancePropertyReader: (Float64x2 instance) => instance.scale),
      'signMask': VmProxy(identifier: 'signMask', externalInstancePropertyReader: (Float64x2 instance) => instance.signMask),
      'sqrt': VmProxy(identifier: 'sqrt', externalInstancePropertyReader: (Float64x2 instance) => instance.sqrt),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Float64x2 instance) => instance.toString),
      'withX': VmProxy(identifier: 'withX', externalInstancePropertyReader: (Float64x2 instance) => instance.withX),
      'withY': VmProxy(identifier: 'withY', externalInstancePropertyReader: (Float64x2 instance) => instance.withY),
      'x': VmProxy(identifier: 'x', externalInstancePropertyReader: (Float64x2 instance) => instance.x),
      'y': VmProxy(identifier: 'y', externalInstancePropertyReader: (Float64x2 instance) => instance.y),
    },
  );

  ///class Float64x2List
  static final classFloat64x2List = VmClass<Float64x2List>(
    identifier: 'Float64x2List',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable', 'List', 'TypedData'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Float64x2List.new),
      'fromList': VmProxy(identifier: 'fromList', externalStaticPropertyReader: () => Float64x2List.fromList),
      'sublistView': VmProxy(identifier: 'sublistView', externalStaticPropertyReader: () => Float64x2List.sublistView),
      'view': VmProxy(identifier: 'view', externalStaticPropertyReader: () => Float64x2List.view),
      'bytesPerElement': VmProxy(identifier: 'bytesPerElement', externalStaticPropertyReader: () => Float64x2List.bytesPerElement),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (Float64x2List instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (Float64x2List instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (Float64x2List instance) => instance.any, externalInstanceFunctionCaller: (Float64x2List instance, a0) => instance.any((b0) => a0(b0))),
      'asMap': VmProxy(identifier: 'asMap', externalInstancePropertyReader: (Float64x2List instance) => instance.asMap),
      'buffer': VmProxy(identifier: 'buffer', externalInstancePropertyReader: (Float64x2List instance) => instance.buffer),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (Float64x2List instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (Float64x2List instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (Float64x2List instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (Float64x2List instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (Float64x2List instance) => instance.elementAtOrNull),
      'elementSizeInBytes': VmProxy(identifier: 'elementSizeInBytes', externalInstancePropertyReader: (Float64x2List instance) => instance.elementSizeInBytes),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (Float64x2List instance) => instance.every, externalInstanceFunctionCaller: (Float64x2List instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (Float64x2List instance) => instance.expand, externalInstanceFunctionCaller: (Float64x2List instance, a0) => instance.expand((b0) => a0(b0))),
      'fillRange': VmProxy(identifier: 'fillRange', externalInstancePropertyReader: (Float64x2List instance) => instance.fillRange),
      'first': VmProxy(identifier: 'first', externalInstancePropertyWriter: (Float64x2List instance, value) => instance.first = value, externalInstancePropertyReader: (Float64x2List instance) => instance.first),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (Float64x2List instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (Float64x2List instance) => instance.firstWhere, externalInstanceFunctionCaller: (Float64x2List instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (Float64x2List instance) => instance.fold, externalInstanceFunctionCaller: (Float64x2List instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (Float64x2List instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (Float64x2List instance) => instance.forEach, externalInstanceFunctionCaller: (Float64x2List instance, a0) => instance.forEach((b0) => a0(b0))),
      'getRange': VmProxy(identifier: 'getRange', externalInstancePropertyReader: (Float64x2List instance) => instance.getRange),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Float64x2List instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (Float64x2List instance) => instance.indexed),
      'indexOf': VmProxy(identifier: 'indexOf', externalInstancePropertyReader: (Float64x2List instance) => instance.indexOf),
      'indexWhere': VmProxy(identifier: 'indexWhere', externalInstancePropertyReader: (Float64x2List instance) => instance.indexWhere, externalInstanceFunctionCaller: (Float64x2List instance, a0, [a1 = 0]) => instance.indexWhere((b0) => a0(b0), a1)),
      'insert': VmProxy(identifier: 'insert', externalInstancePropertyReader: (Float64x2List instance) => instance.insert),
      'insertAll': VmProxy(identifier: 'insertAll', externalInstancePropertyReader: (Float64x2List instance) => instance.insertAll),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (Float64x2List instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (Float64x2List instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (Float64x2List instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (Float64x2List instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (Float64x2List instance) => instance.last, externalInstancePropertyWriter: (Float64x2List instance, value) => instance.last = value),
      'lastIndexOf': VmProxy(identifier: 'lastIndexOf', externalInstancePropertyReader: (Float64x2List instance) => instance.lastIndexOf),
      'lastIndexWhere': VmProxy(identifier: 'lastIndexWhere', externalInstancePropertyReader: (Float64x2List instance) => instance.lastIndexWhere, externalInstanceFunctionCaller: (Float64x2List instance, a0, [a1]) => instance.lastIndexWhere((b0) => a0(b0), a1)),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (Float64x2List instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (Float64x2List instance) => instance.lastWhere, externalInstanceFunctionCaller: (Float64x2List instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (Float64x2List instance) => instance.length, externalInstancePropertyWriter: (Float64x2List instance, value) => instance.length = value),
      'lengthInBytes': VmProxy(identifier: 'lengthInBytes', externalInstancePropertyReader: (Float64x2List instance) => instance.lengthInBytes),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (Float64x2List instance) => instance.map, externalInstanceFunctionCaller: (Float64x2List instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (Float64x2List instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Float64x2List instance) => instance.noSuchMethod),
      'offsetInBytes': VmProxy(identifier: 'offsetInBytes', externalInstancePropertyReader: (Float64x2List instance) => instance.offsetInBytes),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (Float64x2List instance) => instance.reduce, externalInstanceFunctionCaller: (Float64x2List instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (Float64x2List instance) => instance.remove),
      'removeAt': VmProxy(identifier: 'removeAt', externalInstancePropertyReader: (Float64x2List instance) => instance.removeAt),
      'removeLast': VmProxy(identifier: 'removeLast', externalInstancePropertyReader: (Float64x2List instance) => instance.removeLast),
      'removeRange': VmProxy(identifier: 'removeRange', externalInstancePropertyReader: (Float64x2List instance) => instance.removeRange),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (Float64x2List instance) => instance.removeWhere, externalInstanceFunctionCaller: (Float64x2List instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'replaceRange': VmProxy(identifier: 'replaceRange', externalInstancePropertyReader: (Float64x2List instance) => instance.replaceRange),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (Float64x2List instance) => instance.retainWhere, externalInstanceFunctionCaller: (Float64x2List instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'reversed': VmProxy(identifier: 'reversed', externalInstancePropertyReader: (Float64x2List instance) => instance.reversed),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Float64x2List instance) => instance.runtimeType),
      'setAll': VmProxy(identifier: 'setAll', externalInstancePropertyReader: (Float64x2List instance) => instance.setAll),
      'setRange': VmProxy(identifier: 'setRange', externalInstancePropertyReader: (Float64x2List instance) => instance.setRange),
      'shuffle': VmProxy(identifier: 'shuffle', externalInstancePropertyReader: (Float64x2List instance) => instance.shuffle),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (Float64x2List instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (Float64x2List instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (Float64x2List instance) => instance.singleWhere, externalInstanceFunctionCaller: (Float64x2List instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (Float64x2List instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (Float64x2List instance) => instance.skipWhile, externalInstanceFunctionCaller: (Float64x2List instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'sort': VmProxy(identifier: 'sort', externalInstancePropertyReader: (Float64x2List instance) => instance.sort, externalInstanceFunctionCaller: (Float64x2List instance, [a0]) => instance.sort(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'sublist': VmProxy(identifier: 'sublist', externalInstancePropertyReader: (Float64x2List instance) => instance.sublist),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (Float64x2List instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (Float64x2List instance) => instance.takeWhile, externalInstanceFunctionCaller: (Float64x2List instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (Float64x2List instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (Float64x2List instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Float64x2List instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (Float64x2List instance) => instance.where, externalInstanceFunctionCaller: (Float64x2List instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (Float64x2List instance) => instance.whereType),
    },
  );

  ///class FormatException
  static final classFormatException = VmClass<FormatException>(
    identifier: 'FormatException',
    superclassNames: ['Object', 'Exception'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => FormatException.new),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (FormatException instance) => instance.hashCode),
      'message': VmProxy(identifier: 'message', externalInstancePropertyReader: (FormatException instance) => instance.message),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (FormatException instance) => instance.noSuchMethod),
      'offset': VmProxy(identifier: 'offset', externalInstancePropertyReader: (FormatException instance) => instance.offset),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (FormatException instance) => instance.runtimeType),
      'source': VmProxy(identifier: 'source', externalInstancePropertyReader: (FormatException instance) => instance.source),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (FormatException instance) => instance.toString),
    },
  );

  ///class Function
  static final classFunction = VmClass<Function>(
    identifier: 'Function',
    superclassNames: ['Object'],
    externalProxyMap: {
      'apply': VmProxy(identifier: 'apply', externalStaticPropertyReader: () => Function.apply),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Function instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Function instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Function instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Function instance) => instance.toString),
    },
  );

  ///class Future
  static final classFuture = VmClass<Future>(
    identifier: 'Future',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Future.new, externalStaticFunctionCaller: (a0) => Future.new(() => a0())),
      'delayed': VmProxy(identifier: 'delayed', externalStaticPropertyReader: () => Future.delayed, externalStaticFunctionCaller: (a0, [a1]) => Future.delayed(a0, a1 == null ? null : () => a1())),
      'error': VmProxy(identifier: 'error', externalStaticPropertyReader: () => Future.error),
      'microtask': VmProxy(identifier: 'microtask', externalStaticPropertyReader: () => Future.microtask, externalStaticFunctionCaller: (a0) => Future.microtask(() => a0())),
      'sync': VmProxy(identifier: 'sync', externalStaticPropertyReader: () => Future.sync, externalStaticFunctionCaller: (a0) => Future.sync(() => a0())),
      'value': VmProxy(identifier: 'value', externalStaticPropertyReader: () => Future.value),
      'any': VmProxy(identifier: 'any', externalStaticPropertyReader: () => Future.any),
      'doWhile': VmProxy(identifier: 'doWhile', externalStaticPropertyReader: () => Future.doWhile, externalStaticFunctionCaller: (a0) => Future.doWhile(() => a0())),
      'forEach': VmProxy(identifier: 'forEach', externalStaticPropertyReader: () => Future.forEach, externalStaticFunctionCaller: (a0, a1) => Future.forEach(a0, (b0) => a1(b0))),
      'wait': VmProxy(identifier: 'wait', externalStaticPropertyReader: () => Future.wait, externalStaticFunctionCaller: (a0, {eagerError = false, cleanUp}) => Future.wait(a0, eagerError: eagerError, cleanUp: cleanUp == null ? null : (b0) => cleanUp(b0))),
      'asStream': VmProxy(identifier: 'asStream', externalInstancePropertyReader: (Future instance) => instance.asStream),
      'catchError': VmProxy(identifier: 'catchError', externalInstancePropertyReader: (Future instance) => instance.catchError, externalInstanceFunctionCaller: (Future instance, a0, {test}) => instance.catchError(a0, test: test == null ? null : (b0) => test(b0))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Future instance) => instance.hashCode),
      'ignore': VmProxy(identifier: 'ignore', externalInstancePropertyReader: (Future instance) => instance.ignore),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Future instance) => instance.noSuchMethod),
      'onError': VmProxy(identifier: 'onError', externalInstancePropertyReader: (Future instance) => instance.onError, externalInstanceFunctionCaller: (Future instance, a0, {test}) => instance.onError((b0, b1) => a0(b0, b1), test: test == null ? null : (b0) => test(b0))),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Future instance) => instance.runtimeType),
      'then': VmProxy(identifier: 'then', externalInstancePropertyReader: (Future instance) => instance.then, externalInstanceFunctionCaller: (Future instance, a0, {onError}) => instance.then((b0) => a0(b0), onError: onError)),
      'timeout': VmProxy(identifier: 'timeout', externalInstancePropertyReader: (Future instance) => instance.timeout, externalInstanceFunctionCaller: (Future instance, a0, {onTimeout}) => instance.timeout(a0, onTimeout: onTimeout == null ? null : () => onTimeout())),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Future instance) => instance.toString),
      'whenComplete': VmProxy(identifier: 'whenComplete', externalInstancePropertyReader: (Future instance) => instance.whenComplete, externalInstanceFunctionCaller: (Future instance, a0) => instance.whenComplete(() => a0())),
    },
  );

  ///class FutureOr
  static final classFutureOr = VmClass<FutureOr>(
    identifier: 'FutureOr',
    superclassNames: ['Object'],
    externalProxyMap: {
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (FutureOr instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (FutureOr instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (FutureOr instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (FutureOr instance) => instance.toString),
    },
  );

  ///class GZipCodec
  static final classGZipCodec = VmClass<GZipCodec>(
    identifier: 'GZipCodec',
    superclassNames: ['Object', 'Codec'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => GZipCodec.new),
      'decode': VmProxy(identifier: 'decode', externalInstancePropertyReader: (GZipCodec instance) => instance.decode),
      'decoder': VmProxy(identifier: 'decoder', externalInstancePropertyReader: (GZipCodec instance) => instance.decoder),
      'dictionary': VmProxy(identifier: 'dictionary', externalInstancePropertyReader: (GZipCodec instance) => instance.dictionary),
      'encode': VmProxy(identifier: 'encode', externalInstancePropertyReader: (GZipCodec instance) => instance.encode),
      'encoder': VmProxy(identifier: 'encoder', externalInstancePropertyReader: (GZipCodec instance) => instance.encoder),
      'fuse': VmProxy(identifier: 'fuse', externalInstancePropertyReader: (GZipCodec instance) => instance.fuse),
      'gzip': VmProxy(identifier: 'gzip', externalInstancePropertyReader: (GZipCodec instance) => instance.gzip),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (GZipCodec instance) => instance.hashCode),
      'inverted': VmProxy(identifier: 'inverted', externalInstancePropertyReader: (GZipCodec instance) => instance.inverted),
      'level': VmProxy(identifier: 'level', externalInstancePropertyReader: (GZipCodec instance) => instance.level),
      'memLevel': VmProxy(identifier: 'memLevel', externalInstancePropertyReader: (GZipCodec instance) => instance.memLevel),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (GZipCodec instance) => instance.noSuchMethod),
      'raw': VmProxy(identifier: 'raw', externalInstancePropertyReader: (GZipCodec instance) => instance.raw),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (GZipCodec instance) => instance.runtimeType),
      'strategy': VmProxy(identifier: 'strategy', externalInstancePropertyReader: (GZipCodec instance) => instance.strategy),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (GZipCodec instance) => instance.toString),
      'windowBits': VmProxy(identifier: 'windowBits', externalInstancePropertyReader: (GZipCodec instance) => instance.windowBits),
    },
  );

  ///class HandshakeException
  static final classHandshakeException = VmClass<HandshakeException>(
    identifier: 'HandshakeException',
    superclassNames: ['Object', 'Exception', 'IOException', 'TlsException'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => HandshakeException.new),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (HandshakeException instance) => instance.hashCode),
      'message': VmProxy(identifier: 'message', externalInstancePropertyReader: (HandshakeException instance) => instance.message),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (HandshakeException instance) => instance.noSuchMethod),
      'osError': VmProxy(identifier: 'osError', externalInstancePropertyReader: (HandshakeException instance) => instance.osError),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (HandshakeException instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (HandshakeException instance) => instance.toString),
      'type': VmProxy(identifier: 'type', externalInstancePropertyReader: (HandshakeException instance) => instance.type),
    },
  );

  ///class HashMap
  static final classHashMap = VmClass<HashMap>(
    identifier: 'HashMap',
    superclassNames: ['Object', 'Map'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => HashMap.new, externalStaticFunctionCaller: ({equals, hashCode, isValidKey}) => HashMap.new(equals: equals == null ? null : (b0, b1) => equals(b0, b1), hashCode: hashCode == null ? null : (b0) => hashCode(b0), isValidKey: isValidKey == null ? null : (b0) => isValidKey(b0))),
      'from': VmProxy(identifier: 'from', externalStaticPropertyReader: () => HashMap.from),
      'fromEntries': VmProxy(identifier: 'fromEntries', externalStaticPropertyReader: () => HashMap.fromEntries),
      'fromIterable': VmProxy(identifier: 'fromIterable', externalStaticPropertyReader: () => HashMap.fromIterable, externalStaticFunctionCaller: (a0, {key, value}) => HashMap.fromIterable(a0, key: key == null ? null : (b0) => key(b0), value: value == null ? null : (b0) => value(b0))),
      'fromIterables': VmProxy(identifier: 'fromIterables', externalStaticPropertyReader: () => HashMap.fromIterables),
      'identity': VmProxy(identifier: 'identity', externalStaticPropertyReader: () => HashMap.identity),
      'of': VmProxy(identifier: 'of', externalStaticPropertyReader: () => HashMap.of),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (HashMap instance) => instance.addAll),
      'addEntries': VmProxy(identifier: 'addEntries', externalInstancePropertyReader: (HashMap instance) => instance.addEntries),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (HashMap instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (HashMap instance) => instance.clear),
      'containsKey': VmProxy(identifier: 'containsKey', externalInstancePropertyReader: (HashMap instance) => instance.containsKey),
      'containsValue': VmProxy(identifier: 'containsValue', externalInstancePropertyReader: (HashMap instance) => instance.containsValue),
      'entries': VmProxy(identifier: 'entries', externalInstancePropertyReader: (HashMap instance) => instance.entries),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (HashMap instance) => instance.forEach, externalInstanceFunctionCaller: (HashMap instance, a0) => instance.forEach((b0, b1) => a0(b0, b1))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (HashMap instance) => instance.hashCode),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (HashMap instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (HashMap instance) => instance.isNotEmpty),
      'keys': VmProxy(identifier: 'keys', externalInstancePropertyReader: (HashMap instance) => instance.keys),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (HashMap instance) => instance.length),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (HashMap instance) => instance.map, externalInstanceFunctionCaller: (HashMap instance, a0) => instance.map((b0, b1) => a0(b0, b1))),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (HashMap instance) => instance.noSuchMethod),
      'putIfAbsent': VmProxy(identifier: 'putIfAbsent', externalInstancePropertyReader: (HashMap instance) => instance.putIfAbsent, externalInstanceFunctionCaller: (HashMap instance, a0, a1) => instance.putIfAbsent(a0, () => a1())),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (HashMap instance) => instance.remove),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (HashMap instance) => instance.removeWhere, externalInstanceFunctionCaller: (HashMap instance, a0) => instance.removeWhere((b0, b1) => a0(b0, b1))),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (HashMap instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (HashMap instance) => instance.toString),
      'update': VmProxy(identifier: 'update', externalInstancePropertyReader: (HashMap instance) => instance.update, externalInstanceFunctionCaller: (HashMap instance, a0, a1, {ifAbsent}) => instance.update(a0, (b0) => a1(b0), ifAbsent: ifAbsent == null ? null : () => ifAbsent())),
      'updateAll': VmProxy(identifier: 'updateAll', externalInstancePropertyReader: (HashMap instance) => instance.updateAll, externalInstanceFunctionCaller: (HashMap instance, a0) => instance.updateAll((b0, b1) => a0(b0, b1))),
      'values': VmProxy(identifier: 'values', externalInstancePropertyReader: (HashMap instance) => instance.values),
    },
  );

  ///class HashSet
  static final classHashSet = VmClass<HashSet>(
    identifier: 'HashSet',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable', 'Set'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => HashSet.new, externalStaticFunctionCaller: ({equals, hashCode, isValidKey}) => HashSet.new(equals: equals == null ? null : (b0, b1) => equals(b0, b1), hashCode: hashCode == null ? null : (b0) => hashCode(b0), isValidKey: isValidKey == null ? null : (b0) => isValidKey(b0))),
      'from': VmProxy(identifier: 'from', externalStaticPropertyReader: () => HashSet.from),
      'identity': VmProxy(identifier: 'identity', externalStaticPropertyReader: () => HashSet.identity),
      'of': VmProxy(identifier: 'of', externalStaticPropertyReader: () => HashSet.of),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (HashSet instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (HashSet instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (HashSet instance) => instance.any, externalInstanceFunctionCaller: (HashSet instance, a0) => instance.any((b0) => a0(b0))),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (HashSet instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (HashSet instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (HashSet instance) => instance.contains),
      'containsAll': VmProxy(identifier: 'containsAll', externalInstancePropertyReader: (HashSet instance) => instance.containsAll),
      'difference': VmProxy(identifier: 'difference', externalInstancePropertyReader: (HashSet instance) => instance.difference),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (HashSet instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (HashSet instance) => instance.elementAtOrNull),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (HashSet instance) => instance.every, externalInstanceFunctionCaller: (HashSet instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (HashSet instance) => instance.expand, externalInstanceFunctionCaller: (HashSet instance, a0) => instance.expand((b0) => a0(b0))),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (HashSet instance) => instance.first),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (HashSet instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (HashSet instance) => instance.firstWhere, externalInstanceFunctionCaller: (HashSet instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (HashSet instance) => instance.fold, externalInstanceFunctionCaller: (HashSet instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (HashSet instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (HashSet instance) => instance.forEach, externalInstanceFunctionCaller: (HashSet instance, a0) => instance.forEach((b0) => a0(b0))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (HashSet instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (HashSet instance) => instance.indexed),
      'intersection': VmProxy(identifier: 'intersection', externalInstancePropertyReader: (HashSet instance) => instance.intersection),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (HashSet instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (HashSet instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (HashSet instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (HashSet instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (HashSet instance) => instance.last),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (HashSet instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (HashSet instance) => instance.lastWhere, externalInstanceFunctionCaller: (HashSet instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (HashSet instance) => instance.length),
      'lookup': VmProxy(identifier: 'lookup', externalInstancePropertyReader: (HashSet instance) => instance.lookup),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (HashSet instance) => instance.map, externalInstanceFunctionCaller: (HashSet instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (HashSet instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (HashSet instance) => instance.noSuchMethod),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (HashSet instance) => instance.reduce, externalInstanceFunctionCaller: (HashSet instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (HashSet instance) => instance.remove),
      'removeAll': VmProxy(identifier: 'removeAll', externalInstancePropertyReader: (HashSet instance) => instance.removeAll),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (HashSet instance) => instance.removeWhere, externalInstanceFunctionCaller: (HashSet instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'retainAll': VmProxy(identifier: 'retainAll', externalInstancePropertyReader: (HashSet instance) => instance.retainAll),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (HashSet instance) => instance.retainWhere, externalInstanceFunctionCaller: (HashSet instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (HashSet instance) => instance.runtimeType),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (HashSet instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (HashSet instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (HashSet instance) => instance.singleWhere, externalInstanceFunctionCaller: (HashSet instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (HashSet instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (HashSet instance) => instance.skipWhile, externalInstanceFunctionCaller: (HashSet instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (HashSet instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (HashSet instance) => instance.takeWhile, externalInstanceFunctionCaller: (HashSet instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (HashSet instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (HashSet instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (HashSet instance) => instance.toString),
      'union': VmProxy(identifier: 'union', externalInstancePropertyReader: (HashSet instance) => instance.union),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (HashSet instance) => instance.where, externalInstanceFunctionCaller: (HashSet instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (HashSet instance) => instance.whereType),
    },
  );

  ///class HasNextIterator
  static final classHasNextIterator = VmClass<HasNextIterator>(
    identifier: 'HasNextIterator',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => HasNextIterator.new),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (HasNextIterator instance) => instance.hashCode),
      'hasNext': VmProxy(identifier: 'hasNext', externalInstancePropertyReader: (HasNextIterator instance) => instance.hasNext),
      'next': VmProxy(identifier: 'next', externalInstancePropertyReader: (HasNextIterator instance) => instance.next),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (HasNextIterator instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (HasNextIterator instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (HasNextIterator instance) => instance.toString),
    },
  );

  ///class HtmlEscape
  static final classHtmlEscape = VmClass<HtmlEscape>(
    identifier: 'HtmlEscape',
    superclassNames: ['Object', 'StreamTransformer', 'StreamTransformerBase', 'Converter'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => HtmlEscape.new),
      'bind': VmProxy(identifier: 'bind', externalInstancePropertyReader: (HtmlEscape instance) => instance.bind),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (HtmlEscape instance) => instance.cast),
      'convert': VmProxy(identifier: 'convert', externalInstancePropertyReader: (HtmlEscape instance) => instance.convert),
      'fuse': VmProxy(identifier: 'fuse', externalInstancePropertyReader: (HtmlEscape instance) => instance.fuse),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (HtmlEscape instance) => instance.hashCode),
      'mode': VmProxy(identifier: 'mode', externalInstancePropertyReader: (HtmlEscape instance) => instance.mode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (HtmlEscape instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (HtmlEscape instance) => instance.runtimeType),
      'startChunkedConversion': VmProxy(identifier: 'startChunkedConversion', externalInstancePropertyReader: (HtmlEscape instance) => instance.startChunkedConversion),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (HtmlEscape instance) => instance.toString),
    },
  );

  ///class HtmlEscapeMode
  static final classHtmlEscapeMode = VmClass<HtmlEscapeMode>(
    identifier: 'HtmlEscapeMode',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => HtmlEscapeMode.new),
      'attribute': VmProxy(identifier: 'attribute', externalStaticPropertyReader: () => HtmlEscapeMode.attribute),
      'element': VmProxy(identifier: 'element', externalStaticPropertyReader: () => HtmlEscapeMode.element),
      'sqAttribute': VmProxy(identifier: 'sqAttribute', externalStaticPropertyReader: () => HtmlEscapeMode.sqAttribute),
      'unknown': VmProxy(identifier: 'unknown', externalStaticPropertyReader: () => HtmlEscapeMode.unknown),
      'escapeApos': VmProxy(identifier: 'escapeApos', externalInstancePropertyReader: (HtmlEscapeMode instance) => instance.escapeApos),
      'escapeLtGt': VmProxy(identifier: 'escapeLtGt', externalInstancePropertyReader: (HtmlEscapeMode instance) => instance.escapeLtGt),
      'escapeQuot': VmProxy(identifier: 'escapeQuot', externalInstancePropertyReader: (HtmlEscapeMode instance) => instance.escapeQuot),
      'escapeSlash': VmProxy(identifier: 'escapeSlash', externalInstancePropertyReader: (HtmlEscapeMode instance) => instance.escapeSlash),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (HtmlEscapeMode instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (HtmlEscapeMode instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (HtmlEscapeMode instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (HtmlEscapeMode instance) => instance.toString),
    },
  );

  ///class IndexError
  static final classIndexError = VmClass<IndexError>(
    identifier: 'IndexError',
    superclassNames: ['Object', 'Error', 'ArgumentError', 'RangeError'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => IndexError.new),
      'withLength': VmProxy(identifier: 'withLength', externalStaticPropertyReader: () => IndexError.withLength),
      'check': VmProxy(identifier: 'check', externalStaticPropertyReader: () => IndexError.check),
      'end': VmProxy(identifier: 'end', externalInstancePropertyReader: (IndexError instance) => instance.end),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (IndexError instance) => instance.hashCode),
      'indexable': VmProxy(identifier: 'indexable', externalInstancePropertyReader: (IndexError instance) => instance.indexable),
      'invalidValue': VmProxy(identifier: 'invalidValue', externalInstancePropertyReader: (IndexError instance) => instance.invalidValue),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (IndexError instance) => instance.length),
      'message': VmProxy(identifier: 'message', externalInstancePropertyReader: (IndexError instance) => instance.message),
      'name': VmProxy(identifier: 'name', externalInstancePropertyReader: (IndexError instance) => instance.name),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (IndexError instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (IndexError instance) => instance.runtimeType),
      'stackTrace': VmProxy(identifier: 'stackTrace', externalInstancePropertyReader: (IndexError instance) => instance.stackTrace),
      'start': VmProxy(identifier: 'start', externalInstancePropertyReader: (IndexError instance) => instance.start),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (IndexError instance) => instance.toString),
    },
  );

  ///class int
  static final classInt = VmClass<int>(
    identifier: 'int',
    superclassNames: ['Object', 'Comparable', 'num'],
    externalProxyMap: {
      'fromEnvironment': VmProxy(identifier: 'fromEnvironment', externalStaticPropertyReader: () => int.fromEnvironment),
      'parse': VmProxy(identifier: 'parse', externalStaticPropertyReader: () => int.parse),
      'tryParse': VmProxy(identifier: 'tryParse', externalStaticPropertyReader: () => int.tryParse),
      'abs': VmProxy(identifier: 'abs', externalInstancePropertyReader: (int instance) => instance.abs),
      'bitLength': VmProxy(identifier: 'bitLength', externalInstancePropertyReader: (int instance) => instance.bitLength),
      'ceil': VmProxy(identifier: 'ceil', externalInstancePropertyReader: (int instance) => instance.ceil),
      'ceilToDouble': VmProxy(identifier: 'ceilToDouble', externalInstancePropertyReader: (int instance) => instance.ceilToDouble),
      'clamp': VmProxy(identifier: 'clamp', externalInstancePropertyReader: (int instance) => instance.clamp),
      'compareTo': VmProxy(identifier: 'compareTo', externalInstancePropertyReader: (int instance) => instance.compareTo),
      'floor': VmProxy(identifier: 'floor', externalInstancePropertyReader: (int instance) => instance.floor),
      'floorToDouble': VmProxy(identifier: 'floorToDouble', externalInstancePropertyReader: (int instance) => instance.floorToDouble),
      'gcd': VmProxy(identifier: 'gcd', externalInstancePropertyReader: (int instance) => instance.gcd),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (int instance) => instance.hashCode),
      'isEven': VmProxy(identifier: 'isEven', externalInstancePropertyReader: (int instance) => instance.isEven),
      'isFinite': VmProxy(identifier: 'isFinite', externalInstancePropertyReader: (int instance) => instance.isFinite),
      'isInfinite': VmProxy(identifier: 'isInfinite', externalInstancePropertyReader: (int instance) => instance.isInfinite),
      'isNaN': VmProxy(identifier: 'isNaN', externalInstancePropertyReader: (int instance) => instance.isNaN),
      'isNegative': VmProxy(identifier: 'isNegative', externalInstancePropertyReader: (int instance) => instance.isNegative),
      'isOdd': VmProxy(identifier: 'isOdd', externalInstancePropertyReader: (int instance) => instance.isOdd),
      'modInverse': VmProxy(identifier: 'modInverse', externalInstancePropertyReader: (int instance) => instance.modInverse),
      'modPow': VmProxy(identifier: 'modPow', externalInstancePropertyReader: (int instance) => instance.modPow),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (int instance) => instance.noSuchMethod),
      'remainder': VmProxy(identifier: 'remainder', externalInstancePropertyReader: (int instance) => instance.remainder),
      'round': VmProxy(identifier: 'round', externalInstancePropertyReader: (int instance) => instance.round),
      'roundToDouble': VmProxy(identifier: 'roundToDouble', externalInstancePropertyReader: (int instance) => instance.roundToDouble),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (int instance) => instance.runtimeType),
      'sign': VmProxy(identifier: 'sign', externalInstancePropertyReader: (int instance) => instance.sign),
      'toDouble': VmProxy(identifier: 'toDouble', externalInstancePropertyReader: (int instance) => instance.toDouble),
      'toInt': VmProxy(identifier: 'toInt', externalInstancePropertyReader: (int instance) => instance.toInt),
      'toRadixString': VmProxy(identifier: 'toRadixString', externalInstancePropertyReader: (int instance) => instance.toRadixString),
      'toSigned': VmProxy(identifier: 'toSigned', externalInstancePropertyReader: (int instance) => instance.toSigned),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (int instance) => instance.toString),
      'toStringAsExponential': VmProxy(identifier: 'toStringAsExponential', externalInstancePropertyReader: (int instance) => instance.toStringAsExponential),
      'toStringAsFixed': VmProxy(identifier: 'toStringAsFixed', externalInstancePropertyReader: (int instance) => instance.toStringAsFixed),
      'toStringAsPrecision': VmProxy(identifier: 'toStringAsPrecision', externalInstancePropertyReader: (int instance) => instance.toStringAsPrecision),
      'toUnsigned': VmProxy(identifier: 'toUnsigned', externalInstancePropertyReader: (int instance) => instance.toUnsigned),
      'truncate': VmProxy(identifier: 'truncate', externalInstancePropertyReader: (int instance) => instance.truncate),
      'truncateToDouble': VmProxy(identifier: 'truncateToDouble', externalInstancePropertyReader: (int instance) => instance.truncateToDouble),
    },
  );

  ///class Int16List
  static final classInt16List = VmClass<Int16List>(
    identifier: 'Int16List',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable', 'List', 'TypedData', '_TypedIntList'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Int16List.new),
      'fromList': VmProxy(identifier: 'fromList', externalStaticPropertyReader: () => Int16List.fromList),
      'sublistView': VmProxy(identifier: 'sublistView', externalStaticPropertyReader: () => Int16List.sublistView),
      'view': VmProxy(identifier: 'view', externalStaticPropertyReader: () => Int16List.view),
      'bytesPerElement': VmProxy(identifier: 'bytesPerElement', externalStaticPropertyReader: () => Int16List.bytesPerElement),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (Int16List instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (Int16List instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (Int16List instance) => instance.any, externalInstanceFunctionCaller: (Int16List instance, a0) => instance.any((b0) => a0(b0))),
      'asMap': VmProxy(identifier: 'asMap', externalInstancePropertyReader: (Int16List instance) => instance.asMap),
      'buffer': VmProxy(identifier: 'buffer', externalInstancePropertyReader: (Int16List instance) => instance.buffer),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (Int16List instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (Int16List instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (Int16List instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (Int16List instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (Int16List instance) => instance.elementAtOrNull),
      'elementSizeInBytes': VmProxy(identifier: 'elementSizeInBytes', externalInstancePropertyReader: (Int16List instance) => instance.elementSizeInBytes),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (Int16List instance) => instance.every, externalInstanceFunctionCaller: (Int16List instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (Int16List instance) => instance.expand, externalInstanceFunctionCaller: (Int16List instance, a0) => instance.expand((b0) => a0(b0))),
      'fillRange': VmProxy(identifier: 'fillRange', externalInstancePropertyReader: (Int16List instance) => instance.fillRange),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (Int16List instance) => instance.first, externalInstancePropertyWriter: (Int16List instance, value) => instance.first = value),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (Int16List instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (Int16List instance) => instance.firstWhere, externalInstanceFunctionCaller: (Int16List instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (Int16List instance) => instance.fold, externalInstanceFunctionCaller: (Int16List instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (Int16List instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (Int16List instance) => instance.forEach, externalInstanceFunctionCaller: (Int16List instance, a0) => instance.forEach((b0) => a0(b0))),
      'getRange': VmProxy(identifier: 'getRange', externalInstancePropertyReader: (Int16List instance) => instance.getRange),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Int16List instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (Int16List instance) => instance.indexed),
      'indexOf': VmProxy(identifier: 'indexOf', externalInstancePropertyReader: (Int16List instance) => instance.indexOf),
      'indexWhere': VmProxy(identifier: 'indexWhere', externalInstancePropertyReader: (Int16List instance) => instance.indexWhere, externalInstanceFunctionCaller: (Int16List instance, a0, [a1 = 0]) => instance.indexWhere((b0) => a0(b0), a1)),
      'insert': VmProxy(identifier: 'insert', externalInstancePropertyReader: (Int16List instance) => instance.insert),
      'insertAll': VmProxy(identifier: 'insertAll', externalInstancePropertyReader: (Int16List instance) => instance.insertAll),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (Int16List instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (Int16List instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (Int16List instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (Int16List instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyWriter: (Int16List instance, value) => instance.last = value, externalInstancePropertyReader: (Int16List instance) => instance.last),
      'lastIndexOf': VmProxy(identifier: 'lastIndexOf', externalInstancePropertyReader: (Int16List instance) => instance.lastIndexOf),
      'lastIndexWhere': VmProxy(identifier: 'lastIndexWhere', externalInstancePropertyReader: (Int16List instance) => instance.lastIndexWhere, externalInstanceFunctionCaller: (Int16List instance, a0, [a1]) => instance.lastIndexWhere((b0) => a0(b0), a1)),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (Int16List instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (Int16List instance) => instance.lastWhere, externalInstanceFunctionCaller: (Int16List instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (Int16List instance) => instance.length, externalInstancePropertyWriter: (Int16List instance, value) => instance.length = value),
      'lengthInBytes': VmProxy(identifier: 'lengthInBytes', externalInstancePropertyReader: (Int16List instance) => instance.lengthInBytes),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (Int16List instance) => instance.map, externalInstanceFunctionCaller: (Int16List instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (Int16List instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Int16List instance) => instance.noSuchMethod),
      'offsetInBytes': VmProxy(identifier: 'offsetInBytes', externalInstancePropertyReader: (Int16List instance) => instance.offsetInBytes),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (Int16List instance) => instance.reduce, externalInstanceFunctionCaller: (Int16List instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (Int16List instance) => instance.remove),
      'removeAt': VmProxy(identifier: 'removeAt', externalInstancePropertyReader: (Int16List instance) => instance.removeAt),
      'removeLast': VmProxy(identifier: 'removeLast', externalInstancePropertyReader: (Int16List instance) => instance.removeLast),
      'removeRange': VmProxy(identifier: 'removeRange', externalInstancePropertyReader: (Int16List instance) => instance.removeRange),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (Int16List instance) => instance.removeWhere, externalInstanceFunctionCaller: (Int16List instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'replaceRange': VmProxy(identifier: 'replaceRange', externalInstancePropertyReader: (Int16List instance) => instance.replaceRange),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (Int16List instance) => instance.retainWhere, externalInstanceFunctionCaller: (Int16List instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'reversed': VmProxy(identifier: 'reversed', externalInstancePropertyReader: (Int16List instance) => instance.reversed),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Int16List instance) => instance.runtimeType),
      'setAll': VmProxy(identifier: 'setAll', externalInstancePropertyReader: (Int16List instance) => instance.setAll),
      'setRange': VmProxy(identifier: 'setRange', externalInstancePropertyReader: (Int16List instance) => instance.setRange),
      'shuffle': VmProxy(identifier: 'shuffle', externalInstancePropertyReader: (Int16List instance) => instance.shuffle),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (Int16List instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (Int16List instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (Int16List instance) => instance.singleWhere, externalInstanceFunctionCaller: (Int16List instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (Int16List instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (Int16List instance) => instance.skipWhile, externalInstanceFunctionCaller: (Int16List instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'sort': VmProxy(identifier: 'sort', externalInstancePropertyReader: (Int16List instance) => instance.sort, externalInstanceFunctionCaller: (Int16List instance, [a0]) => instance.sort(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'sublist': VmProxy(identifier: 'sublist', externalInstancePropertyReader: (Int16List instance) => instance.sublist),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (Int16List instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (Int16List instance) => instance.takeWhile, externalInstanceFunctionCaller: (Int16List instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (Int16List instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (Int16List instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Int16List instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (Int16List instance) => instance.where, externalInstanceFunctionCaller: (Int16List instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (Int16List instance) => instance.whereType),
    },
  );

  ///class Int32List
  static final classInt32List = VmClass<Int32List>(
    identifier: 'Int32List',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable', 'List', 'TypedData', '_TypedIntList'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Int32List.new),
      'fromList': VmProxy(identifier: 'fromList', externalStaticPropertyReader: () => Int32List.fromList),
      'sublistView': VmProxy(identifier: 'sublistView', externalStaticPropertyReader: () => Int32List.sublistView),
      'view': VmProxy(identifier: 'view', externalStaticPropertyReader: () => Int32List.view),
      'bytesPerElement': VmProxy(identifier: 'bytesPerElement', externalStaticPropertyReader: () => Int32List.bytesPerElement),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (Int32List instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (Int32List instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (Int32List instance) => instance.any, externalInstanceFunctionCaller: (Int32List instance, a0) => instance.any((b0) => a0(b0))),
      'asMap': VmProxy(identifier: 'asMap', externalInstancePropertyReader: (Int32List instance) => instance.asMap),
      'buffer': VmProxy(identifier: 'buffer', externalInstancePropertyReader: (Int32List instance) => instance.buffer),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (Int32List instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (Int32List instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (Int32List instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (Int32List instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (Int32List instance) => instance.elementAtOrNull),
      'elementSizeInBytes': VmProxy(identifier: 'elementSizeInBytes', externalInstancePropertyReader: (Int32List instance) => instance.elementSizeInBytes),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (Int32List instance) => instance.every, externalInstanceFunctionCaller: (Int32List instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (Int32List instance) => instance.expand, externalInstanceFunctionCaller: (Int32List instance, a0) => instance.expand((b0) => a0(b0))),
      'fillRange': VmProxy(identifier: 'fillRange', externalInstancePropertyReader: (Int32List instance) => instance.fillRange),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (Int32List instance) => instance.first, externalInstancePropertyWriter: (Int32List instance, value) => instance.first = value),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (Int32List instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (Int32List instance) => instance.firstWhere, externalInstanceFunctionCaller: (Int32List instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (Int32List instance) => instance.fold, externalInstanceFunctionCaller: (Int32List instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (Int32List instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (Int32List instance) => instance.forEach, externalInstanceFunctionCaller: (Int32List instance, a0) => instance.forEach((b0) => a0(b0))),
      'getRange': VmProxy(identifier: 'getRange', externalInstancePropertyReader: (Int32List instance) => instance.getRange),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Int32List instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (Int32List instance) => instance.indexed),
      'indexOf': VmProxy(identifier: 'indexOf', externalInstancePropertyReader: (Int32List instance) => instance.indexOf),
      'indexWhere': VmProxy(identifier: 'indexWhere', externalInstancePropertyReader: (Int32List instance) => instance.indexWhere, externalInstanceFunctionCaller: (Int32List instance, a0, [a1 = 0]) => instance.indexWhere((b0) => a0(b0), a1)),
      'insert': VmProxy(identifier: 'insert', externalInstancePropertyReader: (Int32List instance) => instance.insert),
      'insertAll': VmProxy(identifier: 'insertAll', externalInstancePropertyReader: (Int32List instance) => instance.insertAll),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (Int32List instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (Int32List instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (Int32List instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (Int32List instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyWriter: (Int32List instance, value) => instance.last = value, externalInstancePropertyReader: (Int32List instance) => instance.last),
      'lastIndexOf': VmProxy(identifier: 'lastIndexOf', externalInstancePropertyReader: (Int32List instance) => instance.lastIndexOf),
      'lastIndexWhere': VmProxy(identifier: 'lastIndexWhere', externalInstancePropertyReader: (Int32List instance) => instance.lastIndexWhere, externalInstanceFunctionCaller: (Int32List instance, a0, [a1]) => instance.lastIndexWhere((b0) => a0(b0), a1)),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (Int32List instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (Int32List instance) => instance.lastWhere, externalInstanceFunctionCaller: (Int32List instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (Int32List instance) => instance.length, externalInstancePropertyWriter: (Int32List instance, value) => instance.length = value),
      'lengthInBytes': VmProxy(identifier: 'lengthInBytes', externalInstancePropertyReader: (Int32List instance) => instance.lengthInBytes),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (Int32List instance) => instance.map, externalInstanceFunctionCaller: (Int32List instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (Int32List instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Int32List instance) => instance.noSuchMethod),
      'offsetInBytes': VmProxy(identifier: 'offsetInBytes', externalInstancePropertyReader: (Int32List instance) => instance.offsetInBytes),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (Int32List instance) => instance.reduce, externalInstanceFunctionCaller: (Int32List instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (Int32List instance) => instance.remove),
      'removeAt': VmProxy(identifier: 'removeAt', externalInstancePropertyReader: (Int32List instance) => instance.removeAt),
      'removeLast': VmProxy(identifier: 'removeLast', externalInstancePropertyReader: (Int32List instance) => instance.removeLast),
      'removeRange': VmProxy(identifier: 'removeRange', externalInstancePropertyReader: (Int32List instance) => instance.removeRange),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (Int32List instance) => instance.removeWhere, externalInstanceFunctionCaller: (Int32List instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'replaceRange': VmProxy(identifier: 'replaceRange', externalInstancePropertyReader: (Int32List instance) => instance.replaceRange),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (Int32List instance) => instance.retainWhere, externalInstanceFunctionCaller: (Int32List instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'reversed': VmProxy(identifier: 'reversed', externalInstancePropertyReader: (Int32List instance) => instance.reversed),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Int32List instance) => instance.runtimeType),
      'setAll': VmProxy(identifier: 'setAll', externalInstancePropertyReader: (Int32List instance) => instance.setAll),
      'setRange': VmProxy(identifier: 'setRange', externalInstancePropertyReader: (Int32List instance) => instance.setRange),
      'shuffle': VmProxy(identifier: 'shuffle', externalInstancePropertyReader: (Int32List instance) => instance.shuffle),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (Int32List instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (Int32List instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (Int32List instance) => instance.singleWhere, externalInstanceFunctionCaller: (Int32List instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (Int32List instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (Int32List instance) => instance.skipWhile, externalInstanceFunctionCaller: (Int32List instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'sort': VmProxy(identifier: 'sort', externalInstancePropertyReader: (Int32List instance) => instance.sort, externalInstanceFunctionCaller: (Int32List instance, [a0]) => instance.sort(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'sublist': VmProxy(identifier: 'sublist', externalInstancePropertyReader: (Int32List instance) => instance.sublist),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (Int32List instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (Int32List instance) => instance.takeWhile, externalInstanceFunctionCaller: (Int32List instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (Int32List instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (Int32List instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Int32List instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (Int32List instance) => instance.where, externalInstanceFunctionCaller: (Int32List instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (Int32List instance) => instance.whereType),
    },
  );

  ///class Int32x4
  static final classInt32x4 = VmClass<Int32x4>(
    identifier: 'Int32x4',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Int32x4.new),
      'bool': VmProxy(identifier: 'bool', externalStaticPropertyReader: () => Int32x4.bool),
      'fromFloat32x4Bits': VmProxy(identifier: 'fromFloat32x4Bits', externalStaticPropertyReader: () => Int32x4.fromFloat32x4Bits),
      'wwww': VmProxy(identifier: 'wwww', externalStaticPropertyReader: () => Int32x4.wwww),
      'wwwx': VmProxy(identifier: 'wwwx', externalStaticPropertyReader: () => Int32x4.wwwx),
      'wwwy': VmProxy(identifier: 'wwwy', externalStaticPropertyReader: () => Int32x4.wwwy),
      'wwwz': VmProxy(identifier: 'wwwz', externalStaticPropertyReader: () => Int32x4.wwwz),
      'wwxw': VmProxy(identifier: 'wwxw', externalStaticPropertyReader: () => Int32x4.wwxw),
      'wwxx': VmProxy(identifier: 'wwxx', externalStaticPropertyReader: () => Int32x4.wwxx),
      'wwxy': VmProxy(identifier: 'wwxy', externalStaticPropertyReader: () => Int32x4.wwxy),
      'wwxz': VmProxy(identifier: 'wwxz', externalStaticPropertyReader: () => Int32x4.wwxz),
      'wwyw': VmProxy(identifier: 'wwyw', externalStaticPropertyReader: () => Int32x4.wwyw),
      'wwyx': VmProxy(identifier: 'wwyx', externalStaticPropertyReader: () => Int32x4.wwyx),
      'wwyy': VmProxy(identifier: 'wwyy', externalStaticPropertyReader: () => Int32x4.wwyy),
      'wwyz': VmProxy(identifier: 'wwyz', externalStaticPropertyReader: () => Int32x4.wwyz),
      'wwzw': VmProxy(identifier: 'wwzw', externalStaticPropertyReader: () => Int32x4.wwzw),
      'wwzx': VmProxy(identifier: 'wwzx', externalStaticPropertyReader: () => Int32x4.wwzx),
      'wwzy': VmProxy(identifier: 'wwzy', externalStaticPropertyReader: () => Int32x4.wwzy),
      'wwzz': VmProxy(identifier: 'wwzz', externalStaticPropertyReader: () => Int32x4.wwzz),
      'wxww': VmProxy(identifier: 'wxww', externalStaticPropertyReader: () => Int32x4.wxww),
      'wxwx': VmProxy(identifier: 'wxwx', externalStaticPropertyReader: () => Int32x4.wxwx),
      'wxwy': VmProxy(identifier: 'wxwy', externalStaticPropertyReader: () => Int32x4.wxwy),
      'wxwz': VmProxy(identifier: 'wxwz', externalStaticPropertyReader: () => Int32x4.wxwz),
      'wxxw': VmProxy(identifier: 'wxxw', externalStaticPropertyReader: () => Int32x4.wxxw),
      'wxxx': VmProxy(identifier: 'wxxx', externalStaticPropertyReader: () => Int32x4.wxxx),
      'wxxy': VmProxy(identifier: 'wxxy', externalStaticPropertyReader: () => Int32x4.wxxy),
      'wxxz': VmProxy(identifier: 'wxxz', externalStaticPropertyReader: () => Int32x4.wxxz),
      'wxyw': VmProxy(identifier: 'wxyw', externalStaticPropertyReader: () => Int32x4.wxyw),
      'wxyx': VmProxy(identifier: 'wxyx', externalStaticPropertyReader: () => Int32x4.wxyx),
      'wxyy': VmProxy(identifier: 'wxyy', externalStaticPropertyReader: () => Int32x4.wxyy),
      'wxyz': VmProxy(identifier: 'wxyz', externalStaticPropertyReader: () => Int32x4.wxyz),
      'wxzw': VmProxy(identifier: 'wxzw', externalStaticPropertyReader: () => Int32x4.wxzw),
      'wxzx': VmProxy(identifier: 'wxzx', externalStaticPropertyReader: () => Int32x4.wxzx),
      'wxzy': VmProxy(identifier: 'wxzy', externalStaticPropertyReader: () => Int32x4.wxzy),
      'wxzz': VmProxy(identifier: 'wxzz', externalStaticPropertyReader: () => Int32x4.wxzz),
      'wyww': VmProxy(identifier: 'wyww', externalStaticPropertyReader: () => Int32x4.wyww),
      'wywx': VmProxy(identifier: 'wywx', externalStaticPropertyReader: () => Int32x4.wywx),
      'wywy': VmProxy(identifier: 'wywy', externalStaticPropertyReader: () => Int32x4.wywy),
      'wywz': VmProxy(identifier: 'wywz', externalStaticPropertyReader: () => Int32x4.wywz),
      'wyxw': VmProxy(identifier: 'wyxw', externalStaticPropertyReader: () => Int32x4.wyxw),
      'wyxx': VmProxy(identifier: 'wyxx', externalStaticPropertyReader: () => Int32x4.wyxx),
      'wyxy': VmProxy(identifier: 'wyxy', externalStaticPropertyReader: () => Int32x4.wyxy),
      'wyxz': VmProxy(identifier: 'wyxz', externalStaticPropertyReader: () => Int32x4.wyxz),
      'wyyw': VmProxy(identifier: 'wyyw', externalStaticPropertyReader: () => Int32x4.wyyw),
      'wyyx': VmProxy(identifier: 'wyyx', externalStaticPropertyReader: () => Int32x4.wyyx),
      'wyyy': VmProxy(identifier: 'wyyy', externalStaticPropertyReader: () => Int32x4.wyyy),
      'wyyz': VmProxy(identifier: 'wyyz', externalStaticPropertyReader: () => Int32x4.wyyz),
      'wyzw': VmProxy(identifier: 'wyzw', externalStaticPropertyReader: () => Int32x4.wyzw),
      'wyzx': VmProxy(identifier: 'wyzx', externalStaticPropertyReader: () => Int32x4.wyzx),
      'wyzy': VmProxy(identifier: 'wyzy', externalStaticPropertyReader: () => Int32x4.wyzy),
      'wyzz': VmProxy(identifier: 'wyzz', externalStaticPropertyReader: () => Int32x4.wyzz),
      'wzww': VmProxy(identifier: 'wzww', externalStaticPropertyReader: () => Int32x4.wzww),
      'wzwx': VmProxy(identifier: 'wzwx', externalStaticPropertyReader: () => Int32x4.wzwx),
      'wzwy': VmProxy(identifier: 'wzwy', externalStaticPropertyReader: () => Int32x4.wzwy),
      'wzwz': VmProxy(identifier: 'wzwz', externalStaticPropertyReader: () => Int32x4.wzwz),
      'wzxw': VmProxy(identifier: 'wzxw', externalStaticPropertyReader: () => Int32x4.wzxw),
      'wzxx': VmProxy(identifier: 'wzxx', externalStaticPropertyReader: () => Int32x4.wzxx),
      'wzxy': VmProxy(identifier: 'wzxy', externalStaticPropertyReader: () => Int32x4.wzxy),
      'wzxz': VmProxy(identifier: 'wzxz', externalStaticPropertyReader: () => Int32x4.wzxz),
      'wzyw': VmProxy(identifier: 'wzyw', externalStaticPropertyReader: () => Int32x4.wzyw),
      'wzyx': VmProxy(identifier: 'wzyx', externalStaticPropertyReader: () => Int32x4.wzyx),
      'wzyy': VmProxy(identifier: 'wzyy', externalStaticPropertyReader: () => Int32x4.wzyy),
      'wzyz': VmProxy(identifier: 'wzyz', externalStaticPropertyReader: () => Int32x4.wzyz),
      'wzzw': VmProxy(identifier: 'wzzw', externalStaticPropertyReader: () => Int32x4.wzzw),
      'wzzx': VmProxy(identifier: 'wzzx', externalStaticPropertyReader: () => Int32x4.wzzx),
      'wzzy': VmProxy(identifier: 'wzzy', externalStaticPropertyReader: () => Int32x4.wzzy),
      'wzzz': VmProxy(identifier: 'wzzz', externalStaticPropertyReader: () => Int32x4.wzzz),
      'xwww': VmProxy(identifier: 'xwww', externalStaticPropertyReader: () => Int32x4.xwww),
      'xwwx': VmProxy(identifier: 'xwwx', externalStaticPropertyReader: () => Int32x4.xwwx),
      'xwwy': VmProxy(identifier: 'xwwy', externalStaticPropertyReader: () => Int32x4.xwwy),
      'xwwz': VmProxy(identifier: 'xwwz', externalStaticPropertyReader: () => Int32x4.xwwz),
      'xwxw': VmProxy(identifier: 'xwxw', externalStaticPropertyReader: () => Int32x4.xwxw),
      'xwxx': VmProxy(identifier: 'xwxx', externalStaticPropertyReader: () => Int32x4.xwxx),
      'xwxy': VmProxy(identifier: 'xwxy', externalStaticPropertyReader: () => Int32x4.xwxy),
      'xwxz': VmProxy(identifier: 'xwxz', externalStaticPropertyReader: () => Int32x4.xwxz),
      'xwyw': VmProxy(identifier: 'xwyw', externalStaticPropertyReader: () => Int32x4.xwyw),
      'xwyx': VmProxy(identifier: 'xwyx', externalStaticPropertyReader: () => Int32x4.xwyx),
      'xwyy': VmProxy(identifier: 'xwyy', externalStaticPropertyReader: () => Int32x4.xwyy),
      'xwyz': VmProxy(identifier: 'xwyz', externalStaticPropertyReader: () => Int32x4.xwyz),
      'xwzw': VmProxy(identifier: 'xwzw', externalStaticPropertyReader: () => Int32x4.xwzw),
      'xwzx': VmProxy(identifier: 'xwzx', externalStaticPropertyReader: () => Int32x4.xwzx),
      'xwzy': VmProxy(identifier: 'xwzy', externalStaticPropertyReader: () => Int32x4.xwzy),
      'xwzz': VmProxy(identifier: 'xwzz', externalStaticPropertyReader: () => Int32x4.xwzz),
      'xxww': VmProxy(identifier: 'xxww', externalStaticPropertyReader: () => Int32x4.xxww),
      'xxwx': VmProxy(identifier: 'xxwx', externalStaticPropertyReader: () => Int32x4.xxwx),
      'xxwy': VmProxy(identifier: 'xxwy', externalStaticPropertyReader: () => Int32x4.xxwy),
      'xxwz': VmProxy(identifier: 'xxwz', externalStaticPropertyReader: () => Int32x4.xxwz),
      'xxxw': VmProxy(identifier: 'xxxw', externalStaticPropertyReader: () => Int32x4.xxxw),
      'xxxx': VmProxy(identifier: 'xxxx', externalStaticPropertyReader: () => Int32x4.xxxx),
      'xxxy': VmProxy(identifier: 'xxxy', externalStaticPropertyReader: () => Int32x4.xxxy),
      'xxxz': VmProxy(identifier: 'xxxz', externalStaticPropertyReader: () => Int32x4.xxxz),
      'xxyw': VmProxy(identifier: 'xxyw', externalStaticPropertyReader: () => Int32x4.xxyw),
      'xxyx': VmProxy(identifier: 'xxyx', externalStaticPropertyReader: () => Int32x4.xxyx),
      'xxyy': VmProxy(identifier: 'xxyy', externalStaticPropertyReader: () => Int32x4.xxyy),
      'xxyz': VmProxy(identifier: 'xxyz', externalStaticPropertyReader: () => Int32x4.xxyz),
      'xxzw': VmProxy(identifier: 'xxzw', externalStaticPropertyReader: () => Int32x4.xxzw),
      'xxzx': VmProxy(identifier: 'xxzx', externalStaticPropertyReader: () => Int32x4.xxzx),
      'xxzy': VmProxy(identifier: 'xxzy', externalStaticPropertyReader: () => Int32x4.xxzy),
      'xxzz': VmProxy(identifier: 'xxzz', externalStaticPropertyReader: () => Int32x4.xxzz),
      'xyww': VmProxy(identifier: 'xyww', externalStaticPropertyReader: () => Int32x4.xyww),
      'xywx': VmProxy(identifier: 'xywx', externalStaticPropertyReader: () => Int32x4.xywx),
      'xywy': VmProxy(identifier: 'xywy', externalStaticPropertyReader: () => Int32x4.xywy),
      'xywz': VmProxy(identifier: 'xywz', externalStaticPropertyReader: () => Int32x4.xywz),
      'xyxw': VmProxy(identifier: 'xyxw', externalStaticPropertyReader: () => Int32x4.xyxw),
      'xyxx': VmProxy(identifier: 'xyxx', externalStaticPropertyReader: () => Int32x4.xyxx),
      'xyxy': VmProxy(identifier: 'xyxy', externalStaticPropertyReader: () => Int32x4.xyxy),
      'xyxz': VmProxy(identifier: 'xyxz', externalStaticPropertyReader: () => Int32x4.xyxz),
      'xyyw': VmProxy(identifier: 'xyyw', externalStaticPropertyReader: () => Int32x4.xyyw),
      'xyyx': VmProxy(identifier: 'xyyx', externalStaticPropertyReader: () => Int32x4.xyyx),
      'xyyy': VmProxy(identifier: 'xyyy', externalStaticPropertyReader: () => Int32x4.xyyy),
      'xyyz': VmProxy(identifier: 'xyyz', externalStaticPropertyReader: () => Int32x4.xyyz),
      'xyzw': VmProxy(identifier: 'xyzw', externalStaticPropertyReader: () => Int32x4.xyzw),
      'xyzx': VmProxy(identifier: 'xyzx', externalStaticPropertyReader: () => Int32x4.xyzx),
      'xyzy': VmProxy(identifier: 'xyzy', externalStaticPropertyReader: () => Int32x4.xyzy),
      'xyzz': VmProxy(identifier: 'xyzz', externalStaticPropertyReader: () => Int32x4.xyzz),
      'xzww': VmProxy(identifier: 'xzww', externalStaticPropertyReader: () => Int32x4.xzww),
      'xzwx': VmProxy(identifier: 'xzwx', externalStaticPropertyReader: () => Int32x4.xzwx),
      'xzwy': VmProxy(identifier: 'xzwy', externalStaticPropertyReader: () => Int32x4.xzwy),
      'xzwz': VmProxy(identifier: 'xzwz', externalStaticPropertyReader: () => Int32x4.xzwz),
      'xzxw': VmProxy(identifier: 'xzxw', externalStaticPropertyReader: () => Int32x4.xzxw),
      'xzxx': VmProxy(identifier: 'xzxx', externalStaticPropertyReader: () => Int32x4.xzxx),
      'xzxy': VmProxy(identifier: 'xzxy', externalStaticPropertyReader: () => Int32x4.xzxy),
      'xzxz': VmProxy(identifier: 'xzxz', externalStaticPropertyReader: () => Int32x4.xzxz),
      'xzyw': VmProxy(identifier: 'xzyw', externalStaticPropertyReader: () => Int32x4.xzyw),
      'xzyx': VmProxy(identifier: 'xzyx', externalStaticPropertyReader: () => Int32x4.xzyx),
      'xzyy': VmProxy(identifier: 'xzyy', externalStaticPropertyReader: () => Int32x4.xzyy),
      'xzyz': VmProxy(identifier: 'xzyz', externalStaticPropertyReader: () => Int32x4.xzyz),
      'xzzw': VmProxy(identifier: 'xzzw', externalStaticPropertyReader: () => Int32x4.xzzw),
      'xzzx': VmProxy(identifier: 'xzzx', externalStaticPropertyReader: () => Int32x4.xzzx),
      'xzzy': VmProxy(identifier: 'xzzy', externalStaticPropertyReader: () => Int32x4.xzzy),
      'xzzz': VmProxy(identifier: 'xzzz', externalStaticPropertyReader: () => Int32x4.xzzz),
      'ywww': VmProxy(identifier: 'ywww', externalStaticPropertyReader: () => Int32x4.ywww),
      'ywwx': VmProxy(identifier: 'ywwx', externalStaticPropertyReader: () => Int32x4.ywwx),
      'ywwy': VmProxy(identifier: 'ywwy', externalStaticPropertyReader: () => Int32x4.ywwy),
      'ywwz': VmProxy(identifier: 'ywwz', externalStaticPropertyReader: () => Int32x4.ywwz),
      'ywxw': VmProxy(identifier: 'ywxw', externalStaticPropertyReader: () => Int32x4.ywxw),
      'ywxx': VmProxy(identifier: 'ywxx', externalStaticPropertyReader: () => Int32x4.ywxx),
      'ywxy': VmProxy(identifier: 'ywxy', externalStaticPropertyReader: () => Int32x4.ywxy),
      'ywxz': VmProxy(identifier: 'ywxz', externalStaticPropertyReader: () => Int32x4.ywxz),
      'ywyw': VmProxy(identifier: 'ywyw', externalStaticPropertyReader: () => Int32x4.ywyw),
      'ywyx': VmProxy(identifier: 'ywyx', externalStaticPropertyReader: () => Int32x4.ywyx),
      'ywyy': VmProxy(identifier: 'ywyy', externalStaticPropertyReader: () => Int32x4.ywyy),
      'ywyz': VmProxy(identifier: 'ywyz', externalStaticPropertyReader: () => Int32x4.ywyz),
      'ywzw': VmProxy(identifier: 'ywzw', externalStaticPropertyReader: () => Int32x4.ywzw),
      'ywzx': VmProxy(identifier: 'ywzx', externalStaticPropertyReader: () => Int32x4.ywzx),
      'ywzy': VmProxy(identifier: 'ywzy', externalStaticPropertyReader: () => Int32x4.ywzy),
      'ywzz': VmProxy(identifier: 'ywzz', externalStaticPropertyReader: () => Int32x4.ywzz),
      'yxww': VmProxy(identifier: 'yxww', externalStaticPropertyReader: () => Int32x4.yxww),
      'yxwx': VmProxy(identifier: 'yxwx', externalStaticPropertyReader: () => Int32x4.yxwx),
      'yxwy': VmProxy(identifier: 'yxwy', externalStaticPropertyReader: () => Int32x4.yxwy),
      'yxwz': VmProxy(identifier: 'yxwz', externalStaticPropertyReader: () => Int32x4.yxwz),
      'yxxw': VmProxy(identifier: 'yxxw', externalStaticPropertyReader: () => Int32x4.yxxw),
      'yxxx': VmProxy(identifier: 'yxxx', externalStaticPropertyReader: () => Int32x4.yxxx),
      'yxxy': VmProxy(identifier: 'yxxy', externalStaticPropertyReader: () => Int32x4.yxxy),
      'yxxz': VmProxy(identifier: 'yxxz', externalStaticPropertyReader: () => Int32x4.yxxz),
      'yxyw': VmProxy(identifier: 'yxyw', externalStaticPropertyReader: () => Int32x4.yxyw),
      'yxyx': VmProxy(identifier: 'yxyx', externalStaticPropertyReader: () => Int32x4.yxyx),
      'yxyy': VmProxy(identifier: 'yxyy', externalStaticPropertyReader: () => Int32x4.yxyy),
      'yxyz': VmProxy(identifier: 'yxyz', externalStaticPropertyReader: () => Int32x4.yxyz),
      'yxzw': VmProxy(identifier: 'yxzw', externalStaticPropertyReader: () => Int32x4.yxzw),
      'yxzx': VmProxy(identifier: 'yxzx', externalStaticPropertyReader: () => Int32x4.yxzx),
      'yxzy': VmProxy(identifier: 'yxzy', externalStaticPropertyReader: () => Int32x4.yxzy),
      'yxzz': VmProxy(identifier: 'yxzz', externalStaticPropertyReader: () => Int32x4.yxzz),
      'yyww': VmProxy(identifier: 'yyww', externalStaticPropertyReader: () => Int32x4.yyww),
      'yywx': VmProxy(identifier: 'yywx', externalStaticPropertyReader: () => Int32x4.yywx),
      'yywy': VmProxy(identifier: 'yywy', externalStaticPropertyReader: () => Int32x4.yywy),
      'yywz': VmProxy(identifier: 'yywz', externalStaticPropertyReader: () => Int32x4.yywz),
      'yyxw': VmProxy(identifier: 'yyxw', externalStaticPropertyReader: () => Int32x4.yyxw),
      'yyxx': VmProxy(identifier: 'yyxx', externalStaticPropertyReader: () => Int32x4.yyxx),
      'yyxy': VmProxy(identifier: 'yyxy', externalStaticPropertyReader: () => Int32x4.yyxy),
      'yyxz': VmProxy(identifier: 'yyxz', externalStaticPropertyReader: () => Int32x4.yyxz),
      'yyyw': VmProxy(identifier: 'yyyw', externalStaticPropertyReader: () => Int32x4.yyyw),
      'yyyx': VmProxy(identifier: 'yyyx', externalStaticPropertyReader: () => Int32x4.yyyx),
      'yyyy': VmProxy(identifier: 'yyyy', externalStaticPropertyReader: () => Int32x4.yyyy),
      'yyyz': VmProxy(identifier: 'yyyz', externalStaticPropertyReader: () => Int32x4.yyyz),
      'yyzw': VmProxy(identifier: 'yyzw', externalStaticPropertyReader: () => Int32x4.yyzw),
      'yyzx': VmProxy(identifier: 'yyzx', externalStaticPropertyReader: () => Int32x4.yyzx),
      'yyzy': VmProxy(identifier: 'yyzy', externalStaticPropertyReader: () => Int32x4.yyzy),
      'yyzz': VmProxy(identifier: 'yyzz', externalStaticPropertyReader: () => Int32x4.yyzz),
      'yzww': VmProxy(identifier: 'yzww', externalStaticPropertyReader: () => Int32x4.yzww),
      'yzwx': VmProxy(identifier: 'yzwx', externalStaticPropertyReader: () => Int32x4.yzwx),
      'yzwy': VmProxy(identifier: 'yzwy', externalStaticPropertyReader: () => Int32x4.yzwy),
      'yzwz': VmProxy(identifier: 'yzwz', externalStaticPropertyReader: () => Int32x4.yzwz),
      'yzxw': VmProxy(identifier: 'yzxw', externalStaticPropertyReader: () => Int32x4.yzxw),
      'yzxx': VmProxy(identifier: 'yzxx', externalStaticPropertyReader: () => Int32x4.yzxx),
      'yzxy': VmProxy(identifier: 'yzxy', externalStaticPropertyReader: () => Int32x4.yzxy),
      'yzxz': VmProxy(identifier: 'yzxz', externalStaticPropertyReader: () => Int32x4.yzxz),
      'yzyw': VmProxy(identifier: 'yzyw', externalStaticPropertyReader: () => Int32x4.yzyw),
      'yzyx': VmProxy(identifier: 'yzyx', externalStaticPropertyReader: () => Int32x4.yzyx),
      'yzyy': VmProxy(identifier: 'yzyy', externalStaticPropertyReader: () => Int32x4.yzyy),
      'yzyz': VmProxy(identifier: 'yzyz', externalStaticPropertyReader: () => Int32x4.yzyz),
      'yzzw': VmProxy(identifier: 'yzzw', externalStaticPropertyReader: () => Int32x4.yzzw),
      'yzzx': VmProxy(identifier: 'yzzx', externalStaticPropertyReader: () => Int32x4.yzzx),
      'yzzy': VmProxy(identifier: 'yzzy', externalStaticPropertyReader: () => Int32x4.yzzy),
      'yzzz': VmProxy(identifier: 'yzzz', externalStaticPropertyReader: () => Int32x4.yzzz),
      'zwww': VmProxy(identifier: 'zwww', externalStaticPropertyReader: () => Int32x4.zwww),
      'zwwx': VmProxy(identifier: 'zwwx', externalStaticPropertyReader: () => Int32x4.zwwx),
      'zwwy': VmProxy(identifier: 'zwwy', externalStaticPropertyReader: () => Int32x4.zwwy),
      'zwwz': VmProxy(identifier: 'zwwz', externalStaticPropertyReader: () => Int32x4.zwwz),
      'zwxw': VmProxy(identifier: 'zwxw', externalStaticPropertyReader: () => Int32x4.zwxw),
      'zwxx': VmProxy(identifier: 'zwxx', externalStaticPropertyReader: () => Int32x4.zwxx),
      'zwxy': VmProxy(identifier: 'zwxy', externalStaticPropertyReader: () => Int32x4.zwxy),
      'zwxz': VmProxy(identifier: 'zwxz', externalStaticPropertyReader: () => Int32x4.zwxz),
      'zwyw': VmProxy(identifier: 'zwyw', externalStaticPropertyReader: () => Int32x4.zwyw),
      'zwyx': VmProxy(identifier: 'zwyx', externalStaticPropertyReader: () => Int32x4.zwyx),
      'zwyy': VmProxy(identifier: 'zwyy', externalStaticPropertyReader: () => Int32x4.zwyy),
      'zwyz': VmProxy(identifier: 'zwyz', externalStaticPropertyReader: () => Int32x4.zwyz),
      'zwzw': VmProxy(identifier: 'zwzw', externalStaticPropertyReader: () => Int32x4.zwzw),
      'zwzx': VmProxy(identifier: 'zwzx', externalStaticPropertyReader: () => Int32x4.zwzx),
      'zwzy': VmProxy(identifier: 'zwzy', externalStaticPropertyReader: () => Int32x4.zwzy),
      'zwzz': VmProxy(identifier: 'zwzz', externalStaticPropertyReader: () => Int32x4.zwzz),
      'zxww': VmProxy(identifier: 'zxww', externalStaticPropertyReader: () => Int32x4.zxww),
      'zxwx': VmProxy(identifier: 'zxwx', externalStaticPropertyReader: () => Int32x4.zxwx),
      'zxwy': VmProxy(identifier: 'zxwy', externalStaticPropertyReader: () => Int32x4.zxwy),
      'zxwz': VmProxy(identifier: 'zxwz', externalStaticPropertyReader: () => Int32x4.zxwz),
      'zxxw': VmProxy(identifier: 'zxxw', externalStaticPropertyReader: () => Int32x4.zxxw),
      'zxxx': VmProxy(identifier: 'zxxx', externalStaticPropertyReader: () => Int32x4.zxxx),
      'zxxy': VmProxy(identifier: 'zxxy', externalStaticPropertyReader: () => Int32x4.zxxy),
      'zxxz': VmProxy(identifier: 'zxxz', externalStaticPropertyReader: () => Int32x4.zxxz),
      'zxyw': VmProxy(identifier: 'zxyw', externalStaticPropertyReader: () => Int32x4.zxyw),
      'zxyx': VmProxy(identifier: 'zxyx', externalStaticPropertyReader: () => Int32x4.zxyx),
      'zxyy': VmProxy(identifier: 'zxyy', externalStaticPropertyReader: () => Int32x4.zxyy),
      'zxyz': VmProxy(identifier: 'zxyz', externalStaticPropertyReader: () => Int32x4.zxyz),
      'zxzw': VmProxy(identifier: 'zxzw', externalStaticPropertyReader: () => Int32x4.zxzw),
      'zxzx': VmProxy(identifier: 'zxzx', externalStaticPropertyReader: () => Int32x4.zxzx),
      'zxzy': VmProxy(identifier: 'zxzy', externalStaticPropertyReader: () => Int32x4.zxzy),
      'zxzz': VmProxy(identifier: 'zxzz', externalStaticPropertyReader: () => Int32x4.zxzz),
      'zyww': VmProxy(identifier: 'zyww', externalStaticPropertyReader: () => Int32x4.zyww),
      'zywx': VmProxy(identifier: 'zywx', externalStaticPropertyReader: () => Int32x4.zywx),
      'zywy': VmProxy(identifier: 'zywy', externalStaticPropertyReader: () => Int32x4.zywy),
      'zywz': VmProxy(identifier: 'zywz', externalStaticPropertyReader: () => Int32x4.zywz),
      'zyxw': VmProxy(identifier: 'zyxw', externalStaticPropertyReader: () => Int32x4.zyxw),
      'zyxx': VmProxy(identifier: 'zyxx', externalStaticPropertyReader: () => Int32x4.zyxx),
      'zyxy': VmProxy(identifier: 'zyxy', externalStaticPropertyReader: () => Int32x4.zyxy),
      'zyxz': VmProxy(identifier: 'zyxz', externalStaticPropertyReader: () => Int32x4.zyxz),
      'zyyw': VmProxy(identifier: 'zyyw', externalStaticPropertyReader: () => Int32x4.zyyw),
      'zyyx': VmProxy(identifier: 'zyyx', externalStaticPropertyReader: () => Int32x4.zyyx),
      'zyyy': VmProxy(identifier: 'zyyy', externalStaticPropertyReader: () => Int32x4.zyyy),
      'zyyz': VmProxy(identifier: 'zyyz', externalStaticPropertyReader: () => Int32x4.zyyz),
      'zyzw': VmProxy(identifier: 'zyzw', externalStaticPropertyReader: () => Int32x4.zyzw),
      'zyzx': VmProxy(identifier: 'zyzx', externalStaticPropertyReader: () => Int32x4.zyzx),
      'zyzy': VmProxy(identifier: 'zyzy', externalStaticPropertyReader: () => Int32x4.zyzy),
      'zyzz': VmProxy(identifier: 'zyzz', externalStaticPropertyReader: () => Int32x4.zyzz),
      'zzww': VmProxy(identifier: 'zzww', externalStaticPropertyReader: () => Int32x4.zzww),
      'zzwx': VmProxy(identifier: 'zzwx', externalStaticPropertyReader: () => Int32x4.zzwx),
      'zzwy': VmProxy(identifier: 'zzwy', externalStaticPropertyReader: () => Int32x4.zzwy),
      'zzwz': VmProxy(identifier: 'zzwz', externalStaticPropertyReader: () => Int32x4.zzwz),
      'zzxw': VmProxy(identifier: 'zzxw', externalStaticPropertyReader: () => Int32x4.zzxw),
      'zzxx': VmProxy(identifier: 'zzxx', externalStaticPropertyReader: () => Int32x4.zzxx),
      'zzxy': VmProxy(identifier: 'zzxy', externalStaticPropertyReader: () => Int32x4.zzxy),
      'zzxz': VmProxy(identifier: 'zzxz', externalStaticPropertyReader: () => Int32x4.zzxz),
      'zzyw': VmProxy(identifier: 'zzyw', externalStaticPropertyReader: () => Int32x4.zzyw),
      'zzyx': VmProxy(identifier: 'zzyx', externalStaticPropertyReader: () => Int32x4.zzyx),
      'zzyy': VmProxy(identifier: 'zzyy', externalStaticPropertyReader: () => Int32x4.zzyy),
      'zzyz': VmProxy(identifier: 'zzyz', externalStaticPropertyReader: () => Int32x4.zzyz),
      'zzzw': VmProxy(identifier: 'zzzw', externalStaticPropertyReader: () => Int32x4.zzzw),
      'zzzx': VmProxy(identifier: 'zzzx', externalStaticPropertyReader: () => Int32x4.zzzx),
      'zzzy': VmProxy(identifier: 'zzzy', externalStaticPropertyReader: () => Int32x4.zzzy),
      'zzzz': VmProxy(identifier: 'zzzz', externalStaticPropertyReader: () => Int32x4.zzzz),
      'flagW': VmProxy(identifier: 'flagW', externalInstancePropertyReader: (Int32x4 instance) => instance.flagW),
      'flagX': VmProxy(identifier: 'flagX', externalInstancePropertyReader: (Int32x4 instance) => instance.flagX),
      'flagY': VmProxy(identifier: 'flagY', externalInstancePropertyReader: (Int32x4 instance) => instance.flagY),
      'flagZ': VmProxy(identifier: 'flagZ', externalInstancePropertyReader: (Int32x4 instance) => instance.flagZ),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Int32x4 instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Int32x4 instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Int32x4 instance) => instance.runtimeType),
      'select': VmProxy(identifier: 'select', externalInstancePropertyReader: (Int32x4 instance) => instance.select),
      'shuffle': VmProxy(identifier: 'shuffle', externalInstancePropertyReader: (Int32x4 instance) => instance.shuffle),
      'shuffleMix': VmProxy(identifier: 'shuffleMix', externalInstancePropertyReader: (Int32x4 instance) => instance.shuffleMix),
      'signMask': VmProxy(identifier: 'signMask', externalInstancePropertyReader: (Int32x4 instance) => instance.signMask),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Int32x4 instance) => instance.toString),
      'w': VmProxy(identifier: 'w', externalInstancePropertyReader: (Int32x4 instance) => instance.w),
      'withFlagW': VmProxy(identifier: 'withFlagW', externalInstancePropertyReader: (Int32x4 instance) => instance.withFlagW),
      'withFlagX': VmProxy(identifier: 'withFlagX', externalInstancePropertyReader: (Int32x4 instance) => instance.withFlagX),
      'withFlagY': VmProxy(identifier: 'withFlagY', externalInstancePropertyReader: (Int32x4 instance) => instance.withFlagY),
      'withFlagZ': VmProxy(identifier: 'withFlagZ', externalInstancePropertyReader: (Int32x4 instance) => instance.withFlagZ),
      'withW': VmProxy(identifier: 'withW', externalInstancePropertyReader: (Int32x4 instance) => instance.withW),
      'withX': VmProxy(identifier: 'withX', externalInstancePropertyReader: (Int32x4 instance) => instance.withX),
      'withY': VmProxy(identifier: 'withY', externalInstancePropertyReader: (Int32x4 instance) => instance.withY),
      'withZ': VmProxy(identifier: 'withZ', externalInstancePropertyReader: (Int32x4 instance) => instance.withZ),
      'x': VmProxy(identifier: 'x', externalInstancePropertyReader: (Int32x4 instance) => instance.x),
      'y': VmProxy(identifier: 'y', externalInstancePropertyReader: (Int32x4 instance) => instance.y),
      'z': VmProxy(identifier: 'z', externalInstancePropertyReader: (Int32x4 instance) => instance.z),
    },
  );

  ///class Int32x4List
  static final classInt32x4List = VmClass<Int32x4List>(
    identifier: 'Int32x4List',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable', 'List', 'TypedData'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Int32x4List.new),
      'fromList': VmProxy(identifier: 'fromList', externalStaticPropertyReader: () => Int32x4List.fromList),
      'sublistView': VmProxy(identifier: 'sublistView', externalStaticPropertyReader: () => Int32x4List.sublistView),
      'view': VmProxy(identifier: 'view', externalStaticPropertyReader: () => Int32x4List.view),
      'bytesPerElement': VmProxy(identifier: 'bytesPerElement', externalStaticPropertyReader: () => Int32x4List.bytesPerElement),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (Int32x4List instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (Int32x4List instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (Int32x4List instance) => instance.any, externalInstanceFunctionCaller: (Int32x4List instance, a0) => instance.any((b0) => a0(b0))),
      'asMap': VmProxy(identifier: 'asMap', externalInstancePropertyReader: (Int32x4List instance) => instance.asMap),
      'buffer': VmProxy(identifier: 'buffer', externalInstancePropertyReader: (Int32x4List instance) => instance.buffer),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (Int32x4List instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (Int32x4List instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (Int32x4List instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (Int32x4List instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (Int32x4List instance) => instance.elementAtOrNull),
      'elementSizeInBytes': VmProxy(identifier: 'elementSizeInBytes', externalInstancePropertyReader: (Int32x4List instance) => instance.elementSizeInBytes),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (Int32x4List instance) => instance.every, externalInstanceFunctionCaller: (Int32x4List instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (Int32x4List instance) => instance.expand, externalInstanceFunctionCaller: (Int32x4List instance, a0) => instance.expand((b0) => a0(b0))),
      'fillRange': VmProxy(identifier: 'fillRange', externalInstancePropertyReader: (Int32x4List instance) => instance.fillRange),
      'first': VmProxy(identifier: 'first', externalInstancePropertyWriter: (Int32x4List instance, value) => instance.first = value, externalInstancePropertyReader: (Int32x4List instance) => instance.first),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (Int32x4List instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (Int32x4List instance) => instance.firstWhere, externalInstanceFunctionCaller: (Int32x4List instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (Int32x4List instance) => instance.fold, externalInstanceFunctionCaller: (Int32x4List instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (Int32x4List instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (Int32x4List instance) => instance.forEach, externalInstanceFunctionCaller: (Int32x4List instance, a0) => instance.forEach((b0) => a0(b0))),
      'getRange': VmProxy(identifier: 'getRange', externalInstancePropertyReader: (Int32x4List instance) => instance.getRange),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Int32x4List instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (Int32x4List instance) => instance.indexed),
      'indexOf': VmProxy(identifier: 'indexOf', externalInstancePropertyReader: (Int32x4List instance) => instance.indexOf),
      'indexWhere': VmProxy(identifier: 'indexWhere', externalInstancePropertyReader: (Int32x4List instance) => instance.indexWhere, externalInstanceFunctionCaller: (Int32x4List instance, a0, [a1 = 0]) => instance.indexWhere((b0) => a0(b0), a1)),
      'insert': VmProxy(identifier: 'insert', externalInstancePropertyReader: (Int32x4List instance) => instance.insert),
      'insertAll': VmProxy(identifier: 'insertAll', externalInstancePropertyReader: (Int32x4List instance) => instance.insertAll),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (Int32x4List instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (Int32x4List instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (Int32x4List instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (Int32x4List instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (Int32x4List instance) => instance.last, externalInstancePropertyWriter: (Int32x4List instance, value) => instance.last = value),
      'lastIndexOf': VmProxy(identifier: 'lastIndexOf', externalInstancePropertyReader: (Int32x4List instance) => instance.lastIndexOf),
      'lastIndexWhere': VmProxy(identifier: 'lastIndexWhere', externalInstancePropertyReader: (Int32x4List instance) => instance.lastIndexWhere, externalInstanceFunctionCaller: (Int32x4List instance, a0, [a1]) => instance.lastIndexWhere((b0) => a0(b0), a1)),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (Int32x4List instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (Int32x4List instance) => instance.lastWhere, externalInstanceFunctionCaller: (Int32x4List instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (Int32x4List instance) => instance.length, externalInstancePropertyWriter: (Int32x4List instance, value) => instance.length = value),
      'lengthInBytes': VmProxy(identifier: 'lengthInBytes', externalInstancePropertyReader: (Int32x4List instance) => instance.lengthInBytes),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (Int32x4List instance) => instance.map, externalInstanceFunctionCaller: (Int32x4List instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (Int32x4List instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Int32x4List instance) => instance.noSuchMethod),
      'offsetInBytes': VmProxy(identifier: 'offsetInBytes', externalInstancePropertyReader: (Int32x4List instance) => instance.offsetInBytes),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (Int32x4List instance) => instance.reduce, externalInstanceFunctionCaller: (Int32x4List instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (Int32x4List instance) => instance.remove),
      'removeAt': VmProxy(identifier: 'removeAt', externalInstancePropertyReader: (Int32x4List instance) => instance.removeAt),
      'removeLast': VmProxy(identifier: 'removeLast', externalInstancePropertyReader: (Int32x4List instance) => instance.removeLast),
      'removeRange': VmProxy(identifier: 'removeRange', externalInstancePropertyReader: (Int32x4List instance) => instance.removeRange),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (Int32x4List instance) => instance.removeWhere, externalInstanceFunctionCaller: (Int32x4List instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'replaceRange': VmProxy(identifier: 'replaceRange', externalInstancePropertyReader: (Int32x4List instance) => instance.replaceRange),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (Int32x4List instance) => instance.retainWhere, externalInstanceFunctionCaller: (Int32x4List instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'reversed': VmProxy(identifier: 'reversed', externalInstancePropertyReader: (Int32x4List instance) => instance.reversed),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Int32x4List instance) => instance.runtimeType),
      'setAll': VmProxy(identifier: 'setAll', externalInstancePropertyReader: (Int32x4List instance) => instance.setAll),
      'setRange': VmProxy(identifier: 'setRange', externalInstancePropertyReader: (Int32x4List instance) => instance.setRange),
      'shuffle': VmProxy(identifier: 'shuffle', externalInstancePropertyReader: (Int32x4List instance) => instance.shuffle),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (Int32x4List instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (Int32x4List instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (Int32x4List instance) => instance.singleWhere, externalInstanceFunctionCaller: (Int32x4List instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (Int32x4List instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (Int32x4List instance) => instance.skipWhile, externalInstanceFunctionCaller: (Int32x4List instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'sort': VmProxy(identifier: 'sort', externalInstancePropertyReader: (Int32x4List instance) => instance.sort, externalInstanceFunctionCaller: (Int32x4List instance, [a0]) => instance.sort(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'sublist': VmProxy(identifier: 'sublist', externalInstancePropertyReader: (Int32x4List instance) => instance.sublist),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (Int32x4List instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (Int32x4List instance) => instance.takeWhile, externalInstanceFunctionCaller: (Int32x4List instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (Int32x4List instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (Int32x4List instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Int32x4List instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (Int32x4List instance) => instance.where, externalInstanceFunctionCaller: (Int32x4List instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (Int32x4List instance) => instance.whereType),
    },
  );

  ///class Int64List
  static final classInt64List = VmClass<Int64List>(
    identifier: 'Int64List',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable', 'List', 'TypedData', '_TypedIntList'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Int64List.new),
      'fromList': VmProxy(identifier: 'fromList', externalStaticPropertyReader: () => Int64List.fromList),
      'sublistView': VmProxy(identifier: 'sublistView', externalStaticPropertyReader: () => Int64List.sublistView),
      'view': VmProxy(identifier: 'view', externalStaticPropertyReader: () => Int64List.view),
      'bytesPerElement': VmProxy(identifier: 'bytesPerElement', externalStaticPropertyReader: () => Int64List.bytesPerElement),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (Int64List instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (Int64List instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (Int64List instance) => instance.any, externalInstanceFunctionCaller: (Int64List instance, a0) => instance.any((b0) => a0(b0))),
      'asMap': VmProxy(identifier: 'asMap', externalInstancePropertyReader: (Int64List instance) => instance.asMap),
      'buffer': VmProxy(identifier: 'buffer', externalInstancePropertyReader: (Int64List instance) => instance.buffer),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (Int64List instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (Int64List instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (Int64List instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (Int64List instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (Int64List instance) => instance.elementAtOrNull),
      'elementSizeInBytes': VmProxy(identifier: 'elementSizeInBytes', externalInstancePropertyReader: (Int64List instance) => instance.elementSizeInBytes),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (Int64List instance) => instance.every, externalInstanceFunctionCaller: (Int64List instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (Int64List instance) => instance.expand, externalInstanceFunctionCaller: (Int64List instance, a0) => instance.expand((b0) => a0(b0))),
      'fillRange': VmProxy(identifier: 'fillRange', externalInstancePropertyReader: (Int64List instance) => instance.fillRange),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (Int64List instance) => instance.first, externalInstancePropertyWriter: (Int64List instance, value) => instance.first = value),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (Int64List instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (Int64List instance) => instance.firstWhere, externalInstanceFunctionCaller: (Int64List instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (Int64List instance) => instance.fold, externalInstanceFunctionCaller: (Int64List instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (Int64List instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (Int64List instance) => instance.forEach, externalInstanceFunctionCaller: (Int64List instance, a0) => instance.forEach((b0) => a0(b0))),
      'getRange': VmProxy(identifier: 'getRange', externalInstancePropertyReader: (Int64List instance) => instance.getRange),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Int64List instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (Int64List instance) => instance.indexed),
      'indexOf': VmProxy(identifier: 'indexOf', externalInstancePropertyReader: (Int64List instance) => instance.indexOf),
      'indexWhere': VmProxy(identifier: 'indexWhere', externalInstancePropertyReader: (Int64List instance) => instance.indexWhere, externalInstanceFunctionCaller: (Int64List instance, a0, [a1 = 0]) => instance.indexWhere((b0) => a0(b0), a1)),
      'insert': VmProxy(identifier: 'insert', externalInstancePropertyReader: (Int64List instance) => instance.insert),
      'insertAll': VmProxy(identifier: 'insertAll', externalInstancePropertyReader: (Int64List instance) => instance.insertAll),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (Int64List instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (Int64List instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (Int64List instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (Int64List instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyWriter: (Int64List instance, value) => instance.last = value, externalInstancePropertyReader: (Int64List instance) => instance.last),
      'lastIndexOf': VmProxy(identifier: 'lastIndexOf', externalInstancePropertyReader: (Int64List instance) => instance.lastIndexOf),
      'lastIndexWhere': VmProxy(identifier: 'lastIndexWhere', externalInstancePropertyReader: (Int64List instance) => instance.lastIndexWhere, externalInstanceFunctionCaller: (Int64List instance, a0, [a1]) => instance.lastIndexWhere((b0) => a0(b0), a1)),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (Int64List instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (Int64List instance) => instance.lastWhere, externalInstanceFunctionCaller: (Int64List instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (Int64List instance) => instance.length, externalInstancePropertyWriter: (Int64List instance, value) => instance.length = value),
      'lengthInBytes': VmProxy(identifier: 'lengthInBytes', externalInstancePropertyReader: (Int64List instance) => instance.lengthInBytes),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (Int64List instance) => instance.map, externalInstanceFunctionCaller: (Int64List instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (Int64List instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Int64List instance) => instance.noSuchMethod),
      'offsetInBytes': VmProxy(identifier: 'offsetInBytes', externalInstancePropertyReader: (Int64List instance) => instance.offsetInBytes),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (Int64List instance) => instance.reduce, externalInstanceFunctionCaller: (Int64List instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (Int64List instance) => instance.remove),
      'removeAt': VmProxy(identifier: 'removeAt', externalInstancePropertyReader: (Int64List instance) => instance.removeAt),
      'removeLast': VmProxy(identifier: 'removeLast', externalInstancePropertyReader: (Int64List instance) => instance.removeLast),
      'removeRange': VmProxy(identifier: 'removeRange', externalInstancePropertyReader: (Int64List instance) => instance.removeRange),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (Int64List instance) => instance.removeWhere, externalInstanceFunctionCaller: (Int64List instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'replaceRange': VmProxy(identifier: 'replaceRange', externalInstancePropertyReader: (Int64List instance) => instance.replaceRange),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (Int64List instance) => instance.retainWhere, externalInstanceFunctionCaller: (Int64List instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'reversed': VmProxy(identifier: 'reversed', externalInstancePropertyReader: (Int64List instance) => instance.reversed),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Int64List instance) => instance.runtimeType),
      'setAll': VmProxy(identifier: 'setAll', externalInstancePropertyReader: (Int64List instance) => instance.setAll),
      'setRange': VmProxy(identifier: 'setRange', externalInstancePropertyReader: (Int64List instance) => instance.setRange),
      'shuffle': VmProxy(identifier: 'shuffle', externalInstancePropertyReader: (Int64List instance) => instance.shuffle),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (Int64List instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (Int64List instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (Int64List instance) => instance.singleWhere, externalInstanceFunctionCaller: (Int64List instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (Int64List instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (Int64List instance) => instance.skipWhile, externalInstanceFunctionCaller: (Int64List instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'sort': VmProxy(identifier: 'sort', externalInstancePropertyReader: (Int64List instance) => instance.sort, externalInstanceFunctionCaller: (Int64List instance, [a0]) => instance.sort(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'sublist': VmProxy(identifier: 'sublist', externalInstancePropertyReader: (Int64List instance) => instance.sublist),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (Int64List instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (Int64List instance) => instance.takeWhile, externalInstanceFunctionCaller: (Int64List instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (Int64List instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (Int64List instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Int64List instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (Int64List instance) => instance.where, externalInstanceFunctionCaller: (Int64List instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (Int64List instance) => instance.whereType),
    },
  );

  ///class Int8List
  static final classInt8List = VmClass<Int8List>(
    identifier: 'Int8List',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable', 'List', 'TypedData', '_TypedIntList'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Int8List.new),
      'fromList': VmProxy(identifier: 'fromList', externalStaticPropertyReader: () => Int8List.fromList),
      'sublistView': VmProxy(identifier: 'sublistView', externalStaticPropertyReader: () => Int8List.sublistView),
      'view': VmProxy(identifier: 'view', externalStaticPropertyReader: () => Int8List.view),
      'bytesPerElement': VmProxy(identifier: 'bytesPerElement', externalStaticPropertyReader: () => Int8List.bytesPerElement),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (Int8List instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (Int8List instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (Int8List instance) => instance.any, externalInstanceFunctionCaller: (Int8List instance, a0) => instance.any((b0) => a0(b0))),
      'asMap': VmProxy(identifier: 'asMap', externalInstancePropertyReader: (Int8List instance) => instance.asMap),
      'buffer': VmProxy(identifier: 'buffer', externalInstancePropertyReader: (Int8List instance) => instance.buffer),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (Int8List instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (Int8List instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (Int8List instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (Int8List instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (Int8List instance) => instance.elementAtOrNull),
      'elementSizeInBytes': VmProxy(identifier: 'elementSizeInBytes', externalInstancePropertyReader: (Int8List instance) => instance.elementSizeInBytes),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (Int8List instance) => instance.every, externalInstanceFunctionCaller: (Int8List instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (Int8List instance) => instance.expand, externalInstanceFunctionCaller: (Int8List instance, a0) => instance.expand((b0) => a0(b0))),
      'fillRange': VmProxy(identifier: 'fillRange', externalInstancePropertyReader: (Int8List instance) => instance.fillRange),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (Int8List instance) => instance.first, externalInstancePropertyWriter: (Int8List instance, value) => instance.first = value),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (Int8List instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (Int8List instance) => instance.firstWhere, externalInstanceFunctionCaller: (Int8List instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (Int8List instance) => instance.fold, externalInstanceFunctionCaller: (Int8List instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (Int8List instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (Int8List instance) => instance.forEach, externalInstanceFunctionCaller: (Int8List instance, a0) => instance.forEach((b0) => a0(b0))),
      'getRange': VmProxy(identifier: 'getRange', externalInstancePropertyReader: (Int8List instance) => instance.getRange),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Int8List instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (Int8List instance) => instance.indexed),
      'indexOf': VmProxy(identifier: 'indexOf', externalInstancePropertyReader: (Int8List instance) => instance.indexOf),
      'indexWhere': VmProxy(identifier: 'indexWhere', externalInstancePropertyReader: (Int8List instance) => instance.indexWhere, externalInstanceFunctionCaller: (Int8List instance, a0, [a1 = 0]) => instance.indexWhere((b0) => a0(b0), a1)),
      'insert': VmProxy(identifier: 'insert', externalInstancePropertyReader: (Int8List instance) => instance.insert),
      'insertAll': VmProxy(identifier: 'insertAll', externalInstancePropertyReader: (Int8List instance) => instance.insertAll),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (Int8List instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (Int8List instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (Int8List instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (Int8List instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyWriter: (Int8List instance, value) => instance.last = value, externalInstancePropertyReader: (Int8List instance) => instance.last),
      'lastIndexOf': VmProxy(identifier: 'lastIndexOf', externalInstancePropertyReader: (Int8List instance) => instance.lastIndexOf),
      'lastIndexWhere': VmProxy(identifier: 'lastIndexWhere', externalInstancePropertyReader: (Int8List instance) => instance.lastIndexWhere, externalInstanceFunctionCaller: (Int8List instance, a0, [a1]) => instance.lastIndexWhere((b0) => a0(b0), a1)),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (Int8List instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (Int8List instance) => instance.lastWhere, externalInstanceFunctionCaller: (Int8List instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (Int8List instance) => instance.length, externalInstancePropertyWriter: (Int8List instance, value) => instance.length = value),
      'lengthInBytes': VmProxy(identifier: 'lengthInBytes', externalInstancePropertyReader: (Int8List instance) => instance.lengthInBytes),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (Int8List instance) => instance.map, externalInstanceFunctionCaller: (Int8List instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (Int8List instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Int8List instance) => instance.noSuchMethod),
      'offsetInBytes': VmProxy(identifier: 'offsetInBytes', externalInstancePropertyReader: (Int8List instance) => instance.offsetInBytes),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (Int8List instance) => instance.reduce, externalInstanceFunctionCaller: (Int8List instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (Int8List instance) => instance.remove),
      'removeAt': VmProxy(identifier: 'removeAt', externalInstancePropertyReader: (Int8List instance) => instance.removeAt),
      'removeLast': VmProxy(identifier: 'removeLast', externalInstancePropertyReader: (Int8List instance) => instance.removeLast),
      'removeRange': VmProxy(identifier: 'removeRange', externalInstancePropertyReader: (Int8List instance) => instance.removeRange),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (Int8List instance) => instance.removeWhere, externalInstanceFunctionCaller: (Int8List instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'replaceRange': VmProxy(identifier: 'replaceRange', externalInstancePropertyReader: (Int8List instance) => instance.replaceRange),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (Int8List instance) => instance.retainWhere, externalInstanceFunctionCaller: (Int8List instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'reversed': VmProxy(identifier: 'reversed', externalInstancePropertyReader: (Int8List instance) => instance.reversed),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Int8List instance) => instance.runtimeType),
      'setAll': VmProxy(identifier: 'setAll', externalInstancePropertyReader: (Int8List instance) => instance.setAll),
      'setRange': VmProxy(identifier: 'setRange', externalInstancePropertyReader: (Int8List instance) => instance.setRange),
      'shuffle': VmProxy(identifier: 'shuffle', externalInstancePropertyReader: (Int8List instance) => instance.shuffle),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (Int8List instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (Int8List instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (Int8List instance) => instance.singleWhere, externalInstanceFunctionCaller: (Int8List instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (Int8List instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (Int8List instance) => instance.skipWhile, externalInstanceFunctionCaller: (Int8List instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'sort': VmProxy(identifier: 'sort', externalInstancePropertyReader: (Int8List instance) => instance.sort, externalInstanceFunctionCaller: (Int8List instance, [a0]) => instance.sort(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'sublist': VmProxy(identifier: 'sublist', externalInstancePropertyReader: (Int8List instance) => instance.sublist),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (Int8List instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (Int8List instance) => instance.takeWhile, externalInstanceFunctionCaller: (Int8List instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (Int8List instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (Int8List instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Int8List instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (Int8List instance) => instance.where, externalInstanceFunctionCaller: (Int8List instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (Int8List instance) => instance.whereType),
    },
  );

  ///class IntegerDivisionByZeroException
  static final classIntegerDivisionByZeroException = VmClass<IntegerDivisionByZeroException>(
    identifier: 'IntegerDivisionByZeroException',
    superclassNames: ['Object', 'Exception', 'Error', 'UnsupportedError'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => IntegerDivisionByZeroException.new),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (IntegerDivisionByZeroException instance) => instance.hashCode),
      'message': VmProxy(identifier: 'message', externalInstancePropertyReader: (IntegerDivisionByZeroException instance) => instance.message),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (IntegerDivisionByZeroException instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (IntegerDivisionByZeroException instance) => instance.runtimeType),
      'stackTrace': VmProxy(identifier: 'stackTrace', externalInstancePropertyReader: (IntegerDivisionByZeroException instance) => instance.stackTrace),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (IntegerDivisionByZeroException instance) => instance.toString),
    },
  );

  ///class InternetAddress
  static final classInternetAddress = VmClass<InternetAddress>(
    identifier: 'InternetAddress',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => InternetAddress.new),
      'fromRawAddress': VmProxy(identifier: 'fromRawAddress', externalStaticPropertyReader: () => InternetAddress.fromRawAddress),
      'anyIPv4': VmProxy(identifier: 'anyIPv4', externalStaticPropertyReader: () => InternetAddress.anyIPv4),
      'anyIPv6': VmProxy(identifier: 'anyIPv6', externalStaticPropertyReader: () => InternetAddress.anyIPv6),
      'lookup': VmProxy(identifier: 'lookup', externalStaticPropertyReader: () => InternetAddress.lookup),
      'loopbackIPv4': VmProxy(identifier: 'loopbackIPv4', externalStaticPropertyReader: () => InternetAddress.loopbackIPv4),
      'loopbackIPv6': VmProxy(identifier: 'loopbackIPv6', externalStaticPropertyReader: () => InternetAddress.loopbackIPv6),
      'tryParse': VmProxy(identifier: 'tryParse', externalStaticPropertyReader: () => InternetAddress.tryParse),
      'address': VmProxy(identifier: 'address', externalInstancePropertyReader: (InternetAddress instance) => instance.address),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (InternetAddress instance) => instance.hashCode),
      'host': VmProxy(identifier: 'host', externalInstancePropertyReader: (InternetAddress instance) => instance.host),
      'isLinkLocal': VmProxy(identifier: 'isLinkLocal', externalInstancePropertyReader: (InternetAddress instance) => instance.isLinkLocal),
      'isLoopback': VmProxy(identifier: 'isLoopback', externalInstancePropertyReader: (InternetAddress instance) => instance.isLoopback),
      'isMulticast': VmProxy(identifier: 'isMulticast', externalInstancePropertyReader: (InternetAddress instance) => instance.isMulticast),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (InternetAddress instance) => instance.noSuchMethod),
      'rawAddress': VmProxy(identifier: 'rawAddress', externalInstancePropertyReader: (InternetAddress instance) => instance.rawAddress),
      'reverse': VmProxy(identifier: 'reverse', externalInstancePropertyReader: (InternetAddress instance) => instance.reverse),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (InternetAddress instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (InternetAddress instance) => instance.toString),
      'type': VmProxy(identifier: 'type', externalInstancePropertyReader: (InternetAddress instance) => instance.type),
    },
  );

  ///class InternetAddressType
  static final classInternetAddressType = VmClass<InternetAddressType>(
    identifier: 'InternetAddressType',
    superclassNames: ['Object'],
    externalProxyMap: {
      'any': VmProxy(identifier: 'any', externalStaticPropertyReader: () => InternetAddressType.any),
      'IPv4': VmProxy(identifier: 'IPv4', externalStaticPropertyReader: () => InternetAddressType.IPv4),
      'IPv6': VmProxy(identifier: 'IPv6', externalStaticPropertyReader: () => InternetAddressType.IPv6),
      'unix': VmProxy(identifier: 'unix', externalStaticPropertyReader: () => InternetAddressType.unix),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (InternetAddressType instance) => instance.hashCode),
      'name': VmProxy(identifier: 'name', externalInstancePropertyReader: (InternetAddressType instance) => instance.name),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (InternetAddressType instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (InternetAddressType instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (InternetAddressType instance) => instance.toString),
    },
  );

  ///class Invocation
  static final classInvocation = VmClass<Invocation>(
    identifier: 'Invocation',
    superclassNames: ['Object'],
    externalProxyMap: {
      'genericMethod': VmProxy(identifier: 'genericMethod', externalStaticPropertyReader: () => Invocation.genericMethod),
      'getter': VmProxy(identifier: 'getter', externalStaticPropertyReader: () => Invocation.getter),
      'method': VmProxy(identifier: 'method', externalStaticPropertyReader: () => Invocation.method),
      'setter': VmProxy(identifier: 'setter', externalStaticPropertyReader: () => Invocation.setter),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Invocation instance) => instance.hashCode),
      'isAccessor': VmProxy(identifier: 'isAccessor', externalInstancePropertyReader: (Invocation instance) => instance.isAccessor),
      'isGetter': VmProxy(identifier: 'isGetter', externalInstancePropertyReader: (Invocation instance) => instance.isGetter),
      'isMethod': VmProxy(identifier: 'isMethod', externalInstancePropertyReader: (Invocation instance) => instance.isMethod),
      'isSetter': VmProxy(identifier: 'isSetter', externalInstancePropertyReader: (Invocation instance) => instance.isSetter),
      'memberName': VmProxy(identifier: 'memberName', externalInstancePropertyReader: (Invocation instance) => instance.memberName),
      'namedArguments': VmProxy(identifier: 'namedArguments', externalInstancePropertyReader: (Invocation instance) => instance.namedArguments),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Invocation instance) => instance.noSuchMethod),
      'positionalArguments': VmProxy(identifier: 'positionalArguments', externalInstancePropertyReader: (Invocation instance) => instance.positionalArguments),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Invocation instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Invocation instance) => instance.toString),
      'typeArguments': VmProxy(identifier: 'typeArguments', externalInstancePropertyReader: (Invocation instance) => instance.typeArguments),
    },
  );

  ///class IOException
  static final classIOException = VmClass<IOException>(
    identifier: 'IOException',
    superclassNames: ['Object', 'Exception'],
    externalProxyMap: {
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (IOException instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (IOException instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (IOException instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (IOException instance) => instance.toString),
    },
  );

  ///class IOOverrides
  static final classIOOverrides = VmClass<IOOverrides>(
    identifier: 'IOOverrides',
    superclassNames: ['Object'],
    externalProxyMap: {
      'current': VmProxy(identifier: 'current', externalStaticPropertyReader: () => IOOverrides.current),
      'global': VmProxy(identifier: 'global', externalStaticPropertyWriter: (value) => IOOverrides.global = value),
      'runWithIOOverrides': VmProxy(identifier: 'runWithIOOverrides', externalStaticPropertyReader: () => IOOverrides.runWithIOOverrides, externalStaticFunctionCaller: (a0, a1) => IOOverrides.runWithIOOverrides(() => a0(), a1)),
      'runZoned': VmProxy(identifier: 'runZoned', externalStaticPropertyReader: () => IOOverrides.runZoned, externalStaticFunctionCaller: (a0, {createDirectory, getCurrentDirectory, setCurrentDirectory, getSystemTempDirectory, createFile, stat, statSync, fseIdentical, fseIdenticalSync, fseGetType, fseGetTypeSync, fsWatch, fsWatchIsSupported, createLink, socketConnect, socketStartConnect, serverSocketBind, stdin, stdout, stderr}) => IOOverrides.runZoned(() => a0(), createDirectory: createDirectory == null ? null : (b0) => createDirectory(b0), getCurrentDirectory: getCurrentDirectory == null ? null : () => getCurrentDirectory(), setCurrentDirectory: setCurrentDirectory == null ? null : (b0) => setCurrentDirectory(b0), getSystemTempDirectory: getSystemTempDirectory == null ? null : () => getSystemTempDirectory(), createFile: createFile == null ? null : (b0) => createFile(b0), stat: stat == null ? null : (b0) => stat(b0), statSync: statSync == null ? null : (b0) => statSync(b0), fseIdentical: fseIdentical == null ? null : (b0, b1) => fseIdentical(b0, b1), fseIdenticalSync: fseIdenticalSync == null ? null : (b0, b1) => fseIdenticalSync(b0, b1), fseGetType: fseGetType == null ? null : (b0, b1) => fseGetType(b0, b1), fseGetTypeSync: fseGetTypeSync == null ? null : (b0, b1) => fseGetTypeSync(b0, b1), fsWatch: fsWatch == null ? null : (b0, b1, b2) => fsWatch(b0, b1, b2), fsWatchIsSupported: fsWatchIsSupported == null ? null : () => fsWatchIsSupported(), createLink: createLink == null ? null : (b0) => createLink(b0), socketConnect: socketConnect == null ? null : (b0, b1, {sourceAddress, sourcePort = 0, timeout}) => socketConnect(b0, b1, sourceAddress: sourceAddress, sourcePort: sourcePort, timeout: timeout), socketStartConnect: socketStartConnect == null ? null : (b0, b1, {sourceAddress, sourcePort = 0}) => socketStartConnect(b0, b1, sourceAddress: sourceAddress, sourcePort: sourcePort), serverSocketBind: serverSocketBind == null ? null : (b0, b1, {backlog = 0, v6Only = false, shared = false}) => serverSocketBind(b0, b1, backlog: backlog, v6Only: v6Only, shared: shared), stdin: stdin == null ? null : () => stdin(), stdout: stdout == null ? null : () => stdout(), stderr: stderr == null ? null : () => stderr())),
      'createDirectory': VmProxy(identifier: 'createDirectory', externalInstancePropertyReader: (IOOverrides instance) => instance.createDirectory),
      'createFile': VmProxy(identifier: 'createFile', externalInstancePropertyReader: (IOOverrides instance) => instance.createFile),
      'createLink': VmProxy(identifier: 'createLink', externalInstancePropertyReader: (IOOverrides instance) => instance.createLink),
      'fseGetType': VmProxy(identifier: 'fseGetType', externalInstancePropertyReader: (IOOverrides instance) => instance.fseGetType),
      'fseGetTypeSync': VmProxy(identifier: 'fseGetTypeSync', externalInstancePropertyReader: (IOOverrides instance) => instance.fseGetTypeSync),
      'fseIdentical': VmProxy(identifier: 'fseIdentical', externalInstancePropertyReader: (IOOverrides instance) => instance.fseIdentical),
      'fseIdenticalSync': VmProxy(identifier: 'fseIdenticalSync', externalInstancePropertyReader: (IOOverrides instance) => instance.fseIdenticalSync),
      'fsWatch': VmProxy(identifier: 'fsWatch', externalInstancePropertyReader: (IOOverrides instance) => instance.fsWatch),
      'fsWatchIsSupported': VmProxy(identifier: 'fsWatchIsSupported', externalInstancePropertyReader: (IOOverrides instance) => instance.fsWatchIsSupported),
      'getCurrentDirectory': VmProxy(identifier: 'getCurrentDirectory', externalInstancePropertyReader: (IOOverrides instance) => instance.getCurrentDirectory),
      'getSystemTempDirectory': VmProxy(identifier: 'getSystemTempDirectory', externalInstancePropertyReader: (IOOverrides instance) => instance.getSystemTempDirectory),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (IOOverrides instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (IOOverrides instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (IOOverrides instance) => instance.runtimeType),
      'serverSocketBind': VmProxy(identifier: 'serverSocketBind', externalInstancePropertyReader: (IOOverrides instance) => instance.serverSocketBind),
      'setCurrentDirectory': VmProxy(identifier: 'setCurrentDirectory', externalInstancePropertyReader: (IOOverrides instance) => instance.setCurrentDirectory),
      'socketConnect': VmProxy(identifier: 'socketConnect', externalInstancePropertyReader: (IOOverrides instance) => instance.socketConnect),
      'socketStartConnect': VmProxy(identifier: 'socketStartConnect', externalInstancePropertyReader: (IOOverrides instance) => instance.socketStartConnect),
      'stat': VmProxy(identifier: 'stat', externalInstancePropertyReader: (IOOverrides instance) => instance.stat),
      'statSync': VmProxy(identifier: 'statSync', externalInstancePropertyReader: (IOOverrides instance) => instance.statSync),
      'stderr': VmProxy(identifier: 'stderr', externalInstancePropertyReader: (IOOverrides instance) => instance.stderr),
      'stdin': VmProxy(identifier: 'stdin', externalInstancePropertyReader: (IOOverrides instance) => instance.stdin),
      'stdout': VmProxy(identifier: 'stdout', externalInstancePropertyReader: (IOOverrides instance) => instance.stdout),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (IOOverrides instance) => instance.toString),
    },
  );

  ///class IOSink
  static final classIOSink = VmClass<IOSink>(
    identifier: 'IOSink',
    superclassNames: ['Object', 'Sink', 'EventSink', 'StreamConsumer', 'StreamSink', 'StringSink'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => IOSink.new),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (IOSink instance) => instance.add),
      'addError': VmProxy(identifier: 'addError', externalInstancePropertyReader: (IOSink instance) => instance.addError),
      'addStream': VmProxy(identifier: 'addStream', externalInstancePropertyReader: (IOSink instance) => instance.addStream),
      'close': VmProxy(identifier: 'close', externalInstancePropertyReader: (IOSink instance) => instance.close),
      'done': VmProxy(identifier: 'done', externalInstancePropertyReader: (IOSink instance) => instance.done),
      'encoding': VmProxy(identifier: 'encoding', externalInstancePropertyReader: (IOSink instance) => instance.encoding, externalInstancePropertyWriter: (IOSink instance, value) => instance.encoding = value),
      'flush': VmProxy(identifier: 'flush', externalInstancePropertyReader: (IOSink instance) => instance.flush),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (IOSink instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (IOSink instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (IOSink instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (IOSink instance) => instance.toString),
      'write': VmProxy(identifier: 'write', externalInstancePropertyReader: (IOSink instance) => instance.write),
      'writeAll': VmProxy(identifier: 'writeAll', externalInstancePropertyReader: (IOSink instance) => instance.writeAll),
      'writeCharCode': VmProxy(identifier: 'writeCharCode', externalInstancePropertyReader: (IOSink instance) => instance.writeCharCode),
      'writeln': VmProxy(identifier: 'writeln', externalInstancePropertyReader: (IOSink instance) => instance.writeln),
    },
  );

  ///class Isolate
  static final classIsolate = VmClass<Isolate>(
    identifier: 'Isolate',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Isolate.new),
      'beforeNextEvent': VmProxy(identifier: 'beforeNextEvent', externalStaticPropertyReader: () => Isolate.beforeNextEvent),
      'current': VmProxy(identifier: 'current', externalStaticPropertyReader: () => Isolate.current),
      'exit': VmProxy(identifier: 'exit', externalStaticPropertyReader: () => Isolate.exit),
      'immediate': VmProxy(identifier: 'immediate', externalStaticPropertyReader: () => Isolate.immediate),
      'packageConfig': VmProxy(identifier: 'packageConfig', externalStaticPropertyReader: () => Isolate.packageConfig),
      'resolvePackageUri': VmProxy(identifier: 'resolvePackageUri', externalStaticPropertyReader: () => Isolate.resolvePackageUri),
      'run': VmProxy(identifier: 'run', externalStaticPropertyReader: () => Isolate.run, externalStaticFunctionCaller: (a0, {debugName}) => Isolate.run(() => a0(), debugName: debugName)),
      'spawn': VmProxy(identifier: 'spawn', externalStaticPropertyReader: () => Isolate.spawn, externalStaticFunctionCaller: (a0, a1, {paused = false, errorsAreFatal = true, onExit, onError, debugName}) => Isolate.spawn((b0) => a0(b0), a1, paused: paused, errorsAreFatal: errorsAreFatal, onExit: onExit, onError: onError, debugName: debugName)),
      'spawnUri': VmProxy(identifier: 'spawnUri', externalStaticPropertyReader: () => Isolate.spawnUri),
      'addErrorListener': VmProxy(identifier: 'addErrorListener', externalInstancePropertyReader: (Isolate instance) => instance.addErrorListener),
      'addOnExitListener': VmProxy(identifier: 'addOnExitListener', externalInstancePropertyReader: (Isolate instance) => instance.addOnExitListener),
      'controlPort': VmProxy(identifier: 'controlPort', externalInstancePropertyReader: (Isolate instance) => instance.controlPort),
      'debugName': VmProxy(identifier: 'debugName', externalInstancePropertyReader: (Isolate instance) => instance.debugName),
      'errors': VmProxy(identifier: 'errors', externalInstancePropertyReader: (Isolate instance) => instance.errors),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Isolate instance) => instance.hashCode),
      'kill': VmProxy(identifier: 'kill', externalInstancePropertyReader: (Isolate instance) => instance.kill),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Isolate instance) => instance.noSuchMethod),
      'pause': VmProxy(identifier: 'pause', externalInstancePropertyReader: (Isolate instance) => instance.pause),
      'pauseCapability': VmProxy(identifier: 'pauseCapability', externalInstancePropertyReader: (Isolate instance) => instance.pauseCapability),
      'ping': VmProxy(identifier: 'ping', externalInstancePropertyReader: (Isolate instance) => instance.ping),
      'removeErrorListener': VmProxy(identifier: 'removeErrorListener', externalInstancePropertyReader: (Isolate instance) => instance.removeErrorListener),
      'removeOnExitListener': VmProxy(identifier: 'removeOnExitListener', externalInstancePropertyReader: (Isolate instance) => instance.removeOnExitListener),
      'resume': VmProxy(identifier: 'resume', externalInstancePropertyReader: (Isolate instance) => instance.resume),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Isolate instance) => instance.runtimeType),
      'setErrorsFatal': VmProxy(identifier: 'setErrorsFatal', externalInstancePropertyReader: (Isolate instance) => instance.setErrorsFatal),
      'terminateCapability': VmProxy(identifier: 'terminateCapability', externalInstancePropertyReader: (Isolate instance) => instance.terminateCapability),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Isolate instance) => instance.toString),
    },
  );

  ///class IsolateSpawnException
  static final classIsolateSpawnException = VmClass<IsolateSpawnException>(
    identifier: 'IsolateSpawnException',
    superclassNames: ['Object', 'Exception'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => IsolateSpawnException.new),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (IsolateSpawnException instance) => instance.hashCode),
      'message': VmProxy(identifier: 'message', externalInstancePropertyReader: (IsolateSpawnException instance) => instance.message),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (IsolateSpawnException instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (IsolateSpawnException instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (IsolateSpawnException instance) => instance.toString),
    },
  );

  ///class Iterable
  static final classIterable = VmClass<Iterable>(
    identifier: 'Iterable',
    superclassNames: ['Object'],
    externalProxyMap: {
      'empty': VmProxy(identifier: 'empty', externalStaticPropertyReader: () => Iterable.empty),
      'generate': VmProxy(identifier: 'generate', externalStaticPropertyReader: () => Iterable.generate, externalStaticFunctionCaller: (a0, [a1]) => Iterable.generate(a0, a1 == null ? null : (b0) => a1(b0))),
      'castFrom': VmProxy(identifier: 'castFrom', externalStaticPropertyReader: () => Iterable.castFrom),
      'iterableToFullString': VmProxy(identifier: 'iterableToFullString', externalStaticPropertyReader: () => Iterable.iterableToFullString),
      'iterableToShortString': VmProxy(identifier: 'iterableToShortString', externalStaticPropertyReader: () => Iterable.iterableToShortString),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (Iterable instance) => instance.any, externalInstanceFunctionCaller: (Iterable instance, a0) => instance.any((b0) => a0(b0))),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (Iterable instance) => instance.cast),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (Iterable instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (Iterable instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (Iterable instance) => instance.elementAtOrNull),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (Iterable instance) => instance.every, externalInstanceFunctionCaller: (Iterable instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (Iterable instance) => instance.expand, externalInstanceFunctionCaller: (Iterable instance, a0) => instance.expand((b0) => a0(b0))),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (Iterable instance) => instance.first),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (Iterable instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (Iterable instance) => instance.firstWhere, externalInstanceFunctionCaller: (Iterable instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (Iterable instance) => instance.fold, externalInstanceFunctionCaller: (Iterable instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (Iterable instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (Iterable instance) => instance.forEach, externalInstanceFunctionCaller: (Iterable instance, a0) => instance.forEach((b0) => a0(b0))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Iterable instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (Iterable instance) => instance.indexed),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (Iterable instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (Iterable instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (Iterable instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (Iterable instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (Iterable instance) => instance.last),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (Iterable instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (Iterable instance) => instance.lastWhere, externalInstanceFunctionCaller: (Iterable instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (Iterable instance) => instance.length),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (Iterable instance) => instance.map, externalInstanceFunctionCaller: (Iterable instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (Iterable instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Iterable instance) => instance.noSuchMethod),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (Iterable instance) => instance.reduce, externalInstanceFunctionCaller: (Iterable instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Iterable instance) => instance.runtimeType),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (Iterable instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (Iterable instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (Iterable instance) => instance.singleWhere, externalInstanceFunctionCaller: (Iterable instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (Iterable instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (Iterable instance) => instance.skipWhile, externalInstanceFunctionCaller: (Iterable instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (Iterable instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (Iterable instance) => instance.takeWhile, externalInstanceFunctionCaller: (Iterable instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (Iterable instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (Iterable instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Iterable instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (Iterable instance) => instance.where, externalInstanceFunctionCaller: (Iterable instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (Iterable instance) => instance.whereType),
    },
  );

  ///class IterableBase
  static final classIterableBase = VmClass<IterableBase>(
    identifier: 'IterableBase',
    superclassNames: ['Object', 'Iterable'],
    externalProxyMap: {
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (IterableBase instance) => instance.any, externalInstanceFunctionCaller: (IterableBase instance, a0) => instance.any((b0) => a0(b0))),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (IterableBase instance) => instance.cast),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (IterableBase instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (IterableBase instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (IterableBase instance) => instance.elementAtOrNull),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (IterableBase instance) => instance.every, externalInstanceFunctionCaller: (IterableBase instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (IterableBase instance) => instance.expand, externalInstanceFunctionCaller: (IterableBase instance, a0) => instance.expand((b0) => a0(b0))),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (IterableBase instance) => instance.first),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (IterableBase instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (IterableBase instance) => instance.firstWhere, externalInstanceFunctionCaller: (IterableBase instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (IterableBase instance) => instance.fold, externalInstanceFunctionCaller: (IterableBase instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (IterableBase instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (IterableBase instance) => instance.forEach, externalInstanceFunctionCaller: (IterableBase instance, a0) => instance.forEach((b0) => a0(b0))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (IterableBase instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (IterableBase instance) => instance.indexed),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (IterableBase instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (IterableBase instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (IterableBase instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (IterableBase instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (IterableBase instance) => instance.last),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (IterableBase instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (IterableBase instance) => instance.lastWhere, externalInstanceFunctionCaller: (IterableBase instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (IterableBase instance) => instance.length),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (IterableBase instance) => instance.map, externalInstanceFunctionCaller: (IterableBase instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (IterableBase instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (IterableBase instance) => instance.noSuchMethod),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (IterableBase instance) => instance.reduce, externalInstanceFunctionCaller: (IterableBase instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (IterableBase instance) => instance.runtimeType),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (IterableBase instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (IterableBase instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (IterableBase instance) => instance.singleWhere, externalInstanceFunctionCaller: (IterableBase instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (IterableBase instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (IterableBase instance) => instance.skipWhile, externalInstanceFunctionCaller: (IterableBase instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (IterableBase instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (IterableBase instance) => instance.takeWhile, externalInstanceFunctionCaller: (IterableBase instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (IterableBase instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (IterableBase instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (IterableBase instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (IterableBase instance) => instance.where, externalInstanceFunctionCaller: (IterableBase instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (IterableBase instance) => instance.whereType),
    },
  );

  ///class IterableMixin
  static final classIterableMixin = VmClass<IterableMixin>(
    identifier: 'IterableMixin',
    superclassNames: ['Object', 'Iterable'],
    externalProxyMap: {
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (IterableMixin instance) => instance.any, externalInstanceFunctionCaller: (IterableMixin instance, a0) => instance.any((b0) => a0(b0))),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (IterableMixin instance) => instance.cast),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (IterableMixin instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (IterableMixin instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (IterableMixin instance) => instance.elementAtOrNull),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (IterableMixin instance) => instance.every, externalInstanceFunctionCaller: (IterableMixin instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (IterableMixin instance) => instance.expand, externalInstanceFunctionCaller: (IterableMixin instance, a0) => instance.expand((b0) => a0(b0))),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (IterableMixin instance) => instance.first),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (IterableMixin instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (IterableMixin instance) => instance.firstWhere, externalInstanceFunctionCaller: (IterableMixin instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (IterableMixin instance) => instance.fold, externalInstanceFunctionCaller: (IterableMixin instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (IterableMixin instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (IterableMixin instance) => instance.forEach, externalInstanceFunctionCaller: (IterableMixin instance, a0) => instance.forEach((b0) => a0(b0))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (IterableMixin instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (IterableMixin instance) => instance.indexed),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (IterableMixin instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (IterableMixin instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (IterableMixin instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (IterableMixin instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (IterableMixin instance) => instance.last),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (IterableMixin instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (IterableMixin instance) => instance.lastWhere, externalInstanceFunctionCaller: (IterableMixin instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (IterableMixin instance) => instance.length),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (IterableMixin instance) => instance.map, externalInstanceFunctionCaller: (IterableMixin instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (IterableMixin instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (IterableMixin instance) => instance.noSuchMethod),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (IterableMixin instance) => instance.reduce, externalInstanceFunctionCaller: (IterableMixin instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (IterableMixin instance) => instance.runtimeType),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (IterableMixin instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (IterableMixin instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (IterableMixin instance) => instance.singleWhere, externalInstanceFunctionCaller: (IterableMixin instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (IterableMixin instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (IterableMixin instance) => instance.skipWhile, externalInstanceFunctionCaller: (IterableMixin instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (IterableMixin instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (IterableMixin instance) => instance.takeWhile, externalInstanceFunctionCaller: (IterableMixin instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (IterableMixin instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (IterableMixin instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (IterableMixin instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (IterableMixin instance) => instance.where, externalInstanceFunctionCaller: (IterableMixin instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (IterableMixin instance) => instance.whereType),
    },
  );

  ///class Iterator
  static final classIterator = VmClass<Iterator>(
    identifier: 'Iterator',
    superclassNames: ['Object'],
    externalProxyMap: {
      'current': VmProxy(identifier: 'current', externalInstancePropertyReader: (Iterator instance) => instance.current),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Iterator instance) => instance.hashCode),
      'moveNext': VmProxy(identifier: 'moveNext', externalInstancePropertyReader: (Iterator instance) => instance.moveNext),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Iterator instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Iterator instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Iterator instance) => instance.toString),
    },
  );

  ///class JsonCodec
  static final classJsonCodec = VmClass<JsonCodec>(
    identifier: 'JsonCodec',
    superclassNames: ['Object', 'Codec'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => JsonCodec.new, externalStaticFunctionCaller: ({reviver, toEncodable}) => JsonCodec.new(reviver: reviver == null ? null : (b0, b1) => reviver(b0, b1), toEncodable: toEncodable == null ? null : (b0) => toEncodable(b0))),
      'withReviver': VmProxy(identifier: 'withReviver', externalStaticPropertyReader: () => JsonCodec.withReviver, externalStaticFunctionCaller: (a0) => JsonCodec.withReviver((b0, b1) => a0(b0, b1))),
      'decode': VmProxy(identifier: 'decode', externalInstancePropertyReader: (JsonCodec instance) => instance.decode, externalInstanceFunctionCaller: (JsonCodec instance, a0, {reviver}) => instance.decode(a0, reviver: reviver == null ? null : (b0, b1) => reviver(b0, b1))),
      'decoder': VmProxy(identifier: 'decoder', externalInstancePropertyReader: (JsonCodec instance) => instance.decoder),
      'encode': VmProxy(identifier: 'encode', externalInstancePropertyReader: (JsonCodec instance) => instance.encode, externalInstanceFunctionCaller: (JsonCodec instance, a0, {toEncodable}) => instance.encode(a0, toEncodable: toEncodable == null ? null : (b0) => toEncodable(b0))),
      'encoder': VmProxy(identifier: 'encoder', externalInstancePropertyReader: (JsonCodec instance) => instance.encoder),
      'fuse': VmProxy(identifier: 'fuse', externalInstancePropertyReader: (JsonCodec instance) => instance.fuse),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (JsonCodec instance) => instance.hashCode),
      'inverted': VmProxy(identifier: 'inverted', externalInstancePropertyReader: (JsonCodec instance) => instance.inverted),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (JsonCodec instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (JsonCodec instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (JsonCodec instance) => instance.toString),
    },
  );

  ///class JsonCyclicError
  static final classJsonCyclicError = VmClass<JsonCyclicError>(
    identifier: 'JsonCyclicError',
    superclassNames: ['Object', 'Error', 'JsonUnsupportedObjectError'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => JsonCyclicError.new),
      'cause': VmProxy(identifier: 'cause', externalInstancePropertyReader: (JsonCyclicError instance) => instance.cause),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (JsonCyclicError instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (JsonCyclicError instance) => instance.noSuchMethod),
      'partialResult': VmProxy(identifier: 'partialResult', externalInstancePropertyReader: (JsonCyclicError instance) => instance.partialResult),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (JsonCyclicError instance) => instance.runtimeType),
      'stackTrace': VmProxy(identifier: 'stackTrace', externalInstancePropertyReader: (JsonCyclicError instance) => instance.stackTrace),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (JsonCyclicError instance) => instance.toString),
      'unsupportedObject': VmProxy(identifier: 'unsupportedObject', externalInstancePropertyReader: (JsonCyclicError instance) => instance.unsupportedObject),
    },
  );

  ///class JsonDecoder
  static final classJsonDecoder = VmClass<JsonDecoder>(
    identifier: 'JsonDecoder',
    superclassNames: ['Object', 'StreamTransformer', 'StreamTransformerBase', 'Converter'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => JsonDecoder.new, externalStaticFunctionCaller: ([a0]) => JsonDecoder.new(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'bind': VmProxy(identifier: 'bind', externalInstancePropertyReader: (JsonDecoder instance) => instance.bind),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (JsonDecoder instance) => instance.cast),
      'convert': VmProxy(identifier: 'convert', externalInstancePropertyReader: (JsonDecoder instance) => instance.convert),
      'fuse': VmProxy(identifier: 'fuse', externalInstancePropertyReader: (JsonDecoder instance) => instance.fuse),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (JsonDecoder instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (JsonDecoder instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (JsonDecoder instance) => instance.runtimeType),
      'startChunkedConversion': VmProxy(identifier: 'startChunkedConversion', externalInstancePropertyReader: (JsonDecoder instance) => instance.startChunkedConversion),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (JsonDecoder instance) => instance.toString),
    },
  );

  ///class JsonEncoder
  static final classJsonEncoder = VmClass<JsonEncoder>(
    identifier: 'JsonEncoder',
    superclassNames: ['Object', 'StreamTransformer', 'StreamTransformerBase', 'Converter'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => JsonEncoder.new, externalStaticFunctionCaller: ([a0]) => JsonEncoder.new(a0 == null ? null : (b0) => a0(b0))),
      'withIndent': VmProxy(identifier: 'withIndent', externalStaticPropertyReader: () => JsonEncoder.withIndent, externalStaticFunctionCaller: (a0, [a1]) => JsonEncoder.withIndent(a0, a1 == null ? null : (b0) => a1(b0))),
      'bind': VmProxy(identifier: 'bind', externalInstancePropertyReader: (JsonEncoder instance) => instance.bind),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (JsonEncoder instance) => instance.cast),
      'convert': VmProxy(identifier: 'convert', externalInstancePropertyReader: (JsonEncoder instance) => instance.convert),
      'fuse': VmProxy(identifier: 'fuse', externalInstancePropertyReader: (JsonEncoder instance) => instance.fuse),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (JsonEncoder instance) => instance.hashCode),
      'indent': VmProxy(identifier: 'indent', externalInstancePropertyReader: (JsonEncoder instance) => instance.indent),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (JsonEncoder instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (JsonEncoder instance) => instance.runtimeType),
      'startChunkedConversion': VmProxy(identifier: 'startChunkedConversion', externalInstancePropertyReader: (JsonEncoder instance) => instance.startChunkedConversion),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (JsonEncoder instance) => instance.toString),
    },
  );

  ///class JsonUnsupportedObjectError
  static final classJsonUnsupportedObjectError = VmClass<JsonUnsupportedObjectError>(
    identifier: 'JsonUnsupportedObjectError',
    superclassNames: ['Object', 'Error'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => JsonUnsupportedObjectError.new),
      'cause': VmProxy(identifier: 'cause', externalInstancePropertyReader: (JsonUnsupportedObjectError instance) => instance.cause),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (JsonUnsupportedObjectError instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (JsonUnsupportedObjectError instance) => instance.noSuchMethod),
      'partialResult': VmProxy(identifier: 'partialResult', externalInstancePropertyReader: (JsonUnsupportedObjectError instance) => instance.partialResult),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (JsonUnsupportedObjectError instance) => instance.runtimeType),
      'stackTrace': VmProxy(identifier: 'stackTrace', externalInstancePropertyReader: (JsonUnsupportedObjectError instance) => instance.stackTrace),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (JsonUnsupportedObjectError instance) => instance.toString),
      'unsupportedObject': VmProxy(identifier: 'unsupportedObject', externalInstancePropertyReader: (JsonUnsupportedObjectError instance) => instance.unsupportedObject),
    },
  );

  ///class JsonUtf8Encoder
  static final classJsonUtf8Encoder = VmClass<JsonUtf8Encoder>(
    identifier: 'JsonUtf8Encoder',
    superclassNames: ['Object', 'StreamTransformer', 'StreamTransformerBase', 'Converter'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => JsonUtf8Encoder.new, externalStaticFunctionCaller: ([a0, a1, a2]) => JsonUtf8Encoder.new(a0, a1 == null ? null : (b0) => a1(b0), a2)),
      'bind': VmProxy(identifier: 'bind', externalInstancePropertyReader: (JsonUtf8Encoder instance) => instance.bind),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (JsonUtf8Encoder instance) => instance.cast),
      'convert': VmProxy(identifier: 'convert', externalInstancePropertyReader: (JsonUtf8Encoder instance) => instance.convert),
      'fuse': VmProxy(identifier: 'fuse', externalInstancePropertyReader: (JsonUtf8Encoder instance) => instance.fuse),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (JsonUtf8Encoder instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (JsonUtf8Encoder instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (JsonUtf8Encoder instance) => instance.runtimeType),
      'startChunkedConversion': VmProxy(identifier: 'startChunkedConversion', externalInstancePropertyReader: (JsonUtf8Encoder instance) => instance.startChunkedConversion),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (JsonUtf8Encoder instance) => instance.toString),
    },
  );

  ///class Latin1Codec
  static final classLatin1Codec = VmClass<Latin1Codec>(
    identifier: 'Latin1Codec',
    superclassNames: ['Object', 'Codec', 'Encoding'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Latin1Codec.new),
      'decode': VmProxy(identifier: 'decode', externalInstancePropertyReader: (Latin1Codec instance) => instance.decode),
      'decoder': VmProxy(identifier: 'decoder', externalInstancePropertyReader: (Latin1Codec instance) => instance.decoder),
      'decodeStream': VmProxy(identifier: 'decodeStream', externalInstancePropertyReader: (Latin1Codec instance) => instance.decodeStream),
      'encode': VmProxy(identifier: 'encode', externalInstancePropertyReader: (Latin1Codec instance) => instance.encode),
      'encoder': VmProxy(identifier: 'encoder', externalInstancePropertyReader: (Latin1Codec instance) => instance.encoder),
      'fuse': VmProxy(identifier: 'fuse', externalInstancePropertyReader: (Latin1Codec instance) => instance.fuse),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Latin1Codec instance) => instance.hashCode),
      'inverted': VmProxy(identifier: 'inverted', externalInstancePropertyReader: (Latin1Codec instance) => instance.inverted),
      'name': VmProxy(identifier: 'name', externalInstancePropertyReader: (Latin1Codec instance) => instance.name),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Latin1Codec instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Latin1Codec instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Latin1Codec instance) => instance.toString),
    },
  );

  ///class Latin1Decoder
  static final classLatin1Decoder = VmClass<Latin1Decoder>(
    identifier: 'Latin1Decoder',
    superclassNames: ['Object', 'StreamTransformer', 'StreamTransformerBase', 'Converter', '_UnicodeSubsetDecoder'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Latin1Decoder.new),
      'bind': VmProxy(identifier: 'bind', externalInstancePropertyReader: (Latin1Decoder instance) => instance.bind),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (Latin1Decoder instance) => instance.cast),
      'convert': VmProxy(identifier: 'convert', externalInstancePropertyReader: (Latin1Decoder instance) => instance.convert),
      'fuse': VmProxy(identifier: 'fuse', externalInstancePropertyReader: (Latin1Decoder instance) => instance.fuse),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Latin1Decoder instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Latin1Decoder instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Latin1Decoder instance) => instance.runtimeType),
      'startChunkedConversion': VmProxy(identifier: 'startChunkedConversion', externalInstancePropertyReader: (Latin1Decoder instance) => instance.startChunkedConversion),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Latin1Decoder instance) => instance.toString),
    },
  );

  ///class Latin1Encoder
  static final classLatin1Encoder = VmClass<Latin1Encoder>(
    identifier: 'Latin1Encoder',
    superclassNames: ['Object', 'StreamTransformer', 'StreamTransformerBase', 'Converter', '_UnicodeSubsetEncoder'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Latin1Encoder.new),
      'bind': VmProxy(identifier: 'bind', externalInstancePropertyReader: (Latin1Encoder instance) => instance.bind),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (Latin1Encoder instance) => instance.cast),
      'convert': VmProxy(identifier: 'convert', externalInstancePropertyReader: (Latin1Encoder instance) => instance.convert),
      'fuse': VmProxy(identifier: 'fuse', externalInstancePropertyReader: (Latin1Encoder instance) => instance.fuse),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Latin1Encoder instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Latin1Encoder instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Latin1Encoder instance) => instance.runtimeType),
      'startChunkedConversion': VmProxy(identifier: 'startChunkedConversion', externalInstancePropertyReader: (Latin1Encoder instance) => instance.startChunkedConversion),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Latin1Encoder instance) => instance.toString),
    },
  );

  ///class LineSplitter
  static final classLineSplitter = VmClass<LineSplitter>(
    identifier: 'LineSplitter',
    superclassNames: ['Object', 'StreamTransformer', 'StreamTransformerBase'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => LineSplitter.new),
      'split': VmProxy(identifier: 'split', externalStaticPropertyReader: () => LineSplitter.split),
      'bind': VmProxy(identifier: 'bind', externalInstancePropertyReader: (LineSplitter instance) => instance.bind),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (LineSplitter instance) => instance.cast),
      'convert': VmProxy(identifier: 'convert', externalInstancePropertyReader: (LineSplitter instance) => instance.convert),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (LineSplitter instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (LineSplitter instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (LineSplitter instance) => instance.runtimeType),
      'startChunkedConversion': VmProxy(identifier: 'startChunkedConversion', externalInstancePropertyReader: (LineSplitter instance) => instance.startChunkedConversion),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (LineSplitter instance) => instance.toString),
    },
  );

  ///class Link
  static final classLink = VmClass<Link>(
    identifier: 'Link',
    superclassNames: ['Object', 'FileSystemEntity'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Link.new),
      'fromRawPath': VmProxy(identifier: 'fromRawPath', externalStaticPropertyReader: () => Link.fromRawPath),
      'fromUri': VmProxy(identifier: 'fromUri', externalStaticPropertyReader: () => Link.fromUri),
      'absolute': VmProxy(identifier: 'absolute', externalInstancePropertyReader: (Link instance) => instance.absolute),
      'create': VmProxy(identifier: 'create', externalInstancePropertyReader: (Link instance) => instance.create),
      'createSync': VmProxy(identifier: 'createSync', externalInstancePropertyReader: (Link instance) => instance.createSync),
      'delete': VmProxy(identifier: 'delete', externalInstancePropertyReader: (Link instance) => instance.delete),
      'deleteSync': VmProxy(identifier: 'deleteSync', externalInstancePropertyReader: (Link instance) => instance.deleteSync),
      'exists': VmProxy(identifier: 'exists', externalInstancePropertyReader: (Link instance) => instance.exists),
      'existsSync': VmProxy(identifier: 'existsSync', externalInstancePropertyReader: (Link instance) => instance.existsSync),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Link instance) => instance.hashCode),
      'isAbsolute': VmProxy(identifier: 'isAbsolute', externalInstancePropertyReader: (Link instance) => instance.isAbsolute),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Link instance) => instance.noSuchMethod),
      'parent': VmProxy(identifier: 'parent', externalInstancePropertyReader: (Link instance) => instance.parent),
      'path': VmProxy(identifier: 'path', externalInstancePropertyReader: (Link instance) => instance.path),
      'rename': VmProxy(identifier: 'rename', externalInstancePropertyReader: (Link instance) => instance.rename),
      'renameSync': VmProxy(identifier: 'renameSync', externalInstancePropertyReader: (Link instance) => instance.renameSync),
      'resolveSymbolicLinks': VmProxy(identifier: 'resolveSymbolicLinks', externalInstancePropertyReader: (Link instance) => instance.resolveSymbolicLinks),
      'resolveSymbolicLinksSync': VmProxy(identifier: 'resolveSymbolicLinksSync', externalInstancePropertyReader: (Link instance) => instance.resolveSymbolicLinksSync),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Link instance) => instance.runtimeType),
      'stat': VmProxy(identifier: 'stat', externalInstancePropertyReader: (Link instance) => instance.stat),
      'statSync': VmProxy(identifier: 'statSync', externalInstancePropertyReader: (Link instance) => instance.statSync),
      'target': VmProxy(identifier: 'target', externalInstancePropertyReader: (Link instance) => instance.target),
      'targetSync': VmProxy(identifier: 'targetSync', externalInstancePropertyReader: (Link instance) => instance.targetSync),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Link instance) => instance.toString),
      'update': VmProxy(identifier: 'update', externalInstancePropertyReader: (Link instance) => instance.update),
      'updateSync': VmProxy(identifier: 'updateSync', externalInstancePropertyReader: (Link instance) => instance.updateSync),
      'uri': VmProxy(identifier: 'uri', externalInstancePropertyReader: (Link instance) => instance.uri),
      'watch': VmProxy(identifier: 'watch', externalInstancePropertyReader: (Link instance) => instance.watch),
    },
  );

  ///class LinkedHashMap
  static final classLinkedHashMap = VmClass<LinkedHashMap>(
    identifier: 'LinkedHashMap',
    superclassNames: ['Object', 'Map'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => LinkedHashMap.new, externalStaticFunctionCaller: ({equals, hashCode, isValidKey}) => LinkedHashMap.new(equals: equals == null ? null : (b0, b1) => equals(b0, b1), hashCode: hashCode == null ? null : (b0) => hashCode(b0), isValidKey: isValidKey == null ? null : (b0) => isValidKey(b0))),
      'from': VmProxy(identifier: 'from', externalStaticPropertyReader: () => LinkedHashMap.from),
      'fromEntries': VmProxy(identifier: 'fromEntries', externalStaticPropertyReader: () => LinkedHashMap.fromEntries),
      'fromIterable': VmProxy(identifier: 'fromIterable', externalStaticPropertyReader: () => LinkedHashMap.fromIterable, externalStaticFunctionCaller: (a0, {key, value}) => LinkedHashMap.fromIterable(a0, key: key == null ? null : (b0) => key(b0), value: value == null ? null : (b0) => value(b0))),
      'fromIterables': VmProxy(identifier: 'fromIterables', externalStaticPropertyReader: () => LinkedHashMap.fromIterables),
      'identity': VmProxy(identifier: 'identity', externalStaticPropertyReader: () => LinkedHashMap.identity),
      'of': VmProxy(identifier: 'of', externalStaticPropertyReader: () => LinkedHashMap.of),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (LinkedHashMap instance) => instance.addAll),
      'addEntries': VmProxy(identifier: 'addEntries', externalInstancePropertyReader: (LinkedHashMap instance) => instance.addEntries),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (LinkedHashMap instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (LinkedHashMap instance) => instance.clear),
      'containsKey': VmProxy(identifier: 'containsKey', externalInstancePropertyReader: (LinkedHashMap instance) => instance.containsKey),
      'containsValue': VmProxy(identifier: 'containsValue', externalInstancePropertyReader: (LinkedHashMap instance) => instance.containsValue),
      'entries': VmProxy(identifier: 'entries', externalInstancePropertyReader: (LinkedHashMap instance) => instance.entries),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (LinkedHashMap instance) => instance.forEach, externalInstanceFunctionCaller: (LinkedHashMap instance, a0) => instance.forEach((b0, b1) => a0(b0, b1))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (LinkedHashMap instance) => instance.hashCode),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (LinkedHashMap instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (LinkedHashMap instance) => instance.isNotEmpty),
      'keys': VmProxy(identifier: 'keys', externalInstancePropertyReader: (LinkedHashMap instance) => instance.keys),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (LinkedHashMap instance) => instance.length),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (LinkedHashMap instance) => instance.map, externalInstanceFunctionCaller: (LinkedHashMap instance, a0) => instance.map((b0, b1) => a0(b0, b1))),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (LinkedHashMap instance) => instance.noSuchMethod),
      'putIfAbsent': VmProxy(identifier: 'putIfAbsent', externalInstancePropertyReader: (LinkedHashMap instance) => instance.putIfAbsent, externalInstanceFunctionCaller: (LinkedHashMap instance, a0, a1) => instance.putIfAbsent(a0, () => a1())),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (LinkedHashMap instance) => instance.remove),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (LinkedHashMap instance) => instance.removeWhere, externalInstanceFunctionCaller: (LinkedHashMap instance, a0) => instance.removeWhere((b0, b1) => a0(b0, b1))),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (LinkedHashMap instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (LinkedHashMap instance) => instance.toString),
      'update': VmProxy(identifier: 'update', externalInstancePropertyReader: (LinkedHashMap instance) => instance.update, externalInstanceFunctionCaller: (LinkedHashMap instance, a0, a1, {ifAbsent}) => instance.update(a0, (b0) => a1(b0), ifAbsent: ifAbsent == null ? null : () => ifAbsent())),
      'updateAll': VmProxy(identifier: 'updateAll', externalInstancePropertyReader: (LinkedHashMap instance) => instance.updateAll, externalInstanceFunctionCaller: (LinkedHashMap instance, a0) => instance.updateAll((b0, b1) => a0(b0, b1))),
      'values': VmProxy(identifier: 'values', externalInstancePropertyReader: (LinkedHashMap instance) => instance.values),
    },
  );

  ///class LinkedHashSet
  static final classLinkedHashSet = VmClass<LinkedHashSet>(
    identifier: 'LinkedHashSet',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable', 'Set'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => LinkedHashSet.new, externalStaticFunctionCaller: ({equals, hashCode, isValidKey}) => LinkedHashSet.new(equals: equals == null ? null : (b0, b1) => equals(b0, b1), hashCode: hashCode == null ? null : (b0) => hashCode(b0), isValidKey: isValidKey == null ? null : (b0) => isValidKey(b0))),
      'from': VmProxy(identifier: 'from', externalStaticPropertyReader: () => LinkedHashSet.from),
      'identity': VmProxy(identifier: 'identity', externalStaticPropertyReader: () => LinkedHashSet.identity),
      'of': VmProxy(identifier: 'of', externalStaticPropertyReader: () => LinkedHashSet.of),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (LinkedHashSet instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (LinkedHashSet instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (LinkedHashSet instance) => instance.any, externalInstanceFunctionCaller: (LinkedHashSet instance, a0) => instance.any((b0) => a0(b0))),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (LinkedHashSet instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (LinkedHashSet instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (LinkedHashSet instance) => instance.contains),
      'containsAll': VmProxy(identifier: 'containsAll', externalInstancePropertyReader: (LinkedHashSet instance) => instance.containsAll),
      'difference': VmProxy(identifier: 'difference', externalInstancePropertyReader: (LinkedHashSet instance) => instance.difference),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (LinkedHashSet instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (LinkedHashSet instance) => instance.elementAtOrNull),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (LinkedHashSet instance) => instance.every, externalInstanceFunctionCaller: (LinkedHashSet instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (LinkedHashSet instance) => instance.expand, externalInstanceFunctionCaller: (LinkedHashSet instance, a0) => instance.expand((b0) => a0(b0))),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (LinkedHashSet instance) => instance.first),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (LinkedHashSet instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (LinkedHashSet instance) => instance.firstWhere, externalInstanceFunctionCaller: (LinkedHashSet instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (LinkedHashSet instance) => instance.fold, externalInstanceFunctionCaller: (LinkedHashSet instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (LinkedHashSet instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (LinkedHashSet instance) => instance.forEach, externalInstanceFunctionCaller: (LinkedHashSet instance, a0) => instance.forEach((b0) => a0(b0))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (LinkedHashSet instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (LinkedHashSet instance) => instance.indexed),
      'intersection': VmProxy(identifier: 'intersection', externalInstancePropertyReader: (LinkedHashSet instance) => instance.intersection),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (LinkedHashSet instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (LinkedHashSet instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (LinkedHashSet instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (LinkedHashSet instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (LinkedHashSet instance) => instance.last),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (LinkedHashSet instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (LinkedHashSet instance) => instance.lastWhere, externalInstanceFunctionCaller: (LinkedHashSet instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (LinkedHashSet instance) => instance.length),
      'lookup': VmProxy(identifier: 'lookup', externalInstancePropertyReader: (LinkedHashSet instance) => instance.lookup),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (LinkedHashSet instance) => instance.map, externalInstanceFunctionCaller: (LinkedHashSet instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (LinkedHashSet instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (LinkedHashSet instance) => instance.noSuchMethod),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (LinkedHashSet instance) => instance.reduce, externalInstanceFunctionCaller: (LinkedHashSet instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (LinkedHashSet instance) => instance.remove),
      'removeAll': VmProxy(identifier: 'removeAll', externalInstancePropertyReader: (LinkedHashSet instance) => instance.removeAll),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (LinkedHashSet instance) => instance.removeWhere, externalInstanceFunctionCaller: (LinkedHashSet instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'retainAll': VmProxy(identifier: 'retainAll', externalInstancePropertyReader: (LinkedHashSet instance) => instance.retainAll),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (LinkedHashSet instance) => instance.retainWhere, externalInstanceFunctionCaller: (LinkedHashSet instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (LinkedHashSet instance) => instance.runtimeType),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (LinkedHashSet instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (LinkedHashSet instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (LinkedHashSet instance) => instance.singleWhere, externalInstanceFunctionCaller: (LinkedHashSet instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (LinkedHashSet instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (LinkedHashSet instance) => instance.skipWhile, externalInstanceFunctionCaller: (LinkedHashSet instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (LinkedHashSet instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (LinkedHashSet instance) => instance.takeWhile, externalInstanceFunctionCaller: (LinkedHashSet instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (LinkedHashSet instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (LinkedHashSet instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (LinkedHashSet instance) => instance.toString),
      'union': VmProxy(identifier: 'union', externalInstancePropertyReader: (LinkedHashSet instance) => instance.union),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (LinkedHashSet instance) => instance.where, externalInstanceFunctionCaller: (LinkedHashSet instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (LinkedHashSet instance) => instance.whereType),
    },
  );

  ///class LinkedList
  static final classLinkedList = VmClass<LinkedList>(
    identifier: 'LinkedList',
    superclassNames: ['Object', 'Iterable'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => LinkedList.new),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (LinkedList instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (LinkedList instance) => instance.addAll),
      'addFirst': VmProxy(identifier: 'addFirst', externalInstancePropertyReader: (LinkedList instance) => instance.addFirst),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (LinkedList instance) => instance.any, externalInstanceFunctionCaller: (LinkedList instance, a0) => instance.any((b0) => a0(b0))),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (LinkedList instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (LinkedList instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (LinkedList instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (LinkedList instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (LinkedList instance) => instance.elementAtOrNull),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (LinkedList instance) => instance.every, externalInstanceFunctionCaller: (LinkedList instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (LinkedList instance) => instance.expand, externalInstanceFunctionCaller: (LinkedList instance, a0) => instance.expand((b0) => a0(b0))),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (LinkedList instance) => instance.first),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (LinkedList instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (LinkedList instance) => instance.firstWhere, externalInstanceFunctionCaller: (LinkedList instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (LinkedList instance) => instance.fold, externalInstanceFunctionCaller: (LinkedList instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (LinkedList instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (LinkedList instance) => instance.forEach, externalInstanceFunctionCaller: (LinkedList instance, a0) => instance.forEach((b0) => a0(b0))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (LinkedList instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (LinkedList instance) => instance.indexed),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (LinkedList instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (LinkedList instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (LinkedList instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (LinkedList instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (LinkedList instance) => instance.last),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (LinkedList instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (LinkedList instance) => instance.lastWhere, externalInstanceFunctionCaller: (LinkedList instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (LinkedList instance) => instance.length),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (LinkedList instance) => instance.map, externalInstanceFunctionCaller: (LinkedList instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (LinkedList instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (LinkedList instance) => instance.noSuchMethod),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (LinkedList instance) => instance.reduce, externalInstanceFunctionCaller: (LinkedList instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (LinkedList instance) => instance.remove),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (LinkedList instance) => instance.runtimeType),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (LinkedList instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (LinkedList instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (LinkedList instance) => instance.singleWhere, externalInstanceFunctionCaller: (LinkedList instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (LinkedList instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (LinkedList instance) => instance.skipWhile, externalInstanceFunctionCaller: (LinkedList instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (LinkedList instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (LinkedList instance) => instance.takeWhile, externalInstanceFunctionCaller: (LinkedList instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (LinkedList instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (LinkedList instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (LinkedList instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (LinkedList instance) => instance.where, externalInstanceFunctionCaller: (LinkedList instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (LinkedList instance) => instance.whereType),
    },
  );

  ///class LinkedListEntry
  static final classLinkedListEntry = VmClass<LinkedListEntry>(
    identifier: 'LinkedListEntry',
    superclassNames: ['Object'],
    externalProxyMap: {
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (LinkedListEntry instance) => instance.hashCode),
      'insertAfter': VmProxy(identifier: 'insertAfter', externalInstancePropertyReader: (LinkedListEntry instance) => instance.insertAfter),
      'insertBefore': VmProxy(identifier: 'insertBefore', externalInstancePropertyReader: (LinkedListEntry instance) => instance.insertBefore),
      'list': VmProxy(identifier: 'list', externalInstancePropertyReader: (LinkedListEntry instance) => instance.list),
      'next': VmProxy(identifier: 'next', externalInstancePropertyReader: (LinkedListEntry instance) => instance.next),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (LinkedListEntry instance) => instance.noSuchMethod),
      'previous': VmProxy(identifier: 'previous', externalInstancePropertyReader: (LinkedListEntry instance) => instance.previous),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (LinkedListEntry instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (LinkedListEntry instance) => instance.toString),
      'unlink': VmProxy(identifier: 'unlink', externalInstancePropertyReader: (LinkedListEntry instance) => instance.unlink),
    },
  );

  ///class List
  static final classList = VmClass<List>(
    identifier: 'List',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable'],
    externalProxyMap: {
      'empty': VmProxy(identifier: 'empty', externalStaticPropertyReader: () => List.empty),
      'filled': VmProxy(identifier: 'filled', externalStaticPropertyReader: () => List.filled),
      'from': VmProxy(identifier: 'from', externalStaticPropertyReader: () => List.from),
      'generate': VmProxy(identifier: 'generate', externalStaticPropertyReader: () => List.generate, externalStaticFunctionCaller: (a0, a1, {growable = true}) => List.generate(a0, (b0) => a1(b0), growable: growable)),
      'of': VmProxy(identifier: 'of', externalStaticPropertyReader: () => List.of),
      'unmodifiable': VmProxy(identifier: 'unmodifiable', externalStaticPropertyReader: () => List.unmodifiable),
      'castFrom': VmProxy(identifier: 'castFrom', externalStaticPropertyReader: () => List.castFrom),
      'copyRange': VmProxy(identifier: 'copyRange', externalStaticPropertyReader: () => List.copyRange),
      'writeIterable': VmProxy(identifier: 'writeIterable', externalStaticPropertyReader: () => List.writeIterable),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (List instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (List instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (List instance) => instance.any, externalInstanceFunctionCaller: (List instance, a0) => instance.any((b0) => a0(b0))),
      'asMap': VmProxy(identifier: 'asMap', externalInstancePropertyReader: (List instance) => instance.asMap),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (List instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (List instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (List instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (List instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (List instance) => instance.elementAtOrNull),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (List instance) => instance.every, externalInstanceFunctionCaller: (List instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (List instance) => instance.expand, externalInstanceFunctionCaller: (List instance, a0) => instance.expand((b0) => a0(b0))),
      'fillRange': VmProxy(identifier: 'fillRange', externalInstancePropertyReader: (List instance) => instance.fillRange),
      'first': VmProxy(identifier: 'first', externalInstancePropertyWriter: (List instance, value) => instance.first = value, externalInstancePropertyReader: (List instance) => instance.first),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (List instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (List instance) => instance.firstWhere, externalInstanceFunctionCaller: (List instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (List instance) => instance.fold, externalInstanceFunctionCaller: (List instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (List instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (List instance) => instance.forEach, externalInstanceFunctionCaller: (List instance, a0) => instance.forEach((b0) => a0(b0))),
      'getRange': VmProxy(identifier: 'getRange', externalInstancePropertyReader: (List instance) => instance.getRange),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (List instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (List instance) => instance.indexed),
      'indexOf': VmProxy(identifier: 'indexOf', externalInstancePropertyReader: (List instance) => instance.indexOf),
      'indexWhere': VmProxy(identifier: 'indexWhere', externalInstancePropertyReader: (List instance) => instance.indexWhere, externalInstanceFunctionCaller: (List instance, a0, [a1 = 0]) => instance.indexWhere((b0) => a0(b0), a1)),
      'insert': VmProxy(identifier: 'insert', externalInstancePropertyReader: (List instance) => instance.insert),
      'insertAll': VmProxy(identifier: 'insertAll', externalInstancePropertyReader: (List instance) => instance.insertAll),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (List instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (List instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (List instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (List instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyWriter: (List instance, value) => instance.last = value, externalInstancePropertyReader: (List instance) => instance.last),
      'lastIndexOf': VmProxy(identifier: 'lastIndexOf', externalInstancePropertyReader: (List instance) => instance.lastIndexOf),
      'lastIndexWhere': VmProxy(identifier: 'lastIndexWhere', externalInstancePropertyReader: (List instance) => instance.lastIndexWhere, externalInstanceFunctionCaller: (List instance, a0, [a1]) => instance.lastIndexWhere((b0) => a0(b0), a1)),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (List instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (List instance) => instance.lastWhere, externalInstanceFunctionCaller: (List instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (List instance) => instance.length, externalInstancePropertyWriter: (List instance, value) => instance.length = value),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (List instance) => instance.map, externalInstanceFunctionCaller: (List instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (List instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (List instance) => instance.noSuchMethod),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (List instance) => instance.reduce, externalInstanceFunctionCaller: (List instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (List instance) => instance.remove),
      'removeAt': VmProxy(identifier: 'removeAt', externalInstancePropertyReader: (List instance) => instance.removeAt),
      'removeLast': VmProxy(identifier: 'removeLast', externalInstancePropertyReader: (List instance) => instance.removeLast),
      'removeRange': VmProxy(identifier: 'removeRange', externalInstancePropertyReader: (List instance) => instance.removeRange),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (List instance) => instance.removeWhere, externalInstanceFunctionCaller: (List instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'replaceRange': VmProxy(identifier: 'replaceRange', externalInstancePropertyReader: (List instance) => instance.replaceRange),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (List instance) => instance.retainWhere, externalInstanceFunctionCaller: (List instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'reversed': VmProxy(identifier: 'reversed', externalInstancePropertyReader: (List instance) => instance.reversed),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (List instance) => instance.runtimeType),
      'setAll': VmProxy(identifier: 'setAll', externalInstancePropertyReader: (List instance) => instance.setAll),
      'setRange': VmProxy(identifier: 'setRange', externalInstancePropertyReader: (List instance) => instance.setRange),
      'shuffle': VmProxy(identifier: 'shuffle', externalInstancePropertyReader: (List instance) => instance.shuffle),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (List instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (List instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (List instance) => instance.singleWhere, externalInstanceFunctionCaller: (List instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (List instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (List instance) => instance.skipWhile, externalInstanceFunctionCaller: (List instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'sort': VmProxy(identifier: 'sort', externalInstancePropertyReader: (List instance) => instance.sort, externalInstanceFunctionCaller: (List instance, [a0]) => instance.sort(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'sublist': VmProxy(identifier: 'sublist', externalInstancePropertyReader: (List instance) => instance.sublist),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (List instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (List instance) => instance.takeWhile, externalInstanceFunctionCaller: (List instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (List instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (List instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (List instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (List instance) => instance.where, externalInstanceFunctionCaller: (List instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (List instance) => instance.whereType),
    },
  );

  ///class ListBase
  static final classListBase = VmClass<ListBase>(
    identifier: 'ListBase',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable', 'List'],
    externalProxyMap: {
      'listToString': VmProxy(identifier: 'listToString', externalStaticPropertyReader: () => ListBase.listToString),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (ListBase instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (ListBase instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (ListBase instance) => instance.any, externalInstanceFunctionCaller: (ListBase instance, a0) => instance.any((b0) => a0(b0))),
      'asMap': VmProxy(identifier: 'asMap', externalInstancePropertyReader: (ListBase instance) => instance.asMap),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (ListBase instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (ListBase instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (ListBase instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (ListBase instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (ListBase instance) => instance.elementAtOrNull),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (ListBase instance) => instance.every, externalInstanceFunctionCaller: (ListBase instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (ListBase instance) => instance.expand, externalInstanceFunctionCaller: (ListBase instance, a0) => instance.expand((b0) => a0(b0))),
      'fillRange': VmProxy(identifier: 'fillRange', externalInstancePropertyReader: (ListBase instance) => instance.fillRange),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (ListBase instance) => instance.first, externalInstancePropertyWriter: (ListBase instance, value) => instance.first = value),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (ListBase instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (ListBase instance) => instance.firstWhere, externalInstanceFunctionCaller: (ListBase instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (ListBase instance) => instance.fold, externalInstanceFunctionCaller: (ListBase instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (ListBase instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (ListBase instance) => instance.forEach, externalInstanceFunctionCaller: (ListBase instance, a0) => instance.forEach((b0) => a0(b0))),
      'getRange': VmProxy(identifier: 'getRange', externalInstancePropertyReader: (ListBase instance) => instance.getRange),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ListBase instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (ListBase instance) => instance.indexed),
      'indexOf': VmProxy(identifier: 'indexOf', externalInstancePropertyReader: (ListBase instance) => instance.indexOf),
      'indexWhere': VmProxy(identifier: 'indexWhere', externalInstancePropertyReader: (ListBase instance) => instance.indexWhere, externalInstanceFunctionCaller: (ListBase instance, a0, [a1 = 0]) => instance.indexWhere((b0) => a0(b0), a1)),
      'insert': VmProxy(identifier: 'insert', externalInstancePropertyReader: (ListBase instance) => instance.insert),
      'insertAll': VmProxy(identifier: 'insertAll', externalInstancePropertyReader: (ListBase instance) => instance.insertAll),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (ListBase instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (ListBase instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (ListBase instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (ListBase instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (ListBase instance) => instance.last, externalInstancePropertyWriter: (ListBase instance, value) => instance.last = value),
      'lastIndexOf': VmProxy(identifier: 'lastIndexOf', externalInstancePropertyReader: (ListBase instance) => instance.lastIndexOf),
      'lastIndexWhere': VmProxy(identifier: 'lastIndexWhere', externalInstancePropertyReader: (ListBase instance) => instance.lastIndexWhere, externalInstanceFunctionCaller: (ListBase instance, a0, [a1]) => instance.lastIndexWhere((b0) => a0(b0), a1)),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (ListBase instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (ListBase instance) => instance.lastWhere, externalInstanceFunctionCaller: (ListBase instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyWriter: (ListBase instance, value) => instance.length = value, externalInstancePropertyReader: (ListBase instance) => instance.length),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (ListBase instance) => instance.map, externalInstanceFunctionCaller: (ListBase instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (ListBase instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ListBase instance) => instance.noSuchMethod),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (ListBase instance) => instance.reduce, externalInstanceFunctionCaller: (ListBase instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (ListBase instance) => instance.remove),
      'removeAt': VmProxy(identifier: 'removeAt', externalInstancePropertyReader: (ListBase instance) => instance.removeAt),
      'removeLast': VmProxy(identifier: 'removeLast', externalInstancePropertyReader: (ListBase instance) => instance.removeLast),
      'removeRange': VmProxy(identifier: 'removeRange', externalInstancePropertyReader: (ListBase instance) => instance.removeRange),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (ListBase instance) => instance.removeWhere, externalInstanceFunctionCaller: (ListBase instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'replaceRange': VmProxy(identifier: 'replaceRange', externalInstancePropertyReader: (ListBase instance) => instance.replaceRange),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (ListBase instance) => instance.retainWhere, externalInstanceFunctionCaller: (ListBase instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'reversed': VmProxy(identifier: 'reversed', externalInstancePropertyReader: (ListBase instance) => instance.reversed),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ListBase instance) => instance.runtimeType),
      'setAll': VmProxy(identifier: 'setAll', externalInstancePropertyReader: (ListBase instance) => instance.setAll),
      'setRange': VmProxy(identifier: 'setRange', externalInstancePropertyReader: (ListBase instance) => instance.setRange),
      'shuffle': VmProxy(identifier: 'shuffle', externalInstancePropertyReader: (ListBase instance) => instance.shuffle),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (ListBase instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (ListBase instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (ListBase instance) => instance.singleWhere, externalInstanceFunctionCaller: (ListBase instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (ListBase instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (ListBase instance) => instance.skipWhile, externalInstanceFunctionCaller: (ListBase instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'sort': VmProxy(identifier: 'sort', externalInstancePropertyReader: (ListBase instance) => instance.sort, externalInstanceFunctionCaller: (ListBase instance, [a0]) => instance.sort(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'sublist': VmProxy(identifier: 'sublist', externalInstancePropertyReader: (ListBase instance) => instance.sublist),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (ListBase instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (ListBase instance) => instance.takeWhile, externalInstanceFunctionCaller: (ListBase instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (ListBase instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (ListBase instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ListBase instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (ListBase instance) => instance.where, externalInstanceFunctionCaller: (ListBase instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (ListBase instance) => instance.whereType),
    },
  );

  ///class ListMixin
  static final classListMixin = VmClass<ListMixin>(
    identifier: 'ListMixin',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable', 'List', 'ListBase'],
    externalProxyMap: {
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (ListMixin instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (ListMixin instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (ListMixin instance) => instance.any, externalInstanceFunctionCaller: (ListMixin instance, a0) => instance.any((b0) => a0(b0))),
      'asMap': VmProxy(identifier: 'asMap', externalInstancePropertyReader: (ListMixin instance) => instance.asMap),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (ListMixin instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (ListMixin instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (ListMixin instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (ListMixin instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (ListMixin instance) => instance.elementAtOrNull),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (ListMixin instance) => instance.every, externalInstanceFunctionCaller: (ListMixin instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (ListMixin instance) => instance.expand, externalInstanceFunctionCaller: (ListMixin instance, a0) => instance.expand((b0) => a0(b0))),
      'fillRange': VmProxy(identifier: 'fillRange', externalInstancePropertyReader: (ListMixin instance) => instance.fillRange),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (ListMixin instance) => instance.first, externalInstancePropertyWriter: (ListMixin instance, value) => instance.first = value),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (ListMixin instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (ListMixin instance) => instance.firstWhere, externalInstanceFunctionCaller: (ListMixin instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (ListMixin instance) => instance.fold, externalInstanceFunctionCaller: (ListMixin instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (ListMixin instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (ListMixin instance) => instance.forEach, externalInstanceFunctionCaller: (ListMixin instance, a0) => instance.forEach((b0) => a0(b0))),
      'getRange': VmProxy(identifier: 'getRange', externalInstancePropertyReader: (ListMixin instance) => instance.getRange),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ListMixin instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (ListMixin instance) => instance.indexed),
      'indexOf': VmProxy(identifier: 'indexOf', externalInstancePropertyReader: (ListMixin instance) => instance.indexOf),
      'indexWhere': VmProxy(identifier: 'indexWhere', externalInstancePropertyReader: (ListMixin instance) => instance.indexWhere, externalInstanceFunctionCaller: (ListMixin instance, a0, [a1 = 0]) => instance.indexWhere((b0) => a0(b0), a1)),
      'insert': VmProxy(identifier: 'insert', externalInstancePropertyReader: (ListMixin instance) => instance.insert),
      'insertAll': VmProxy(identifier: 'insertAll', externalInstancePropertyReader: (ListMixin instance) => instance.insertAll),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (ListMixin instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (ListMixin instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (ListMixin instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (ListMixin instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (ListMixin instance) => instance.last, externalInstancePropertyWriter: (ListMixin instance, value) => instance.last = value),
      'lastIndexOf': VmProxy(identifier: 'lastIndexOf', externalInstancePropertyReader: (ListMixin instance) => instance.lastIndexOf),
      'lastIndexWhere': VmProxy(identifier: 'lastIndexWhere', externalInstancePropertyReader: (ListMixin instance) => instance.lastIndexWhere, externalInstanceFunctionCaller: (ListMixin instance, a0, [a1]) => instance.lastIndexWhere((b0) => a0(b0), a1)),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (ListMixin instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (ListMixin instance) => instance.lastWhere, externalInstanceFunctionCaller: (ListMixin instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (ListMixin instance) => instance.length, externalInstancePropertyWriter: (ListMixin instance, value) => instance.length = value),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (ListMixin instance) => instance.map, externalInstanceFunctionCaller: (ListMixin instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (ListMixin instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ListMixin instance) => instance.noSuchMethod),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (ListMixin instance) => instance.reduce, externalInstanceFunctionCaller: (ListMixin instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (ListMixin instance) => instance.remove),
      'removeAt': VmProxy(identifier: 'removeAt', externalInstancePropertyReader: (ListMixin instance) => instance.removeAt),
      'removeLast': VmProxy(identifier: 'removeLast', externalInstancePropertyReader: (ListMixin instance) => instance.removeLast),
      'removeRange': VmProxy(identifier: 'removeRange', externalInstancePropertyReader: (ListMixin instance) => instance.removeRange),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (ListMixin instance) => instance.removeWhere, externalInstanceFunctionCaller: (ListMixin instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'replaceRange': VmProxy(identifier: 'replaceRange', externalInstancePropertyReader: (ListMixin instance) => instance.replaceRange),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (ListMixin instance) => instance.retainWhere, externalInstanceFunctionCaller: (ListMixin instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'reversed': VmProxy(identifier: 'reversed', externalInstancePropertyReader: (ListMixin instance) => instance.reversed),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ListMixin instance) => instance.runtimeType),
      'setAll': VmProxy(identifier: 'setAll', externalInstancePropertyReader: (ListMixin instance) => instance.setAll),
      'setRange': VmProxy(identifier: 'setRange', externalInstancePropertyReader: (ListMixin instance) => instance.setRange),
      'shuffle': VmProxy(identifier: 'shuffle', externalInstancePropertyReader: (ListMixin instance) => instance.shuffle),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (ListMixin instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (ListMixin instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (ListMixin instance) => instance.singleWhere, externalInstanceFunctionCaller: (ListMixin instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (ListMixin instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (ListMixin instance) => instance.skipWhile, externalInstanceFunctionCaller: (ListMixin instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'sort': VmProxy(identifier: 'sort', externalInstancePropertyReader: (ListMixin instance) => instance.sort, externalInstanceFunctionCaller: (ListMixin instance, [a0]) => instance.sort(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'sublist': VmProxy(identifier: 'sublist', externalInstancePropertyReader: (ListMixin instance) => instance.sublist),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (ListMixin instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (ListMixin instance) => instance.takeWhile, externalInstanceFunctionCaller: (ListMixin instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (ListMixin instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (ListMixin instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ListMixin instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (ListMixin instance) => instance.where, externalInstanceFunctionCaller: (ListMixin instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (ListMixin instance) => instance.whereType),
    },
  );

  ///class ListQueue
  static final classListQueue = VmClass<ListQueue>(
    identifier: 'ListQueue',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable', 'ListIterable', 'Queue'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ListQueue.new),
      'from': VmProxy(identifier: 'from', externalStaticPropertyReader: () => ListQueue.from),
      'of': VmProxy(identifier: 'of', externalStaticPropertyReader: () => ListQueue.of),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (ListQueue instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (ListQueue instance) => instance.addAll),
      'addFirst': VmProxy(identifier: 'addFirst', externalInstancePropertyReader: (ListQueue instance) => instance.addFirst),
      'addLast': VmProxy(identifier: 'addLast', externalInstancePropertyReader: (ListQueue instance) => instance.addLast),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (ListQueue instance) => instance.any, externalInstanceFunctionCaller: (ListQueue instance, a0) => instance.any((b0) => a0(b0))),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (ListQueue instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (ListQueue instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (ListQueue instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (ListQueue instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (ListQueue instance) => instance.elementAtOrNull),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (ListQueue instance) => instance.every, externalInstanceFunctionCaller: (ListQueue instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (ListQueue instance) => instance.expand, externalInstanceFunctionCaller: (ListQueue instance, a0) => instance.expand((b0) => a0(b0))),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (ListQueue instance) => instance.first),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (ListQueue instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (ListQueue instance) => instance.firstWhere, externalInstanceFunctionCaller: (ListQueue instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (ListQueue instance) => instance.fold, externalInstanceFunctionCaller: (ListQueue instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (ListQueue instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (ListQueue instance) => instance.forEach, externalInstanceFunctionCaller: (ListQueue instance, a0) => instance.forEach((b0) => a0(b0))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ListQueue instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (ListQueue instance) => instance.indexed),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (ListQueue instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (ListQueue instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (ListQueue instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (ListQueue instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (ListQueue instance) => instance.last),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (ListQueue instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (ListQueue instance) => instance.lastWhere, externalInstanceFunctionCaller: (ListQueue instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (ListQueue instance) => instance.length),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (ListQueue instance) => instance.map, externalInstanceFunctionCaller: (ListQueue instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (ListQueue instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ListQueue instance) => instance.noSuchMethod),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (ListQueue instance) => instance.reduce, externalInstanceFunctionCaller: (ListQueue instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (ListQueue instance) => instance.remove),
      'removeFirst': VmProxy(identifier: 'removeFirst', externalInstancePropertyReader: (ListQueue instance) => instance.removeFirst),
      'removeLast': VmProxy(identifier: 'removeLast', externalInstancePropertyReader: (ListQueue instance) => instance.removeLast),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (ListQueue instance) => instance.removeWhere, externalInstanceFunctionCaller: (ListQueue instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (ListQueue instance) => instance.retainWhere, externalInstanceFunctionCaller: (ListQueue instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ListQueue instance) => instance.runtimeType),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (ListQueue instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (ListQueue instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (ListQueue instance) => instance.singleWhere, externalInstanceFunctionCaller: (ListQueue instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (ListQueue instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (ListQueue instance) => instance.skipWhile, externalInstanceFunctionCaller: (ListQueue instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (ListQueue instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (ListQueue instance) => instance.takeWhile, externalInstanceFunctionCaller: (ListQueue instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (ListQueue instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (ListQueue instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ListQueue instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (ListQueue instance) => instance.where, externalInstanceFunctionCaller: (ListQueue instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (ListQueue instance) => instance.whereType),
    },
  );

  ///class Map
  static final classMap = VmClass<Map>(
    identifier: 'Map',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Map.new),
      'from': VmProxy(identifier: 'from', externalStaticPropertyReader: () => Map.from),
      'fromEntries': VmProxy(identifier: 'fromEntries', externalStaticPropertyReader: () => Map.fromEntries),
      'fromIterable': VmProxy(identifier: 'fromIterable', externalStaticPropertyReader: () => Map.fromIterable, externalStaticFunctionCaller: (a0, {key, value}) => Map.fromIterable(a0, key: key == null ? null : (b0) => key(b0), value: value == null ? null : (b0) => value(b0))),
      'fromIterables': VmProxy(identifier: 'fromIterables', externalStaticPropertyReader: () => Map.fromIterables),
      'identity': VmProxy(identifier: 'identity', externalStaticPropertyReader: () => Map.identity),
      'of': VmProxy(identifier: 'of', externalStaticPropertyReader: () => Map.of),
      'unmodifiable': VmProxy(identifier: 'unmodifiable', externalStaticPropertyReader: () => Map.unmodifiable),
      'castFrom': VmProxy(identifier: 'castFrom', externalStaticPropertyReader: () => Map.castFrom),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (Map instance) => instance.addAll),
      'addEntries': VmProxy(identifier: 'addEntries', externalInstancePropertyReader: (Map instance) => instance.addEntries),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (Map instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (Map instance) => instance.clear),
      'containsKey': VmProxy(identifier: 'containsKey', externalInstancePropertyReader: (Map instance) => instance.containsKey),
      'containsValue': VmProxy(identifier: 'containsValue', externalInstancePropertyReader: (Map instance) => instance.containsValue),
      'entries': VmProxy(identifier: 'entries', externalInstancePropertyReader: (Map instance) => instance.entries),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (Map instance) => instance.forEach, externalInstanceFunctionCaller: (Map instance, a0) => instance.forEach((b0, b1) => a0(b0, b1))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Map instance) => instance.hashCode),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (Map instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (Map instance) => instance.isNotEmpty),
      'keys': VmProxy(identifier: 'keys', externalInstancePropertyReader: (Map instance) => instance.keys),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (Map instance) => instance.length),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (Map instance) => instance.map, externalInstanceFunctionCaller: (Map instance, a0) => instance.map((b0, b1) => a0(b0, b1))),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Map instance) => instance.noSuchMethod),
      'putIfAbsent': VmProxy(identifier: 'putIfAbsent', externalInstancePropertyReader: (Map instance) => instance.putIfAbsent, externalInstanceFunctionCaller: (Map instance, a0, a1) => instance.putIfAbsent(a0, () => a1())),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (Map instance) => instance.remove),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (Map instance) => instance.removeWhere, externalInstanceFunctionCaller: (Map instance, a0) => instance.removeWhere((b0, b1) => a0(b0, b1))),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Map instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Map instance) => instance.toString),
      'update': VmProxy(identifier: 'update', externalInstancePropertyReader: (Map instance) => instance.update, externalInstanceFunctionCaller: (Map instance, a0, a1, {ifAbsent}) => instance.update(a0, (b0) => a1(b0), ifAbsent: ifAbsent == null ? null : () => ifAbsent())),
      'updateAll': VmProxy(identifier: 'updateAll', externalInstancePropertyReader: (Map instance) => instance.updateAll, externalInstanceFunctionCaller: (Map instance, a0) => instance.updateAll((b0, b1) => a0(b0, b1))),
      'values': VmProxy(identifier: 'values', externalInstancePropertyReader: (Map instance) => instance.values),
    },
  );

  ///class MapBase
  static final classMapBase = VmClass<MapBase>(
    identifier: 'MapBase',
    superclassNames: ['Object', 'Map'],
    externalProxyMap: {
      'mapToString': VmProxy(identifier: 'mapToString', externalStaticPropertyReader: () => MapBase.mapToString),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (MapBase instance) => instance.addAll),
      'addEntries': VmProxy(identifier: 'addEntries', externalInstancePropertyReader: (MapBase instance) => instance.addEntries),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (MapBase instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (MapBase instance) => instance.clear),
      'containsKey': VmProxy(identifier: 'containsKey', externalInstancePropertyReader: (MapBase instance) => instance.containsKey),
      'containsValue': VmProxy(identifier: 'containsValue', externalInstancePropertyReader: (MapBase instance) => instance.containsValue),
      'entries': VmProxy(identifier: 'entries', externalInstancePropertyReader: (MapBase instance) => instance.entries),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (MapBase instance) => instance.forEach, externalInstanceFunctionCaller: (MapBase instance, a0) => instance.forEach((b0, b1) => a0(b0, b1))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (MapBase instance) => instance.hashCode),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (MapBase instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (MapBase instance) => instance.isNotEmpty),
      'keys': VmProxy(identifier: 'keys', externalInstancePropertyReader: (MapBase instance) => instance.keys),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (MapBase instance) => instance.length),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (MapBase instance) => instance.map, externalInstanceFunctionCaller: (MapBase instance, a0) => instance.map((b0, b1) => a0(b0, b1))),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (MapBase instance) => instance.noSuchMethod),
      'putIfAbsent': VmProxy(identifier: 'putIfAbsent', externalInstancePropertyReader: (MapBase instance) => instance.putIfAbsent, externalInstanceFunctionCaller: (MapBase instance, a0, a1) => instance.putIfAbsent(a0, () => a1())),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (MapBase instance) => instance.remove),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (MapBase instance) => instance.removeWhere, externalInstanceFunctionCaller: (MapBase instance, a0) => instance.removeWhere((b0, b1) => a0(b0, b1))),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (MapBase instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (MapBase instance) => instance.toString),
      'update': VmProxy(identifier: 'update', externalInstancePropertyReader: (MapBase instance) => instance.update, externalInstanceFunctionCaller: (MapBase instance, a0, a1, {ifAbsent}) => instance.update(a0, (b0) => a1(b0), ifAbsent: ifAbsent == null ? null : () => ifAbsent())),
      'updateAll': VmProxy(identifier: 'updateAll', externalInstancePropertyReader: (MapBase instance) => instance.updateAll, externalInstanceFunctionCaller: (MapBase instance, a0) => instance.updateAll((b0, b1) => a0(b0, b1))),
      'values': VmProxy(identifier: 'values', externalInstancePropertyReader: (MapBase instance) => instance.values),
    },
  );

  ///class MapEntry
  static final classMapEntry = VmClass<MapEntry>(
    identifier: 'MapEntry',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => MapEntry.new),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (MapEntry instance) => instance.hashCode),
      'key': VmProxy(identifier: 'key', externalInstancePropertyReader: (MapEntry instance) => instance.key),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (MapEntry instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (MapEntry instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (MapEntry instance) => instance.toString),
      'value': VmProxy(identifier: 'value', externalInstancePropertyReader: (MapEntry instance) => instance.value),
    },
  );

  ///class MapMixin
  static final classMapMixin = VmClass<MapMixin>(
    identifier: 'MapMixin',
    superclassNames: ['Object', 'Map', 'MapBase'],
    externalProxyMap: {
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (MapMixin instance) => instance.addAll),
      'addEntries': VmProxy(identifier: 'addEntries', externalInstancePropertyReader: (MapMixin instance) => instance.addEntries),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (MapMixin instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (MapMixin instance) => instance.clear),
      'containsKey': VmProxy(identifier: 'containsKey', externalInstancePropertyReader: (MapMixin instance) => instance.containsKey),
      'containsValue': VmProxy(identifier: 'containsValue', externalInstancePropertyReader: (MapMixin instance) => instance.containsValue),
      'entries': VmProxy(identifier: 'entries', externalInstancePropertyReader: (MapMixin instance) => instance.entries),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (MapMixin instance) => instance.forEach, externalInstanceFunctionCaller: (MapMixin instance, a0) => instance.forEach((b0, b1) => a0(b0, b1))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (MapMixin instance) => instance.hashCode),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (MapMixin instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (MapMixin instance) => instance.isNotEmpty),
      'keys': VmProxy(identifier: 'keys', externalInstancePropertyReader: (MapMixin instance) => instance.keys),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (MapMixin instance) => instance.length),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (MapMixin instance) => instance.map, externalInstanceFunctionCaller: (MapMixin instance, a0) => instance.map((b0, b1) => a0(b0, b1))),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (MapMixin instance) => instance.noSuchMethod),
      'putIfAbsent': VmProxy(identifier: 'putIfAbsent', externalInstancePropertyReader: (MapMixin instance) => instance.putIfAbsent, externalInstanceFunctionCaller: (MapMixin instance, a0, a1) => instance.putIfAbsent(a0, () => a1())),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (MapMixin instance) => instance.remove),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (MapMixin instance) => instance.removeWhere, externalInstanceFunctionCaller: (MapMixin instance, a0) => instance.removeWhere((b0, b1) => a0(b0, b1))),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (MapMixin instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (MapMixin instance) => instance.toString),
      'update': VmProxy(identifier: 'update', externalInstancePropertyReader: (MapMixin instance) => instance.update, externalInstanceFunctionCaller: (MapMixin instance, a0, a1, {ifAbsent}) => instance.update(a0, (b0) => a1(b0), ifAbsent: ifAbsent == null ? null : () => ifAbsent())),
      'updateAll': VmProxy(identifier: 'updateAll', externalInstancePropertyReader: (MapMixin instance) => instance.updateAll, externalInstanceFunctionCaller: (MapMixin instance, a0) => instance.updateAll((b0, b1) => a0(b0, b1))),
      'values': VmProxy(identifier: 'values', externalInstancePropertyReader: (MapMixin instance) => instance.values),
    },
  );

  ///class MapView
  static final classMapView = VmClass<MapView>(
    identifier: 'MapView',
    superclassNames: ['Object', 'Map'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => MapView.new),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (MapView instance) => instance.addAll),
      'addEntries': VmProxy(identifier: 'addEntries', externalInstancePropertyReader: (MapView instance) => instance.addEntries),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (MapView instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (MapView instance) => instance.clear),
      'containsKey': VmProxy(identifier: 'containsKey', externalInstancePropertyReader: (MapView instance) => instance.containsKey),
      'containsValue': VmProxy(identifier: 'containsValue', externalInstancePropertyReader: (MapView instance) => instance.containsValue),
      'entries': VmProxy(identifier: 'entries', externalInstancePropertyReader: (MapView instance) => instance.entries),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (MapView instance) => instance.forEach, externalInstanceFunctionCaller: (MapView instance, a0) => instance.forEach((b0, b1) => a0(b0, b1))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (MapView instance) => instance.hashCode),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (MapView instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (MapView instance) => instance.isNotEmpty),
      'keys': VmProxy(identifier: 'keys', externalInstancePropertyReader: (MapView instance) => instance.keys),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (MapView instance) => instance.length),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (MapView instance) => instance.map, externalInstanceFunctionCaller: (MapView instance, a0) => instance.map((b0, b1) => a0(b0, b1))),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (MapView instance) => instance.noSuchMethod),
      'putIfAbsent': VmProxy(identifier: 'putIfAbsent', externalInstancePropertyReader: (MapView instance) => instance.putIfAbsent, externalInstanceFunctionCaller: (MapView instance, a0, a1) => instance.putIfAbsent(a0, () => a1())),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (MapView instance) => instance.remove),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (MapView instance) => instance.removeWhere, externalInstanceFunctionCaller: (MapView instance, a0) => instance.removeWhere((b0, b1) => a0(b0, b1))),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (MapView instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (MapView instance) => instance.toString),
      'update': VmProxy(identifier: 'update', externalInstancePropertyReader: (MapView instance) => instance.update, externalInstanceFunctionCaller: (MapView instance, a0, a1, {ifAbsent}) => instance.update(a0, (b0) => a1(b0), ifAbsent: ifAbsent == null ? null : () => ifAbsent())),
      'updateAll': VmProxy(identifier: 'updateAll', externalInstancePropertyReader: (MapView instance) => instance.updateAll, externalInstanceFunctionCaller: (MapView instance, a0) => instance.updateAll((b0, b1) => a0(b0, b1))),
      'values': VmProxy(identifier: 'values', externalInstancePropertyReader: (MapView instance) => instance.values),
    },
  );

  ///class Match
  static final classMatch = VmClass<Match>(
    identifier: 'Match',
    superclassNames: ['Object'],
    externalProxyMap: {
      'end': VmProxy(identifier: 'end', externalInstancePropertyReader: (Match instance) => instance.end),
      'group': VmProxy(identifier: 'group', externalInstancePropertyReader: (Match instance) => instance.group),
      'groupCount': VmProxy(identifier: 'groupCount', externalInstancePropertyReader: (Match instance) => instance.groupCount),
      'groups': VmProxy(identifier: 'groups', externalInstancePropertyReader: (Match instance) => instance.groups),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Match instance) => instance.hashCode),
      'input': VmProxy(identifier: 'input', externalInstancePropertyReader: (Match instance) => instance.input),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Match instance) => instance.noSuchMethod),
      'pattern': VmProxy(identifier: 'pattern', externalInstancePropertyReader: (Match instance) => instance.pattern),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Match instance) => instance.runtimeType),
      'start': VmProxy(identifier: 'start', externalInstancePropertyReader: (Match instance) => instance.start),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Match instance) => instance.toString),
    },
  );

  ///class MultiStreamController
  static final classMultiStreamController = VmClass<MultiStreamController>(
    identifier: 'MultiStreamController',
    superclassNames: ['Object', 'Sink', 'EventSink', 'StreamConsumer', 'StreamSink', 'StreamController'],
    externalProxyMap: {
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (MultiStreamController instance) => instance.add),
      'addError': VmProxy(identifier: 'addError', externalInstancePropertyReader: (MultiStreamController instance) => instance.addError),
      'addErrorSync': VmProxy(identifier: 'addErrorSync', externalInstancePropertyReader: (MultiStreamController instance) => instance.addErrorSync),
      'addStream': VmProxy(identifier: 'addStream', externalInstancePropertyReader: (MultiStreamController instance) => instance.addStream),
      'addSync': VmProxy(identifier: 'addSync', externalInstancePropertyReader: (MultiStreamController instance) => instance.addSync),
      'close': VmProxy(identifier: 'close', externalInstancePropertyReader: (MultiStreamController instance) => instance.close),
      'closeSync': VmProxy(identifier: 'closeSync', externalInstancePropertyReader: (MultiStreamController instance) => instance.closeSync),
      'done': VmProxy(identifier: 'done', externalInstancePropertyReader: (MultiStreamController instance) => instance.done),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (MultiStreamController instance) => instance.hashCode),
      'hasListener': VmProxy(identifier: 'hasListener', externalInstancePropertyReader: (MultiStreamController instance) => instance.hasListener),
      'isClosed': VmProxy(identifier: 'isClosed', externalInstancePropertyReader: (MultiStreamController instance) => instance.isClosed),
      'isPaused': VmProxy(identifier: 'isPaused', externalInstancePropertyReader: (MultiStreamController instance) => instance.isPaused),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (MultiStreamController instance) => instance.noSuchMethod),
      'onCancel': VmProxy(identifier: 'onCancel', externalInstancePropertyReader: (MultiStreamController instance) => instance.onCancel, externalInstancePropertyWriter: (MultiStreamController instance, value) => instance.onCancel = value),
      'onListen': VmProxy(identifier: 'onListen', externalInstancePropertyReader: (MultiStreamController instance) => instance.onListen, externalInstancePropertyWriter: (MultiStreamController instance, value) => instance.onListen = value),
      'onPause': VmProxy(identifier: 'onPause', externalInstancePropertyReader: (MultiStreamController instance) => instance.onPause, externalInstancePropertyWriter: (MultiStreamController instance, value) => instance.onPause = value),
      'onResume': VmProxy(identifier: 'onResume', externalInstancePropertyReader: (MultiStreamController instance) => instance.onResume, externalInstancePropertyWriter: (MultiStreamController instance, value) => instance.onResume = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (MultiStreamController instance) => instance.runtimeType),
      'sink': VmProxy(identifier: 'sink', externalInstancePropertyReader: (MultiStreamController instance) => instance.sink),
      'stream': VmProxy(identifier: 'stream', externalInstancePropertyReader: (MultiStreamController instance) => instance.stream),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (MultiStreamController instance) => instance.toString),
    },
  );

  ///class MutableRectangle
  static final classMutableRectangle = VmClass<MutableRectangle>(
    identifier: 'MutableRectangle',
    superclassNames: ['Object', '_RectangleBase', 'Rectangle'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => MutableRectangle.new),
      'fromPoints': VmProxy(identifier: 'fromPoints', externalStaticPropertyReader: () => MutableRectangle.fromPoints),
      'bottom': VmProxy(identifier: 'bottom', externalInstancePropertyReader: (MutableRectangle instance) => instance.bottom),
      'bottomLeft': VmProxy(identifier: 'bottomLeft', externalInstancePropertyReader: (MutableRectangle instance) => instance.bottomLeft),
      'bottomRight': VmProxy(identifier: 'bottomRight', externalInstancePropertyReader: (MutableRectangle instance) => instance.bottomRight),
      'boundingBox': VmProxy(identifier: 'boundingBox', externalInstancePropertyReader: (MutableRectangle instance) => instance.boundingBox),
      'containsPoint': VmProxy(identifier: 'containsPoint', externalInstancePropertyReader: (MutableRectangle instance) => instance.containsPoint),
      'containsRectangle': VmProxy(identifier: 'containsRectangle', externalInstancePropertyReader: (MutableRectangle instance) => instance.containsRectangle),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (MutableRectangle instance) => instance.hashCode),
      'height': VmProxy(identifier: 'height', externalInstancePropertyReader: (MutableRectangle instance) => instance.height, externalInstancePropertyWriter: (MutableRectangle instance, value) => instance.height = value),
      'intersection': VmProxy(identifier: 'intersection', externalInstancePropertyReader: (MutableRectangle instance) => instance.intersection),
      'intersects': VmProxy(identifier: 'intersects', externalInstancePropertyReader: (MutableRectangle instance) => instance.intersects),
      'left': VmProxy(identifier: 'left', externalInstancePropertyReader: (MutableRectangle instance) => instance.left, externalInstancePropertyWriter: (MutableRectangle instance, value) => instance.left = value),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (MutableRectangle instance) => instance.noSuchMethod),
      'right': VmProxy(identifier: 'right', externalInstancePropertyReader: (MutableRectangle instance) => instance.right),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (MutableRectangle instance) => instance.runtimeType),
      'top': VmProxy(identifier: 'top', externalInstancePropertyReader: (MutableRectangle instance) => instance.top, externalInstancePropertyWriter: (MutableRectangle instance, value) => instance.top = value),
      'topLeft': VmProxy(identifier: 'topLeft', externalInstancePropertyReader: (MutableRectangle instance) => instance.topLeft),
      'topRight': VmProxy(identifier: 'topRight', externalInstancePropertyReader: (MutableRectangle instance) => instance.topRight),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (MutableRectangle instance) => instance.toString),
      'width': VmProxy(identifier: 'width', externalInstancePropertyReader: (MutableRectangle instance) => instance.width, externalInstancePropertyWriter: (MutableRectangle instance, value) => instance.width = value),
    },
  );

  ///class NetworkInterface
  static final classNetworkInterface = VmClass<NetworkInterface>(
    identifier: 'NetworkInterface',
    superclassNames: ['Object'],
    externalProxyMap: {
      'list': VmProxy(identifier: 'list', externalStaticPropertyReader: () => NetworkInterface.list),
      'listSupported': VmProxy(identifier: 'listSupported', externalStaticPropertyReader: () => NetworkInterface.listSupported),
      'addresses': VmProxy(identifier: 'addresses', externalInstancePropertyReader: (NetworkInterface instance) => instance.addresses),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (NetworkInterface instance) => instance.hashCode),
      'index': VmProxy(identifier: 'index', externalInstancePropertyReader: (NetworkInterface instance) => instance.index),
      'name': VmProxy(identifier: 'name', externalInstancePropertyReader: (NetworkInterface instance) => instance.name),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (NetworkInterface instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (NetworkInterface instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (NetworkInterface instance) => instance.toString),
    },
  );

  ///class NoSuchMethodError
  static final classNoSuchMethodError = VmClass<NoSuchMethodError>(
    identifier: 'NoSuchMethodError',
    superclassNames: ['Object', 'Error'],
    externalProxyMap: {
      'withInvocation': VmProxy(identifier: 'withInvocation', externalStaticPropertyReader: () => NoSuchMethodError.withInvocation),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (NoSuchMethodError instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (NoSuchMethodError instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (NoSuchMethodError instance) => instance.runtimeType),
      'stackTrace': VmProxy(identifier: 'stackTrace', externalInstancePropertyReader: (NoSuchMethodError instance) => instance.stackTrace),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (NoSuchMethodError instance) => instance.toString),
    },
  );

  ///class num
  static final classNum = VmClass<num>(
    identifier: 'num',
    superclassNames: ['Object', 'Comparable'],
    externalProxyMap: {
      'parse': VmProxy(identifier: 'parse', externalStaticPropertyReader: () => num.parse, externalStaticFunctionCaller: (a0, [a1]) => num.parse(a0, a1 == null ? null : (b0) => a1(b0))),
      'tryParse': VmProxy(identifier: 'tryParse', externalStaticPropertyReader: () => num.tryParse),
      'abs': VmProxy(identifier: 'abs', externalInstancePropertyReader: (num instance) => instance.abs),
      'ceil': VmProxy(identifier: 'ceil', externalInstancePropertyReader: (num instance) => instance.ceil),
      'ceilToDouble': VmProxy(identifier: 'ceilToDouble', externalInstancePropertyReader: (num instance) => instance.ceilToDouble),
      'clamp': VmProxy(identifier: 'clamp', externalInstancePropertyReader: (num instance) => instance.clamp),
      'compareTo': VmProxy(identifier: 'compareTo', externalInstancePropertyReader: (num instance) => instance.compareTo),
      'floor': VmProxy(identifier: 'floor', externalInstancePropertyReader: (num instance) => instance.floor),
      'floorToDouble': VmProxy(identifier: 'floorToDouble', externalInstancePropertyReader: (num instance) => instance.floorToDouble),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (num instance) => instance.hashCode),
      'isFinite': VmProxy(identifier: 'isFinite', externalInstancePropertyReader: (num instance) => instance.isFinite),
      'isInfinite': VmProxy(identifier: 'isInfinite', externalInstancePropertyReader: (num instance) => instance.isInfinite),
      'isNaN': VmProxy(identifier: 'isNaN', externalInstancePropertyReader: (num instance) => instance.isNaN),
      'isNegative': VmProxy(identifier: 'isNegative', externalInstancePropertyReader: (num instance) => instance.isNegative),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (num instance) => instance.noSuchMethod),
      'remainder': VmProxy(identifier: 'remainder', externalInstancePropertyReader: (num instance) => instance.remainder),
      'round': VmProxy(identifier: 'round', externalInstancePropertyReader: (num instance) => instance.round),
      'roundToDouble': VmProxy(identifier: 'roundToDouble', externalInstancePropertyReader: (num instance) => instance.roundToDouble),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (num instance) => instance.runtimeType),
      'sign': VmProxy(identifier: 'sign', externalInstancePropertyReader: (num instance) => instance.sign),
      'toDouble': VmProxy(identifier: 'toDouble', externalInstancePropertyReader: (num instance) => instance.toDouble),
      'toInt': VmProxy(identifier: 'toInt', externalInstancePropertyReader: (num instance) => instance.toInt),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (num instance) => instance.toString),
      'toStringAsExponential': VmProxy(identifier: 'toStringAsExponential', externalInstancePropertyReader: (num instance) => instance.toStringAsExponential),
      'toStringAsFixed': VmProxy(identifier: 'toStringAsFixed', externalInstancePropertyReader: (num instance) => instance.toStringAsFixed),
      'toStringAsPrecision': VmProxy(identifier: 'toStringAsPrecision', externalInstancePropertyReader: (num instance) => instance.toStringAsPrecision),
      'truncate': VmProxy(identifier: 'truncate', externalInstancePropertyReader: (num instance) => instance.truncate),
      'truncateToDouble': VmProxy(identifier: 'truncateToDouble', externalInstancePropertyReader: (num instance) => instance.truncateToDouble),
    },
  );

  ///class Object
  static final classObject = VmClass<Object>(
    identifier: 'Object',
    superclassNames: [],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Object.new),
      'hash': VmProxy(identifier: 'hash', externalStaticPropertyReader: () => Object.hash),
      'hashAll': VmProxy(identifier: 'hashAll', externalStaticPropertyReader: () => Object.hashAll),
      'hashAllUnordered': VmProxy(identifier: 'hashAllUnordered', externalStaticPropertyReader: () => Object.hashAllUnordered),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Object instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Object instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Object instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Object instance) => instance.toString),
    },
  );

  ///class OSError
  static final classOSError = VmClass<OSError>(
    identifier: 'OSError',
    superclassNames: ['Object', 'Exception'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => OSError.new),
      'noErrorCode': VmProxy(identifier: 'noErrorCode', externalStaticPropertyReader: () => OSError.noErrorCode),
      'errorCode': VmProxy(identifier: 'errorCode', externalInstancePropertyReader: (OSError instance) => instance.errorCode),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (OSError instance) => instance.hashCode),
      'message': VmProxy(identifier: 'message', externalInstancePropertyReader: (OSError instance) => instance.message),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (OSError instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (OSError instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (OSError instance) => instance.toString),
    },
  );

  ///class OutOfMemoryError
  static final classOutOfMemoryError = VmClass<OutOfMemoryError>(
    identifier: 'OutOfMemoryError',
    superclassNames: ['Object', 'Error'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => OutOfMemoryError.new),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (OutOfMemoryError instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (OutOfMemoryError instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (OutOfMemoryError instance) => instance.runtimeType),
      'stackTrace': VmProxy(identifier: 'stackTrace', externalInstancePropertyReader: (OutOfMemoryError instance) => instance.stackTrace),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (OutOfMemoryError instance) => instance.toString),
    },
  );

  ///class ParallelWaitError
  static final classParallelWaitError = VmClass<ParallelWaitError>(
    identifier: 'ParallelWaitError',
    superclassNames: ['Object', 'Error'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ParallelWaitError.new),
      'errors': VmProxy(identifier: 'errors', externalInstancePropertyReader: (ParallelWaitError instance) => instance.errors),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ParallelWaitError instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ParallelWaitError instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ParallelWaitError instance) => instance.runtimeType),
      'stackTrace': VmProxy(identifier: 'stackTrace', externalInstancePropertyReader: (ParallelWaitError instance) => instance.stackTrace),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ParallelWaitError instance) => instance.toString),
      'values': VmProxy(identifier: 'values', externalInstancePropertyReader: (ParallelWaitError instance) => instance.values),
    },
  );

  ///class PathAccessException
  static final classPathAccessException = VmClass<PathAccessException>(
    identifier: 'PathAccessException',
    superclassNames: ['Object', 'Exception', 'IOException', 'FileSystemException'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => PathAccessException.new),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (PathAccessException instance) => instance.hashCode),
      'message': VmProxy(identifier: 'message', externalInstancePropertyReader: (PathAccessException instance) => instance.message),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (PathAccessException instance) => instance.noSuchMethod),
      'osError': VmProxy(identifier: 'osError', externalInstancePropertyReader: (PathAccessException instance) => instance.osError),
      'path': VmProxy(identifier: 'path', externalInstancePropertyReader: (PathAccessException instance) => instance.path),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (PathAccessException instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (PathAccessException instance) => instance.toString),
    },
  );

  ///class PathExistsException
  static final classPathExistsException = VmClass<PathExistsException>(
    identifier: 'PathExistsException',
    superclassNames: ['Object', 'Exception', 'IOException', 'FileSystemException'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => PathExistsException.new),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (PathExistsException instance) => instance.hashCode),
      'message': VmProxy(identifier: 'message', externalInstancePropertyReader: (PathExistsException instance) => instance.message),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (PathExistsException instance) => instance.noSuchMethod),
      'osError': VmProxy(identifier: 'osError', externalInstancePropertyReader: (PathExistsException instance) => instance.osError),
      'path': VmProxy(identifier: 'path', externalInstancePropertyReader: (PathExistsException instance) => instance.path),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (PathExistsException instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (PathExistsException instance) => instance.toString),
    },
  );

  ///class PathNotFoundException
  static final classPathNotFoundException = VmClass<PathNotFoundException>(
    identifier: 'PathNotFoundException',
    superclassNames: ['Object', 'Exception', 'IOException', 'FileSystemException'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => PathNotFoundException.new),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (PathNotFoundException instance) => instance.hashCode),
      'message': VmProxy(identifier: 'message', externalInstancePropertyReader: (PathNotFoundException instance) => instance.message),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (PathNotFoundException instance) => instance.noSuchMethod),
      'osError': VmProxy(identifier: 'osError', externalInstancePropertyReader: (PathNotFoundException instance) => instance.osError),
      'path': VmProxy(identifier: 'path', externalInstancePropertyReader: (PathNotFoundException instance) => instance.path),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (PathNotFoundException instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (PathNotFoundException instance) => instance.toString),
    },
  );

  ///class Pattern
  static final classPattern = VmClass<Pattern>(
    identifier: 'Pattern',
    superclassNames: ['Object'],
    externalProxyMap: {
      'allMatches': VmProxy(identifier: 'allMatches', externalInstancePropertyReader: (Pattern instance) => instance.allMatches),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Pattern instance) => instance.hashCode),
      'matchAsPrefix': VmProxy(identifier: 'matchAsPrefix', externalInstancePropertyReader: (Pattern instance) => instance.matchAsPrefix),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Pattern instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Pattern instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Pattern instance) => instance.toString),
    },
  );

  ///class Pipe
  static final classPipe = VmClass<Pipe>(
    identifier: 'Pipe',
    superclassNames: ['Object'],
    externalProxyMap: {
      'createSync': VmProxy(identifier: 'createSync', externalStaticPropertyReader: () => Pipe.createSync),
      'create': VmProxy(identifier: 'create', externalStaticPropertyReader: () => Pipe.create),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Pipe instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Pipe instance) => instance.noSuchMethod),
      'read': VmProxy(identifier: 'read', externalInstancePropertyReader: (Pipe instance) => instance.read),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Pipe instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Pipe instance) => instance.toString),
      'write': VmProxy(identifier: 'write', externalInstancePropertyReader: (Pipe instance) => instance.write),
    },
  );

  ///class Platform
  static final classPlatform = VmClass<Platform>(
    identifier: 'Platform',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Platform.new),
      'environment': VmProxy(identifier: 'environment', externalStaticPropertyReader: () => Platform.environment),
      'executable': VmProxy(identifier: 'executable', externalStaticPropertyReader: () => Platform.executable),
      'executableArguments': VmProxy(identifier: 'executableArguments', externalStaticPropertyReader: () => Platform.executableArguments),
      'isAndroid': VmProxy(identifier: 'isAndroid', externalStaticPropertyReader: () => Platform.isAndroid),
      'isFuchsia': VmProxy(identifier: 'isFuchsia', externalStaticPropertyReader: () => Platform.isFuchsia),
      'isIOS': VmProxy(identifier: 'isIOS', externalStaticPropertyReader: () => Platform.isIOS),
      'isLinux': VmProxy(identifier: 'isLinux', externalStaticPropertyReader: () => Platform.isLinux),
      'isMacOS': VmProxy(identifier: 'isMacOS', externalStaticPropertyReader: () => Platform.isMacOS),
      'isWindows': VmProxy(identifier: 'isWindows', externalStaticPropertyReader: () => Platform.isWindows),
      'lineTerminator': VmProxy(identifier: 'lineTerminator', externalStaticPropertyReader: () => Platform.lineTerminator),
      'localeName': VmProxy(identifier: 'localeName', externalStaticPropertyReader: () => Platform.localeName),
      'localHostname': VmProxy(identifier: 'localHostname', externalStaticPropertyReader: () => Platform.localHostname),
      'numberOfProcessors': VmProxy(identifier: 'numberOfProcessors', externalStaticPropertyReader: () => Platform.numberOfProcessors),
      'operatingSystem': VmProxy(identifier: 'operatingSystem', externalStaticPropertyReader: () => Platform.operatingSystem),
      'operatingSystemVersion': VmProxy(identifier: 'operatingSystemVersion', externalStaticPropertyReader: () => Platform.operatingSystemVersion),
      'packageConfig': VmProxy(identifier: 'packageConfig', externalStaticPropertyReader: () => Platform.packageConfig),
      'pathSeparator': VmProxy(identifier: 'pathSeparator', externalStaticPropertyReader: () => Platform.pathSeparator),
      'resolvedExecutable': VmProxy(identifier: 'resolvedExecutable', externalStaticPropertyReader: () => Platform.resolvedExecutable),
      'script': VmProxy(identifier: 'script', externalStaticPropertyReader: () => Platform.script),
      'version': VmProxy(identifier: 'version', externalStaticPropertyReader: () => Platform.version),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Platform instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Platform instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Platform instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Platform instance) => instance.toString),
    },
  );

  ///class Point
  static final classPoint = VmClass<Point>(
    identifier: 'Point',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Point.new),
      'distanceTo': VmProxy(identifier: 'distanceTo', externalInstancePropertyReader: (Point instance) => instance.distanceTo),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Point instance) => instance.hashCode),
      'magnitude': VmProxy(identifier: 'magnitude', externalInstancePropertyReader: (Point instance) => instance.magnitude),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Point instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Point instance) => instance.runtimeType),
      'squaredDistanceTo': VmProxy(identifier: 'squaredDistanceTo', externalInstancePropertyReader: (Point instance) => instance.squaredDistanceTo),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Point instance) => instance.toString),
      'x': VmProxy(identifier: 'x', externalInstancePropertyReader: (Point instance) => instance.x),
      'y': VmProxy(identifier: 'y', externalInstancePropertyReader: (Point instance) => instance.y),
    },
  );

  ///class pragma
  static final classPragma = VmClass<pragma>(
    identifier: 'pragma',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => pragma.new),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (pragma instance) => instance.hashCode),
      'name': VmProxy(identifier: 'name', externalInstancePropertyReader: (pragma instance) => instance.name),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (pragma instance) => instance.noSuchMethod),
      'options': VmProxy(identifier: 'options', externalInstancePropertyReader: (pragma instance) => instance.options),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (pragma instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (pragma instance) => instance.toString),
    },
  );

  ///class Process
  static final classProcess = VmClass<Process>(
    identifier: 'Process',
    superclassNames: ['Object'],
    externalProxyMap: {
      'killPid': VmProxy(identifier: 'killPid', externalStaticPropertyReader: () => Process.killPid),
      'run': VmProxy(identifier: 'run', externalStaticPropertyReader: () => Process.run),
      'runSync': VmProxy(identifier: 'runSync', externalStaticPropertyReader: () => Process.runSync),
      'start': VmProxy(identifier: 'start', externalStaticPropertyReader: () => Process.start),
      'exitCode': VmProxy(identifier: 'exitCode', externalInstancePropertyReader: (Process instance) => instance.exitCode),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Process instance) => instance.hashCode),
      'kill': VmProxy(identifier: 'kill', externalInstancePropertyReader: (Process instance) => instance.kill),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Process instance) => instance.noSuchMethod),
      'pid': VmProxy(identifier: 'pid', externalInstancePropertyReader: (Process instance) => instance.pid),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Process instance) => instance.runtimeType),
      'stderr': VmProxy(identifier: 'stderr', externalInstancePropertyReader: (Process instance) => instance.stderr),
      'stdin': VmProxy(identifier: 'stdin', externalInstancePropertyReader: (Process instance) => instance.stdin),
      'stdout': VmProxy(identifier: 'stdout', externalInstancePropertyReader: (Process instance) => instance.stdout),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Process instance) => instance.toString),
    },
  );

  ///class ProcessException
  static final classProcessException = VmClass<ProcessException>(
    identifier: 'ProcessException',
    superclassNames: ['Object', 'Exception', 'IOException'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ProcessException.new),
      'arguments': VmProxy(identifier: 'arguments', externalInstancePropertyReader: (ProcessException instance) => instance.arguments),
      'errorCode': VmProxy(identifier: 'errorCode', externalInstancePropertyReader: (ProcessException instance) => instance.errorCode),
      'executable': VmProxy(identifier: 'executable', externalInstancePropertyReader: (ProcessException instance) => instance.executable),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ProcessException instance) => instance.hashCode),
      'message': VmProxy(identifier: 'message', externalInstancePropertyReader: (ProcessException instance) => instance.message),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ProcessException instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ProcessException instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ProcessException instance) => instance.toString),
    },
  );

  ///class ProcessInfo
  static final classProcessInfo = VmClass<ProcessInfo>(
    identifier: 'ProcessInfo',
    superclassNames: ['Object'],
    externalProxyMap: {
      'currentRss': VmProxy(identifier: 'currentRss', externalStaticPropertyReader: () => ProcessInfo.currentRss),
      'maxRss': VmProxy(identifier: 'maxRss', externalStaticPropertyReader: () => ProcessInfo.maxRss),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ProcessInfo instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ProcessInfo instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ProcessInfo instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ProcessInfo instance) => instance.toString),
    },
  );

  ///class ProcessResult
  static final classProcessResult = VmClass<ProcessResult>(
    identifier: 'ProcessResult',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ProcessResult.new),
      'exitCode': VmProxy(identifier: 'exitCode', externalInstancePropertyReader: (ProcessResult instance) => instance.exitCode),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ProcessResult instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ProcessResult instance) => instance.noSuchMethod),
      'pid': VmProxy(identifier: 'pid', externalInstancePropertyReader: (ProcessResult instance) => instance.pid),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ProcessResult instance) => instance.runtimeType),
      'stderr': VmProxy(identifier: 'stderr', externalInstancePropertyReader: (ProcessResult instance) => instance.stderr),
      'stdout': VmProxy(identifier: 'stdout', externalInstancePropertyReader: (ProcessResult instance) => instance.stdout),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ProcessResult instance) => instance.toString),
    },
  );

  ///class ProcessSignal
  static final classProcessSignal = VmClass<ProcessSignal>(
    identifier: 'ProcessSignal',
    superclassNames: ['Object'],
    externalProxyMap: {
      'sigabrt': VmProxy(identifier: 'sigabrt', externalStaticPropertyReader: () => ProcessSignal.sigabrt),
      'sigalrm': VmProxy(identifier: 'sigalrm', externalStaticPropertyReader: () => ProcessSignal.sigalrm),
      'sigbus': VmProxy(identifier: 'sigbus', externalStaticPropertyReader: () => ProcessSignal.sigbus),
      'sigchld': VmProxy(identifier: 'sigchld', externalStaticPropertyReader: () => ProcessSignal.sigchld),
      'sigcont': VmProxy(identifier: 'sigcont', externalStaticPropertyReader: () => ProcessSignal.sigcont),
      'sigfpe': VmProxy(identifier: 'sigfpe', externalStaticPropertyReader: () => ProcessSignal.sigfpe),
      'sighup': VmProxy(identifier: 'sighup', externalStaticPropertyReader: () => ProcessSignal.sighup),
      'sigill': VmProxy(identifier: 'sigill', externalStaticPropertyReader: () => ProcessSignal.sigill),
      'sigint': VmProxy(identifier: 'sigint', externalStaticPropertyReader: () => ProcessSignal.sigint),
      'sigkill': VmProxy(identifier: 'sigkill', externalStaticPropertyReader: () => ProcessSignal.sigkill),
      'sigpipe': VmProxy(identifier: 'sigpipe', externalStaticPropertyReader: () => ProcessSignal.sigpipe),
      'sigpoll': VmProxy(identifier: 'sigpoll', externalStaticPropertyReader: () => ProcessSignal.sigpoll),
      'sigprof': VmProxy(identifier: 'sigprof', externalStaticPropertyReader: () => ProcessSignal.sigprof),
      'sigquit': VmProxy(identifier: 'sigquit', externalStaticPropertyReader: () => ProcessSignal.sigquit),
      'sigsegv': VmProxy(identifier: 'sigsegv', externalStaticPropertyReader: () => ProcessSignal.sigsegv),
      'sigstop': VmProxy(identifier: 'sigstop', externalStaticPropertyReader: () => ProcessSignal.sigstop),
      'sigsys': VmProxy(identifier: 'sigsys', externalStaticPropertyReader: () => ProcessSignal.sigsys),
      'sigterm': VmProxy(identifier: 'sigterm', externalStaticPropertyReader: () => ProcessSignal.sigterm),
      'sigtrap': VmProxy(identifier: 'sigtrap', externalStaticPropertyReader: () => ProcessSignal.sigtrap),
      'sigtstp': VmProxy(identifier: 'sigtstp', externalStaticPropertyReader: () => ProcessSignal.sigtstp),
      'sigttin': VmProxy(identifier: 'sigttin', externalStaticPropertyReader: () => ProcessSignal.sigttin),
      'sigttou': VmProxy(identifier: 'sigttou', externalStaticPropertyReader: () => ProcessSignal.sigttou),
      'sigurg': VmProxy(identifier: 'sigurg', externalStaticPropertyReader: () => ProcessSignal.sigurg),
      'sigusr1': VmProxy(identifier: 'sigusr1', externalStaticPropertyReader: () => ProcessSignal.sigusr1),
      'sigusr2': VmProxy(identifier: 'sigusr2', externalStaticPropertyReader: () => ProcessSignal.sigusr2),
      'sigvtalrm': VmProxy(identifier: 'sigvtalrm', externalStaticPropertyReader: () => ProcessSignal.sigvtalrm),
      'sigwinch': VmProxy(identifier: 'sigwinch', externalStaticPropertyReader: () => ProcessSignal.sigwinch),
      'sigxcpu': VmProxy(identifier: 'sigxcpu', externalStaticPropertyReader: () => ProcessSignal.sigxcpu),
      'sigxfsz': VmProxy(identifier: 'sigxfsz', externalStaticPropertyReader: () => ProcessSignal.sigxfsz),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ProcessSignal instance) => instance.hashCode),
      'name': VmProxy(identifier: 'name', externalInstancePropertyReader: (ProcessSignal instance) => instance.name),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ProcessSignal instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ProcessSignal instance) => instance.runtimeType),
      'signalNumber': VmProxy(identifier: 'signalNumber', externalInstancePropertyReader: (ProcessSignal instance) => instance.signalNumber),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ProcessSignal instance) => instance.toString),
      'watch': VmProxy(identifier: 'watch', externalInstancePropertyReader: (ProcessSignal instance) => instance.watch),
    },
  );

  ///class ProcessStartMode
  static final classProcessStartMode = VmClass<ProcessStartMode>(
    identifier: 'ProcessStartMode',
    superclassNames: ['Object'],
    externalProxyMap: {
      'detached': VmProxy(identifier: 'detached', externalStaticPropertyReader: () => ProcessStartMode.detached),
      'detachedWithStdio': VmProxy(identifier: 'detachedWithStdio', externalStaticPropertyReader: () => ProcessStartMode.detachedWithStdio),
      'inheritStdio': VmProxy(identifier: 'inheritStdio', externalStaticPropertyReader: () => ProcessStartMode.inheritStdio),
      'normal': VmProxy(identifier: 'normal', externalStaticPropertyReader: () => ProcessStartMode.normal),
      'values': VmProxy(identifier: 'values', externalStaticPropertyReader: () => ProcessStartMode.values),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ProcessStartMode instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ProcessStartMode instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ProcessStartMode instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ProcessStartMode instance) => instance.toString),
    },
  );

  ///class Queue
  static final classQueue = VmClass<Queue>(
    identifier: 'Queue',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Queue.new),
      'from': VmProxy(identifier: 'from', externalStaticPropertyReader: () => Queue.from),
      'of': VmProxy(identifier: 'of', externalStaticPropertyReader: () => Queue.of),
      'castFrom': VmProxy(identifier: 'castFrom', externalStaticPropertyReader: () => Queue.castFrom),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (Queue instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (Queue instance) => instance.addAll),
      'addFirst': VmProxy(identifier: 'addFirst', externalInstancePropertyReader: (Queue instance) => instance.addFirst),
      'addLast': VmProxy(identifier: 'addLast', externalInstancePropertyReader: (Queue instance) => instance.addLast),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (Queue instance) => instance.any, externalInstanceFunctionCaller: (Queue instance, a0) => instance.any((b0) => a0(b0))),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (Queue instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (Queue instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (Queue instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (Queue instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (Queue instance) => instance.elementAtOrNull),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (Queue instance) => instance.every, externalInstanceFunctionCaller: (Queue instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (Queue instance) => instance.expand, externalInstanceFunctionCaller: (Queue instance, a0) => instance.expand((b0) => a0(b0))),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (Queue instance) => instance.first),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (Queue instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (Queue instance) => instance.firstWhere, externalInstanceFunctionCaller: (Queue instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (Queue instance) => instance.fold, externalInstanceFunctionCaller: (Queue instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (Queue instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (Queue instance) => instance.forEach, externalInstanceFunctionCaller: (Queue instance, a0) => instance.forEach((b0) => a0(b0))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Queue instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (Queue instance) => instance.indexed),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (Queue instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (Queue instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (Queue instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (Queue instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (Queue instance) => instance.last),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (Queue instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (Queue instance) => instance.lastWhere, externalInstanceFunctionCaller: (Queue instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (Queue instance) => instance.length),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (Queue instance) => instance.map, externalInstanceFunctionCaller: (Queue instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (Queue instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Queue instance) => instance.noSuchMethod),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (Queue instance) => instance.reduce, externalInstanceFunctionCaller: (Queue instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (Queue instance) => instance.remove),
      'removeFirst': VmProxy(identifier: 'removeFirst', externalInstancePropertyReader: (Queue instance) => instance.removeFirst),
      'removeLast': VmProxy(identifier: 'removeLast', externalInstancePropertyReader: (Queue instance) => instance.removeLast),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (Queue instance) => instance.removeWhere, externalInstanceFunctionCaller: (Queue instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (Queue instance) => instance.retainWhere, externalInstanceFunctionCaller: (Queue instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Queue instance) => instance.runtimeType),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (Queue instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (Queue instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (Queue instance) => instance.singleWhere, externalInstanceFunctionCaller: (Queue instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (Queue instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (Queue instance) => instance.skipWhile, externalInstanceFunctionCaller: (Queue instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (Queue instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (Queue instance) => instance.takeWhile, externalInstanceFunctionCaller: (Queue instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (Queue instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (Queue instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Queue instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (Queue instance) => instance.where, externalInstanceFunctionCaller: (Queue instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (Queue instance) => instance.whereType),
    },
  );

  ///class Random
  static final classRandom = VmClass<Random>(
    identifier: 'Random',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Random.new),
      'secure': VmProxy(identifier: 'secure', externalStaticPropertyReader: () => Random.secure),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Random instance) => instance.hashCode),
      'nextBool': VmProxy(identifier: 'nextBool', externalInstancePropertyReader: (Random instance) => instance.nextBool),
      'nextDouble': VmProxy(identifier: 'nextDouble', externalInstancePropertyReader: (Random instance) => instance.nextDouble),
      'nextInt': VmProxy(identifier: 'nextInt', externalInstancePropertyReader: (Random instance) => instance.nextInt),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Random instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Random instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Random instance) => instance.toString),
    },
  );

  ///class RandomAccessFile
  static final classRandomAccessFile = VmClass<RandomAccessFile>(
    identifier: 'RandomAccessFile',
    superclassNames: ['Object'],
    externalProxyMap: {
      'close': VmProxy(identifier: 'close', externalInstancePropertyReader: (RandomAccessFile instance) => instance.close),
      'closeSync': VmProxy(identifier: 'closeSync', externalInstancePropertyReader: (RandomAccessFile instance) => instance.closeSync),
      'flush': VmProxy(identifier: 'flush', externalInstancePropertyReader: (RandomAccessFile instance) => instance.flush),
      'flushSync': VmProxy(identifier: 'flushSync', externalInstancePropertyReader: (RandomAccessFile instance) => instance.flushSync),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (RandomAccessFile instance) => instance.hashCode),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (RandomAccessFile instance) => instance.length),
      'lengthSync': VmProxy(identifier: 'lengthSync', externalInstancePropertyReader: (RandomAccessFile instance) => instance.lengthSync),
      'lock': VmProxy(identifier: 'lock', externalInstancePropertyReader: (RandomAccessFile instance) => instance.lock),
      'lockSync': VmProxy(identifier: 'lockSync', externalInstancePropertyReader: (RandomAccessFile instance) => instance.lockSync),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (RandomAccessFile instance) => instance.noSuchMethod),
      'path': VmProxy(identifier: 'path', externalInstancePropertyReader: (RandomAccessFile instance) => instance.path),
      'position': VmProxy(identifier: 'position', externalInstancePropertyReader: (RandomAccessFile instance) => instance.position),
      'positionSync': VmProxy(identifier: 'positionSync', externalInstancePropertyReader: (RandomAccessFile instance) => instance.positionSync),
      'read': VmProxy(identifier: 'read', externalInstancePropertyReader: (RandomAccessFile instance) => instance.read),
      'readByte': VmProxy(identifier: 'readByte', externalInstancePropertyReader: (RandomAccessFile instance) => instance.readByte),
      'readByteSync': VmProxy(identifier: 'readByteSync', externalInstancePropertyReader: (RandomAccessFile instance) => instance.readByteSync),
      'readInto': VmProxy(identifier: 'readInto', externalInstancePropertyReader: (RandomAccessFile instance) => instance.readInto),
      'readIntoSync': VmProxy(identifier: 'readIntoSync', externalInstancePropertyReader: (RandomAccessFile instance) => instance.readIntoSync),
      'readSync': VmProxy(identifier: 'readSync', externalInstancePropertyReader: (RandomAccessFile instance) => instance.readSync),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (RandomAccessFile instance) => instance.runtimeType),
      'setPosition': VmProxy(identifier: 'setPosition', externalInstancePropertyReader: (RandomAccessFile instance) => instance.setPosition),
      'setPositionSync': VmProxy(identifier: 'setPositionSync', externalInstancePropertyReader: (RandomAccessFile instance) => instance.setPositionSync),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (RandomAccessFile instance) => instance.toString),
      'truncate': VmProxy(identifier: 'truncate', externalInstancePropertyReader: (RandomAccessFile instance) => instance.truncate),
      'truncateSync': VmProxy(identifier: 'truncateSync', externalInstancePropertyReader: (RandomAccessFile instance) => instance.truncateSync),
      'unlock': VmProxy(identifier: 'unlock', externalInstancePropertyReader: (RandomAccessFile instance) => instance.unlock),
      'unlockSync': VmProxy(identifier: 'unlockSync', externalInstancePropertyReader: (RandomAccessFile instance) => instance.unlockSync),
      'writeByte': VmProxy(identifier: 'writeByte', externalInstancePropertyReader: (RandomAccessFile instance) => instance.writeByte),
      'writeByteSync': VmProxy(identifier: 'writeByteSync', externalInstancePropertyReader: (RandomAccessFile instance) => instance.writeByteSync),
      'writeFrom': VmProxy(identifier: 'writeFrom', externalInstancePropertyReader: (RandomAccessFile instance) => instance.writeFrom),
      'writeFromSync': VmProxy(identifier: 'writeFromSync', externalInstancePropertyReader: (RandomAccessFile instance) => instance.writeFromSync),
      'writeString': VmProxy(identifier: 'writeString', externalInstancePropertyReader: (RandomAccessFile instance) => instance.writeString),
      'writeStringSync': VmProxy(identifier: 'writeStringSync', externalInstancePropertyReader: (RandomAccessFile instance) => instance.writeStringSync),
    },
  );

  ///class RangeError
  static final classRangeError = VmClass<RangeError>(
    identifier: 'RangeError',
    superclassNames: ['Object', 'Error', 'ArgumentError'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => RangeError.new),
      'index': VmProxy(identifier: 'index', externalStaticPropertyReader: () => RangeError.index),
      'range': VmProxy(identifier: 'range', externalStaticPropertyReader: () => RangeError.range),
      'value': VmProxy(identifier: 'value', externalStaticPropertyReader: () => RangeError.value),
      'checkNotNegative': VmProxy(identifier: 'checkNotNegative', externalStaticPropertyReader: () => RangeError.checkNotNegative),
      'checkValidIndex': VmProxy(identifier: 'checkValidIndex', externalStaticPropertyReader: () => RangeError.checkValidIndex),
      'checkValidRange': VmProxy(identifier: 'checkValidRange', externalStaticPropertyReader: () => RangeError.checkValidRange),
      'checkValueInInterval': VmProxy(identifier: 'checkValueInInterval', externalStaticPropertyReader: () => RangeError.checkValueInInterval),
      'end': VmProxy(identifier: 'end', externalInstancePropertyReader: (RangeError instance) => instance.end),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (RangeError instance) => instance.hashCode),
      'invalidValue': VmProxy(identifier: 'invalidValue', externalInstancePropertyReader: (RangeError instance) => instance.invalidValue),
      'message': VmProxy(identifier: 'message', externalInstancePropertyReader: (RangeError instance) => instance.message),
      'name': VmProxy(identifier: 'name', externalInstancePropertyReader: (RangeError instance) => instance.name),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (RangeError instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (RangeError instance) => instance.runtimeType),
      'stackTrace': VmProxy(identifier: 'stackTrace', externalInstancePropertyReader: (RangeError instance) => instance.stackTrace),
      'start': VmProxy(identifier: 'start', externalInstancePropertyReader: (RangeError instance) => instance.start),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (RangeError instance) => instance.toString),
    },
  );

  ///class RawDatagramSocket
  static final classRawDatagramSocket = VmClass<RawDatagramSocket>(
    identifier: 'RawDatagramSocket',
    superclassNames: ['Object', 'Stream'],
    externalProxyMap: {
      'bind': VmProxy(identifier: 'bind', externalStaticPropertyReader: () => RawDatagramSocket.bind),
      'address': VmProxy(identifier: 'address', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.address),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.any, externalInstanceFunctionCaller: (RawDatagramSocket instance, a0) => instance.any((b0) => a0(b0))),
      'asBroadcastStream': VmProxy(identifier: 'asBroadcastStream', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.asBroadcastStream, externalInstanceFunctionCaller: (RawDatagramSocket instance, {onListen, onCancel}) => instance.asBroadcastStream(onListen: onListen == null ? null : (b0) => onListen(b0), onCancel: onCancel == null ? null : (b0) => onCancel(b0))),
      'asyncExpand': VmProxy(identifier: 'asyncExpand', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.asyncExpand, externalInstanceFunctionCaller: (RawDatagramSocket instance, a0) => instance.asyncExpand((b0) => a0(b0))),
      'asyncMap': VmProxy(identifier: 'asyncMap', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.asyncMap, externalInstanceFunctionCaller: (RawDatagramSocket instance, a0) => instance.asyncMap((b0) => a0(b0))),
      'broadcastEnabled': VmProxy(identifier: 'broadcastEnabled', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.broadcastEnabled, externalInstancePropertyWriter: (RawDatagramSocket instance, value) => instance.broadcastEnabled = value),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.cast),
      'close': VmProxy(identifier: 'close', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.close),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.contains),
      'distinct': VmProxy(identifier: 'distinct', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.distinct, externalInstanceFunctionCaller: (RawDatagramSocket instance, [a0]) => instance.distinct(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'drain': VmProxy(identifier: 'drain', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.drain),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.elementAt),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.every, externalInstanceFunctionCaller: (RawDatagramSocket instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.expand, externalInstanceFunctionCaller: (RawDatagramSocket instance, a0) => instance.expand((b0) => a0(b0))),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.first),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.firstWhere, externalInstanceFunctionCaller: (RawDatagramSocket instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.fold, externalInstanceFunctionCaller: (RawDatagramSocket instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.forEach, externalInstanceFunctionCaller: (RawDatagramSocket instance, a0) => instance.forEach((b0) => a0(b0))),
      'getRawOption': VmProxy(identifier: 'getRawOption', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.getRawOption),
      'handleError': VmProxy(identifier: 'handleError', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.handleError, externalInstanceFunctionCaller: (RawDatagramSocket instance, a0, {test}) => instance.handleError(a0, test: test == null ? null : (b0) => test(b0))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.hashCode),
      'isBroadcast': VmProxy(identifier: 'isBroadcast', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.isBroadcast),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.isEmpty),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.join),
      'joinMulticast': VmProxy(identifier: 'joinMulticast', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.joinMulticast),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.last),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.lastWhere, externalInstanceFunctionCaller: (RawDatagramSocket instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'leaveMulticast': VmProxy(identifier: 'leaveMulticast', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.leaveMulticast),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.length),
      'listen': VmProxy(identifier: 'listen', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.listen, externalInstanceFunctionCaller: (RawDatagramSocket instance, a0, {onError, onDone, cancelOnError}) => instance.listen(a0 == null ? null : (b0) => a0(b0), onError: onError, onDone: onDone, cancelOnError: cancelOnError)),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.map, externalInstanceFunctionCaller: (RawDatagramSocket instance, a0) => instance.map((b0) => a0(b0))),
      'multicastHops': VmProxy(identifier: 'multicastHops', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.multicastHops, externalInstancePropertyWriter: (RawDatagramSocket instance, value) => instance.multicastHops = value),
      'multicastInterface': VmProxy(identifier: 'multicastInterface', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.multicastInterface, externalInstancePropertyWriter: (RawDatagramSocket instance, value) => instance.multicastInterface = value),
      'multicastLoopback': VmProxy(identifier: 'multicastLoopback', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.multicastLoopback, externalInstancePropertyWriter: (RawDatagramSocket instance, value) => instance.multicastLoopback = value),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.noSuchMethod),
      'pipe': VmProxy(identifier: 'pipe', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.pipe),
      'port': VmProxy(identifier: 'port', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.port),
      'readEventsEnabled': VmProxy(identifier: 'readEventsEnabled', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.readEventsEnabled, externalInstancePropertyWriter: (RawDatagramSocket instance, value) => instance.readEventsEnabled = value),
      'receive': VmProxy(identifier: 'receive', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.receive),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.reduce, externalInstanceFunctionCaller: (RawDatagramSocket instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.runtimeType),
      'send': VmProxy(identifier: 'send', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.send),
      'setRawOption': VmProxy(identifier: 'setRawOption', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.setRawOption),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.single),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.singleWhere, externalInstanceFunctionCaller: (RawDatagramSocket instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.skipWhile, externalInstanceFunctionCaller: (RawDatagramSocket instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.takeWhile, externalInstanceFunctionCaller: (RawDatagramSocket instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'timeout': VmProxy(identifier: 'timeout', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.timeout, externalInstanceFunctionCaller: (RawDatagramSocket instance, a0, {onTimeout}) => instance.timeout(a0, onTimeout: onTimeout == null ? null : (b0) => onTimeout(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.toString),
      'transform': VmProxy(identifier: 'transform', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.transform),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.where, externalInstanceFunctionCaller: (RawDatagramSocket instance, a0) => instance.where((b0) => a0(b0))),
      'writeEventsEnabled': VmProxy(identifier: 'writeEventsEnabled', externalInstancePropertyReader: (RawDatagramSocket instance) => instance.writeEventsEnabled, externalInstancePropertyWriter: (RawDatagramSocket instance, value) => instance.writeEventsEnabled = value),
    },
  );

  ///class RawReceivePort
  static final classRawReceivePort = VmClass<RawReceivePort>(
    identifier: 'RawReceivePort',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => RawReceivePort.new),
      'close': VmProxy(identifier: 'close', externalInstancePropertyReader: (RawReceivePort instance) => instance.close),
      'handler': VmProxy(identifier: 'handler', externalInstancePropertyWriter: (RawReceivePort instance, value) => instance.handler = value),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (RawReceivePort instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (RawReceivePort instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (RawReceivePort instance) => instance.runtimeType),
      'sendPort': VmProxy(identifier: 'sendPort', externalInstancePropertyReader: (RawReceivePort instance) => instance.sendPort),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (RawReceivePort instance) => instance.toString),
    },
  );

  ///class RawSecureServerSocket
  static final classRawSecureServerSocket = VmClass<RawSecureServerSocket>(
    identifier: 'RawSecureServerSocket',
    superclassNames: ['Object', 'Stream'],
    externalProxyMap: {
      'bind': VmProxy(identifier: 'bind', externalStaticPropertyReader: () => RawSecureServerSocket.bind),
      'address': VmProxy(identifier: 'address', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.address),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.any, externalInstanceFunctionCaller: (RawSecureServerSocket instance, a0) => instance.any((b0) => a0(b0))),
      'asBroadcastStream': VmProxy(identifier: 'asBroadcastStream', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.asBroadcastStream, externalInstanceFunctionCaller: (RawSecureServerSocket instance, {onListen, onCancel}) => instance.asBroadcastStream(onListen: onListen == null ? null : (b0) => onListen(b0), onCancel: onCancel == null ? null : (b0) => onCancel(b0))),
      'asyncExpand': VmProxy(identifier: 'asyncExpand', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.asyncExpand, externalInstanceFunctionCaller: (RawSecureServerSocket instance, a0) => instance.asyncExpand((b0) => a0(b0))),
      'asyncMap': VmProxy(identifier: 'asyncMap', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.asyncMap, externalInstanceFunctionCaller: (RawSecureServerSocket instance, a0) => instance.asyncMap((b0) => a0(b0))),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.cast),
      'close': VmProxy(identifier: 'close', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.close),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.contains),
      'distinct': VmProxy(identifier: 'distinct', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.distinct, externalInstanceFunctionCaller: (RawSecureServerSocket instance, [a0]) => instance.distinct(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'drain': VmProxy(identifier: 'drain', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.drain),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.elementAt),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.every, externalInstanceFunctionCaller: (RawSecureServerSocket instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.expand, externalInstanceFunctionCaller: (RawSecureServerSocket instance, a0) => instance.expand((b0) => a0(b0))),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.first),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.firstWhere, externalInstanceFunctionCaller: (RawSecureServerSocket instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.fold, externalInstanceFunctionCaller: (RawSecureServerSocket instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.forEach, externalInstanceFunctionCaller: (RawSecureServerSocket instance, a0) => instance.forEach((b0) => a0(b0))),
      'handleError': VmProxy(identifier: 'handleError', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.handleError, externalInstanceFunctionCaller: (RawSecureServerSocket instance, a0, {test}) => instance.handleError(a0, test: test == null ? null : (b0) => test(b0))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.hashCode),
      'isBroadcast': VmProxy(identifier: 'isBroadcast', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.isBroadcast),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.isEmpty),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.last),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.lastWhere, externalInstanceFunctionCaller: (RawSecureServerSocket instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.length),
      'listen': VmProxy(identifier: 'listen', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.listen, externalInstanceFunctionCaller: (RawSecureServerSocket instance, a0, {onError, onDone, cancelOnError}) => instance.listen(a0 == null ? null : (b0) => a0(b0), onError: onError, onDone: onDone, cancelOnError: cancelOnError)),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.map, externalInstanceFunctionCaller: (RawSecureServerSocket instance, a0) => instance.map((b0) => a0(b0))),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.noSuchMethod),
      'pipe': VmProxy(identifier: 'pipe', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.pipe),
      'port': VmProxy(identifier: 'port', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.port),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.reduce, externalInstanceFunctionCaller: (RawSecureServerSocket instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'requestClientCertificate': VmProxy(identifier: 'requestClientCertificate', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.requestClientCertificate),
      'requireClientCertificate': VmProxy(identifier: 'requireClientCertificate', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.requireClientCertificate),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.runtimeType),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.single),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.singleWhere, externalInstanceFunctionCaller: (RawSecureServerSocket instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.skipWhile, externalInstanceFunctionCaller: (RawSecureServerSocket instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'supportedProtocols': VmProxy(identifier: 'supportedProtocols', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.supportedProtocols),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.takeWhile, externalInstanceFunctionCaller: (RawSecureServerSocket instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'timeout': VmProxy(identifier: 'timeout', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.timeout, externalInstanceFunctionCaller: (RawSecureServerSocket instance, a0, {onTimeout}) => instance.timeout(a0, onTimeout: onTimeout == null ? null : (b0) => onTimeout(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.toString),
      'transform': VmProxy(identifier: 'transform', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.transform),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (RawSecureServerSocket instance) => instance.where, externalInstanceFunctionCaller: (RawSecureServerSocket instance, a0) => instance.where((b0) => a0(b0))),
    },
  );

  ///class RawSecureSocket
  static final classRawSecureSocket = VmClass<RawSecureSocket>(
    identifier: 'RawSecureSocket',
    superclassNames: ['Object', 'Stream', 'RawSocket'],
    externalProxyMap: {
      'connect': VmProxy(identifier: 'connect', externalStaticPropertyReader: () => RawSecureSocket.connect, externalStaticFunctionCaller: (a0, a1, {context, onBadCertificate, keyLog, supportedProtocols, timeout}) => RawSecureSocket.connect(a0, a1, context: context, onBadCertificate: onBadCertificate == null ? null : (b0) => onBadCertificate(b0), keyLog: keyLog == null ? null : (b0) => keyLog(b0), supportedProtocols: supportedProtocols, timeout: timeout)),
      'secure': VmProxy(identifier: 'secure', externalStaticPropertyReader: () => RawSecureSocket.secure, externalStaticFunctionCaller: (a0, {subscription, host, context, onBadCertificate, keyLog, supportedProtocols}) => RawSecureSocket.secure(a0, subscription: subscription, host: host, context: context, onBadCertificate: onBadCertificate == null ? null : (b0) => onBadCertificate(b0), keyLog: keyLog == null ? null : (b0) => keyLog(b0), supportedProtocols: supportedProtocols)),
      'secureServer': VmProxy(identifier: 'secureServer', externalStaticPropertyReader: () => RawSecureSocket.secureServer),
      'startConnect': VmProxy(identifier: 'startConnect', externalStaticPropertyReader: () => RawSecureSocket.startConnect, externalStaticFunctionCaller: (a0, a1, {context, onBadCertificate, keyLog, supportedProtocols}) => RawSecureSocket.startConnect(a0, a1, context: context, onBadCertificate: onBadCertificate == null ? null : (b0) => onBadCertificate(b0), keyLog: keyLog == null ? null : (b0) => keyLog(b0), supportedProtocols: supportedProtocols)),
      'address': VmProxy(identifier: 'address', externalInstancePropertyReader: (RawSecureSocket instance) => instance.address),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (RawSecureSocket instance) => instance.any, externalInstanceFunctionCaller: (RawSecureSocket instance, a0) => instance.any((b0) => a0(b0))),
      'asBroadcastStream': VmProxy(identifier: 'asBroadcastStream', externalInstancePropertyReader: (RawSecureSocket instance) => instance.asBroadcastStream, externalInstanceFunctionCaller: (RawSecureSocket instance, {onListen, onCancel}) => instance.asBroadcastStream(onListen: onListen == null ? null : (b0) => onListen(b0), onCancel: onCancel == null ? null : (b0) => onCancel(b0))),
      'asyncExpand': VmProxy(identifier: 'asyncExpand', externalInstancePropertyReader: (RawSecureSocket instance) => instance.asyncExpand, externalInstanceFunctionCaller: (RawSecureSocket instance, a0) => instance.asyncExpand((b0) => a0(b0))),
      'asyncMap': VmProxy(identifier: 'asyncMap', externalInstancePropertyReader: (RawSecureSocket instance) => instance.asyncMap, externalInstanceFunctionCaller: (RawSecureSocket instance, a0) => instance.asyncMap((b0) => a0(b0))),
      'available': VmProxy(identifier: 'available', externalInstancePropertyReader: (RawSecureSocket instance) => instance.available),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (RawSecureSocket instance) => instance.cast),
      'close': VmProxy(identifier: 'close', externalInstancePropertyReader: (RawSecureSocket instance) => instance.close),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (RawSecureSocket instance) => instance.contains),
      'distinct': VmProxy(identifier: 'distinct', externalInstancePropertyReader: (RawSecureSocket instance) => instance.distinct, externalInstanceFunctionCaller: (RawSecureSocket instance, [a0]) => instance.distinct(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'drain': VmProxy(identifier: 'drain', externalInstancePropertyReader: (RawSecureSocket instance) => instance.drain),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (RawSecureSocket instance) => instance.elementAt),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (RawSecureSocket instance) => instance.every, externalInstanceFunctionCaller: (RawSecureSocket instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (RawSecureSocket instance) => instance.expand, externalInstanceFunctionCaller: (RawSecureSocket instance, a0) => instance.expand((b0) => a0(b0))),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (RawSecureSocket instance) => instance.first),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (RawSecureSocket instance) => instance.firstWhere, externalInstanceFunctionCaller: (RawSecureSocket instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (RawSecureSocket instance) => instance.fold, externalInstanceFunctionCaller: (RawSecureSocket instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (RawSecureSocket instance) => instance.forEach, externalInstanceFunctionCaller: (RawSecureSocket instance, a0) => instance.forEach((b0) => a0(b0))),
      'getRawOption': VmProxy(identifier: 'getRawOption', externalInstancePropertyReader: (RawSecureSocket instance) => instance.getRawOption),
      'handleError': VmProxy(identifier: 'handleError', externalInstancePropertyReader: (RawSecureSocket instance) => instance.handleError, externalInstanceFunctionCaller: (RawSecureSocket instance, a0, {test}) => instance.handleError(a0, test: test == null ? null : (b0) => test(b0))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (RawSecureSocket instance) => instance.hashCode),
      'isBroadcast': VmProxy(identifier: 'isBroadcast', externalInstancePropertyReader: (RawSecureSocket instance) => instance.isBroadcast),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (RawSecureSocket instance) => instance.isEmpty),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (RawSecureSocket instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (RawSecureSocket instance) => instance.last),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (RawSecureSocket instance) => instance.lastWhere, externalInstanceFunctionCaller: (RawSecureSocket instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (RawSecureSocket instance) => instance.length),
      'listen': VmProxy(identifier: 'listen', externalInstancePropertyReader: (RawSecureSocket instance) => instance.listen, externalInstanceFunctionCaller: (RawSecureSocket instance, a0, {onError, onDone, cancelOnError}) => instance.listen(a0 == null ? null : (b0) => a0(b0), onError: onError, onDone: onDone, cancelOnError: cancelOnError)),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (RawSecureSocket instance) => instance.map, externalInstanceFunctionCaller: (RawSecureSocket instance, a0) => instance.map((b0) => a0(b0))),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (RawSecureSocket instance) => instance.noSuchMethod),
      'peerCertificate': VmProxy(identifier: 'peerCertificate', externalInstancePropertyReader: (RawSecureSocket instance) => instance.peerCertificate),
      'pipe': VmProxy(identifier: 'pipe', externalInstancePropertyReader: (RawSecureSocket instance) => instance.pipe),
      'port': VmProxy(identifier: 'port', externalInstancePropertyReader: (RawSecureSocket instance) => instance.port),
      'read': VmProxy(identifier: 'read', externalInstancePropertyReader: (RawSecureSocket instance) => instance.read),
      'readEventsEnabled': VmProxy(identifier: 'readEventsEnabled', externalInstancePropertyReader: (RawSecureSocket instance) => instance.readEventsEnabled, externalInstancePropertyWriter: (RawSecureSocket instance, value) => instance.readEventsEnabled = value),
      'readMessage': VmProxy(identifier: 'readMessage', externalInstancePropertyReader: (RawSecureSocket instance) => instance.readMessage),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (RawSecureSocket instance) => instance.reduce, externalInstanceFunctionCaller: (RawSecureSocket instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remoteAddress': VmProxy(identifier: 'remoteAddress', externalInstancePropertyReader: (RawSecureSocket instance) => instance.remoteAddress),
      'remotePort': VmProxy(identifier: 'remotePort', externalInstancePropertyReader: (RawSecureSocket instance) => instance.remotePort),
      'renegotiate': VmProxy(identifier: 'renegotiate', externalInstancePropertyReader: (RawSecureSocket instance) => instance.renegotiate),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (RawSecureSocket instance) => instance.runtimeType),
      'selectedProtocol': VmProxy(identifier: 'selectedProtocol', externalInstancePropertyReader: (RawSecureSocket instance) => instance.selectedProtocol),
      'sendMessage': VmProxy(identifier: 'sendMessage', externalInstancePropertyReader: (RawSecureSocket instance) => instance.sendMessage),
      'setOption': VmProxy(identifier: 'setOption', externalInstancePropertyReader: (RawSecureSocket instance) => instance.setOption),
      'setRawOption': VmProxy(identifier: 'setRawOption', externalInstancePropertyReader: (RawSecureSocket instance) => instance.setRawOption),
      'shutdown': VmProxy(identifier: 'shutdown', externalInstancePropertyReader: (RawSecureSocket instance) => instance.shutdown),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (RawSecureSocket instance) => instance.single),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (RawSecureSocket instance) => instance.singleWhere, externalInstanceFunctionCaller: (RawSecureSocket instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (RawSecureSocket instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (RawSecureSocket instance) => instance.skipWhile, externalInstanceFunctionCaller: (RawSecureSocket instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (RawSecureSocket instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (RawSecureSocket instance) => instance.takeWhile, externalInstanceFunctionCaller: (RawSecureSocket instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'timeout': VmProxy(identifier: 'timeout', externalInstancePropertyReader: (RawSecureSocket instance) => instance.timeout, externalInstanceFunctionCaller: (RawSecureSocket instance, a0, {onTimeout}) => instance.timeout(a0, onTimeout: onTimeout == null ? null : (b0) => onTimeout(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (RawSecureSocket instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (RawSecureSocket instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (RawSecureSocket instance) => instance.toString),
      'transform': VmProxy(identifier: 'transform', externalInstancePropertyReader: (RawSecureSocket instance) => instance.transform),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (RawSecureSocket instance) => instance.where, externalInstanceFunctionCaller: (RawSecureSocket instance, a0) => instance.where((b0) => a0(b0))),
      'write': VmProxy(identifier: 'write', externalInstancePropertyReader: (RawSecureSocket instance) => instance.write),
      'writeEventsEnabled': VmProxy(identifier: 'writeEventsEnabled', externalInstancePropertyReader: (RawSecureSocket instance) => instance.writeEventsEnabled, externalInstancePropertyWriter: (RawSecureSocket instance, value) => instance.writeEventsEnabled = value),
    },
  );

  ///class RawServerSocket
  static final classRawServerSocket = VmClass<RawServerSocket>(
    identifier: 'RawServerSocket',
    superclassNames: ['Object', 'Stream'],
    externalProxyMap: {
      'bind': VmProxy(identifier: 'bind', externalStaticPropertyReader: () => RawServerSocket.bind),
      'address': VmProxy(identifier: 'address', externalInstancePropertyReader: (RawServerSocket instance) => instance.address),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (RawServerSocket instance) => instance.any, externalInstanceFunctionCaller: (RawServerSocket instance, a0) => instance.any((b0) => a0(b0))),
      'asBroadcastStream': VmProxy(identifier: 'asBroadcastStream', externalInstancePropertyReader: (RawServerSocket instance) => instance.asBroadcastStream, externalInstanceFunctionCaller: (RawServerSocket instance, {onListen, onCancel}) => instance.asBroadcastStream(onListen: onListen == null ? null : (b0) => onListen(b0), onCancel: onCancel == null ? null : (b0) => onCancel(b0))),
      'asyncExpand': VmProxy(identifier: 'asyncExpand', externalInstancePropertyReader: (RawServerSocket instance) => instance.asyncExpand, externalInstanceFunctionCaller: (RawServerSocket instance, a0) => instance.asyncExpand((b0) => a0(b0))),
      'asyncMap': VmProxy(identifier: 'asyncMap', externalInstancePropertyReader: (RawServerSocket instance) => instance.asyncMap, externalInstanceFunctionCaller: (RawServerSocket instance, a0) => instance.asyncMap((b0) => a0(b0))),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (RawServerSocket instance) => instance.cast),
      'close': VmProxy(identifier: 'close', externalInstancePropertyReader: (RawServerSocket instance) => instance.close),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (RawServerSocket instance) => instance.contains),
      'distinct': VmProxy(identifier: 'distinct', externalInstancePropertyReader: (RawServerSocket instance) => instance.distinct, externalInstanceFunctionCaller: (RawServerSocket instance, [a0]) => instance.distinct(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'drain': VmProxy(identifier: 'drain', externalInstancePropertyReader: (RawServerSocket instance) => instance.drain),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (RawServerSocket instance) => instance.elementAt),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (RawServerSocket instance) => instance.every, externalInstanceFunctionCaller: (RawServerSocket instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (RawServerSocket instance) => instance.expand, externalInstanceFunctionCaller: (RawServerSocket instance, a0) => instance.expand((b0) => a0(b0))),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (RawServerSocket instance) => instance.first),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (RawServerSocket instance) => instance.firstWhere, externalInstanceFunctionCaller: (RawServerSocket instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (RawServerSocket instance) => instance.fold, externalInstanceFunctionCaller: (RawServerSocket instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (RawServerSocket instance) => instance.forEach, externalInstanceFunctionCaller: (RawServerSocket instance, a0) => instance.forEach((b0) => a0(b0))),
      'handleError': VmProxy(identifier: 'handleError', externalInstancePropertyReader: (RawServerSocket instance) => instance.handleError, externalInstanceFunctionCaller: (RawServerSocket instance, a0, {test}) => instance.handleError(a0, test: test == null ? null : (b0) => test(b0))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (RawServerSocket instance) => instance.hashCode),
      'isBroadcast': VmProxy(identifier: 'isBroadcast', externalInstancePropertyReader: (RawServerSocket instance) => instance.isBroadcast),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (RawServerSocket instance) => instance.isEmpty),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (RawServerSocket instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (RawServerSocket instance) => instance.last),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (RawServerSocket instance) => instance.lastWhere, externalInstanceFunctionCaller: (RawServerSocket instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (RawServerSocket instance) => instance.length),
      'listen': VmProxy(identifier: 'listen', externalInstancePropertyReader: (RawServerSocket instance) => instance.listen, externalInstanceFunctionCaller: (RawServerSocket instance, a0, {onError, onDone, cancelOnError}) => instance.listen(a0 == null ? null : (b0) => a0(b0), onError: onError, onDone: onDone, cancelOnError: cancelOnError)),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (RawServerSocket instance) => instance.map, externalInstanceFunctionCaller: (RawServerSocket instance, a0) => instance.map((b0) => a0(b0))),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (RawServerSocket instance) => instance.noSuchMethod),
      'pipe': VmProxy(identifier: 'pipe', externalInstancePropertyReader: (RawServerSocket instance) => instance.pipe),
      'port': VmProxy(identifier: 'port', externalInstancePropertyReader: (RawServerSocket instance) => instance.port),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (RawServerSocket instance) => instance.reduce, externalInstanceFunctionCaller: (RawServerSocket instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (RawServerSocket instance) => instance.runtimeType),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (RawServerSocket instance) => instance.single),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (RawServerSocket instance) => instance.singleWhere, externalInstanceFunctionCaller: (RawServerSocket instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (RawServerSocket instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (RawServerSocket instance) => instance.skipWhile, externalInstanceFunctionCaller: (RawServerSocket instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (RawServerSocket instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (RawServerSocket instance) => instance.takeWhile, externalInstanceFunctionCaller: (RawServerSocket instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'timeout': VmProxy(identifier: 'timeout', externalInstancePropertyReader: (RawServerSocket instance) => instance.timeout, externalInstanceFunctionCaller: (RawServerSocket instance, a0, {onTimeout}) => instance.timeout(a0, onTimeout: onTimeout == null ? null : (b0) => onTimeout(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (RawServerSocket instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (RawServerSocket instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (RawServerSocket instance) => instance.toString),
      'transform': VmProxy(identifier: 'transform', externalInstancePropertyReader: (RawServerSocket instance) => instance.transform),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (RawServerSocket instance) => instance.where, externalInstanceFunctionCaller: (RawServerSocket instance, a0) => instance.where((b0) => a0(b0))),
    },
  );

  ///class RawSocket
  static final classRawSocket = VmClass<RawSocket>(
    identifier: 'RawSocket',
    superclassNames: ['Object', 'Stream'],
    externalProxyMap: {
      'connect': VmProxy(identifier: 'connect', externalStaticPropertyReader: () => RawSocket.connect),
      'startConnect': VmProxy(identifier: 'startConnect', externalStaticPropertyReader: () => RawSocket.startConnect),
      'address': VmProxy(identifier: 'address', externalInstancePropertyReader: (RawSocket instance) => instance.address),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (RawSocket instance) => instance.any, externalInstanceFunctionCaller: (RawSocket instance, a0) => instance.any((b0) => a0(b0))),
      'asBroadcastStream': VmProxy(identifier: 'asBroadcastStream', externalInstancePropertyReader: (RawSocket instance) => instance.asBroadcastStream, externalInstanceFunctionCaller: (RawSocket instance, {onListen, onCancel}) => instance.asBroadcastStream(onListen: onListen == null ? null : (b0) => onListen(b0), onCancel: onCancel == null ? null : (b0) => onCancel(b0))),
      'asyncExpand': VmProxy(identifier: 'asyncExpand', externalInstancePropertyReader: (RawSocket instance) => instance.asyncExpand, externalInstanceFunctionCaller: (RawSocket instance, a0) => instance.asyncExpand((b0) => a0(b0))),
      'asyncMap': VmProxy(identifier: 'asyncMap', externalInstancePropertyReader: (RawSocket instance) => instance.asyncMap, externalInstanceFunctionCaller: (RawSocket instance, a0) => instance.asyncMap((b0) => a0(b0))),
      'available': VmProxy(identifier: 'available', externalInstancePropertyReader: (RawSocket instance) => instance.available),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (RawSocket instance) => instance.cast),
      'close': VmProxy(identifier: 'close', externalInstancePropertyReader: (RawSocket instance) => instance.close),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (RawSocket instance) => instance.contains),
      'distinct': VmProxy(identifier: 'distinct', externalInstancePropertyReader: (RawSocket instance) => instance.distinct, externalInstanceFunctionCaller: (RawSocket instance, [a0]) => instance.distinct(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'drain': VmProxy(identifier: 'drain', externalInstancePropertyReader: (RawSocket instance) => instance.drain),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (RawSocket instance) => instance.elementAt),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (RawSocket instance) => instance.every, externalInstanceFunctionCaller: (RawSocket instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (RawSocket instance) => instance.expand, externalInstanceFunctionCaller: (RawSocket instance, a0) => instance.expand((b0) => a0(b0))),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (RawSocket instance) => instance.first),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (RawSocket instance) => instance.firstWhere, externalInstanceFunctionCaller: (RawSocket instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (RawSocket instance) => instance.fold, externalInstanceFunctionCaller: (RawSocket instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (RawSocket instance) => instance.forEach, externalInstanceFunctionCaller: (RawSocket instance, a0) => instance.forEach((b0) => a0(b0))),
      'getRawOption': VmProxy(identifier: 'getRawOption', externalInstancePropertyReader: (RawSocket instance) => instance.getRawOption),
      'handleError': VmProxy(identifier: 'handleError', externalInstancePropertyReader: (RawSocket instance) => instance.handleError, externalInstanceFunctionCaller: (RawSocket instance, a0, {test}) => instance.handleError(a0, test: test == null ? null : (b0) => test(b0))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (RawSocket instance) => instance.hashCode),
      'isBroadcast': VmProxy(identifier: 'isBroadcast', externalInstancePropertyReader: (RawSocket instance) => instance.isBroadcast),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (RawSocket instance) => instance.isEmpty),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (RawSocket instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (RawSocket instance) => instance.last),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (RawSocket instance) => instance.lastWhere, externalInstanceFunctionCaller: (RawSocket instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (RawSocket instance) => instance.length),
      'listen': VmProxy(identifier: 'listen', externalInstancePropertyReader: (RawSocket instance) => instance.listen, externalInstanceFunctionCaller: (RawSocket instance, a0, {onError, onDone, cancelOnError}) => instance.listen(a0 == null ? null : (b0) => a0(b0), onError: onError, onDone: onDone, cancelOnError: cancelOnError)),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (RawSocket instance) => instance.map, externalInstanceFunctionCaller: (RawSocket instance, a0) => instance.map((b0) => a0(b0))),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (RawSocket instance) => instance.noSuchMethod),
      'pipe': VmProxy(identifier: 'pipe', externalInstancePropertyReader: (RawSocket instance) => instance.pipe),
      'port': VmProxy(identifier: 'port', externalInstancePropertyReader: (RawSocket instance) => instance.port),
      'read': VmProxy(identifier: 'read', externalInstancePropertyReader: (RawSocket instance) => instance.read),
      'readEventsEnabled': VmProxy(identifier: 'readEventsEnabled', externalInstancePropertyReader: (RawSocket instance) => instance.readEventsEnabled, externalInstancePropertyWriter: (RawSocket instance, value) => instance.readEventsEnabled = value),
      'readMessage': VmProxy(identifier: 'readMessage', externalInstancePropertyReader: (RawSocket instance) => instance.readMessage),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (RawSocket instance) => instance.reduce, externalInstanceFunctionCaller: (RawSocket instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remoteAddress': VmProxy(identifier: 'remoteAddress', externalInstancePropertyReader: (RawSocket instance) => instance.remoteAddress),
      'remotePort': VmProxy(identifier: 'remotePort', externalInstancePropertyReader: (RawSocket instance) => instance.remotePort),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (RawSocket instance) => instance.runtimeType),
      'sendMessage': VmProxy(identifier: 'sendMessage', externalInstancePropertyReader: (RawSocket instance) => instance.sendMessage),
      'setOption': VmProxy(identifier: 'setOption', externalInstancePropertyReader: (RawSocket instance) => instance.setOption),
      'setRawOption': VmProxy(identifier: 'setRawOption', externalInstancePropertyReader: (RawSocket instance) => instance.setRawOption),
      'shutdown': VmProxy(identifier: 'shutdown', externalInstancePropertyReader: (RawSocket instance) => instance.shutdown),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (RawSocket instance) => instance.single),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (RawSocket instance) => instance.singleWhere, externalInstanceFunctionCaller: (RawSocket instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (RawSocket instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (RawSocket instance) => instance.skipWhile, externalInstanceFunctionCaller: (RawSocket instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (RawSocket instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (RawSocket instance) => instance.takeWhile, externalInstanceFunctionCaller: (RawSocket instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'timeout': VmProxy(identifier: 'timeout', externalInstancePropertyReader: (RawSocket instance) => instance.timeout, externalInstanceFunctionCaller: (RawSocket instance, a0, {onTimeout}) => instance.timeout(a0, onTimeout: onTimeout == null ? null : (b0) => onTimeout(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (RawSocket instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (RawSocket instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (RawSocket instance) => instance.toString),
      'transform': VmProxy(identifier: 'transform', externalInstancePropertyReader: (RawSocket instance) => instance.transform),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (RawSocket instance) => instance.where, externalInstanceFunctionCaller: (RawSocket instance, a0) => instance.where((b0) => a0(b0))),
      'write': VmProxy(identifier: 'write', externalInstancePropertyReader: (RawSocket instance) => instance.write),
      'writeEventsEnabled': VmProxy(identifier: 'writeEventsEnabled', externalInstancePropertyReader: (RawSocket instance) => instance.writeEventsEnabled, externalInstancePropertyWriter: (RawSocket instance, value) => instance.writeEventsEnabled = value),
    },
  );

  ///class RawSocketEvent
  static final classRawSocketEvent = VmClass<RawSocketEvent>(
    identifier: 'RawSocketEvent',
    superclassNames: ['Object'],
    externalProxyMap: {
      'closed': VmProxy(identifier: 'closed', externalStaticPropertyReader: () => RawSocketEvent.closed),
      'read': VmProxy(identifier: 'read', externalStaticPropertyReader: () => RawSocketEvent.read),
      'readClosed': VmProxy(identifier: 'readClosed', externalStaticPropertyReader: () => RawSocketEvent.readClosed),
      'write': VmProxy(identifier: 'write', externalStaticPropertyReader: () => RawSocketEvent.write),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (RawSocketEvent instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (RawSocketEvent instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (RawSocketEvent instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (RawSocketEvent instance) => instance.toString),
    },
  );

  ///class RawSocketOption
  static final classRawSocketOption = VmClass<RawSocketOption>(
    identifier: 'RawSocketOption',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => RawSocketOption.new),
      'fromBool': VmProxy(identifier: 'fromBool', externalStaticPropertyReader: () => RawSocketOption.fromBool),
      'fromInt': VmProxy(identifier: 'fromInt', externalStaticPropertyReader: () => RawSocketOption.fromInt),
      'IPv4MulticastInterface': VmProxy(identifier: 'IPv4MulticastInterface', externalStaticPropertyReader: () => RawSocketOption.IPv4MulticastInterface),
      'IPv6MulticastInterface': VmProxy(identifier: 'IPv6MulticastInterface', externalStaticPropertyReader: () => RawSocketOption.IPv6MulticastInterface),
      'levelIPv4': VmProxy(identifier: 'levelIPv4', externalStaticPropertyReader: () => RawSocketOption.levelIPv4),
      'levelIPv6': VmProxy(identifier: 'levelIPv6', externalStaticPropertyReader: () => RawSocketOption.levelIPv6),
      'levelSocket': VmProxy(identifier: 'levelSocket', externalStaticPropertyReader: () => RawSocketOption.levelSocket),
      'levelTcp': VmProxy(identifier: 'levelTcp', externalStaticPropertyReader: () => RawSocketOption.levelTcp),
      'levelUdp': VmProxy(identifier: 'levelUdp', externalStaticPropertyReader: () => RawSocketOption.levelUdp),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (RawSocketOption instance) => instance.hashCode),
      'level': VmProxy(identifier: 'level', externalInstancePropertyReader: (RawSocketOption instance) => instance.level),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (RawSocketOption instance) => instance.noSuchMethod),
      'option': VmProxy(identifier: 'option', externalInstancePropertyReader: (RawSocketOption instance) => instance.option),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (RawSocketOption instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (RawSocketOption instance) => instance.toString),
      'value': VmProxy(identifier: 'value', externalInstancePropertyReader: (RawSocketOption instance) => instance.value),
    },
  );

  ///class RawSynchronousSocket
  static final classRawSynchronousSocket = VmClass<RawSynchronousSocket>(
    identifier: 'RawSynchronousSocket',
    superclassNames: ['Object'],
    externalProxyMap: {
      'connectSync': VmProxy(identifier: 'connectSync', externalStaticPropertyReader: () => RawSynchronousSocket.connectSync),
      'address': VmProxy(identifier: 'address', externalInstancePropertyReader: (RawSynchronousSocket instance) => instance.address),
      'available': VmProxy(identifier: 'available', externalInstancePropertyReader: (RawSynchronousSocket instance) => instance.available),
      'closeSync': VmProxy(identifier: 'closeSync', externalInstancePropertyReader: (RawSynchronousSocket instance) => instance.closeSync),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (RawSynchronousSocket instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (RawSynchronousSocket instance) => instance.noSuchMethod),
      'port': VmProxy(identifier: 'port', externalInstancePropertyReader: (RawSynchronousSocket instance) => instance.port),
      'readIntoSync': VmProxy(identifier: 'readIntoSync', externalInstancePropertyReader: (RawSynchronousSocket instance) => instance.readIntoSync),
      'readSync': VmProxy(identifier: 'readSync', externalInstancePropertyReader: (RawSynchronousSocket instance) => instance.readSync),
      'remoteAddress': VmProxy(identifier: 'remoteAddress', externalInstancePropertyReader: (RawSynchronousSocket instance) => instance.remoteAddress),
      'remotePort': VmProxy(identifier: 'remotePort', externalInstancePropertyReader: (RawSynchronousSocket instance) => instance.remotePort),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (RawSynchronousSocket instance) => instance.runtimeType),
      'shutdown': VmProxy(identifier: 'shutdown', externalInstancePropertyReader: (RawSynchronousSocket instance) => instance.shutdown),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (RawSynchronousSocket instance) => instance.toString),
      'writeFromSync': VmProxy(identifier: 'writeFromSync', externalInstancePropertyReader: (RawSynchronousSocket instance) => instance.writeFromSync),
    },
  );

  ///class RawZLibFilter
  static final classRawZLibFilter = VmClass<RawZLibFilter>(
    identifier: 'RawZLibFilter',
    superclassNames: ['Object'],
    externalProxyMap: {
      'deflateFilter': VmProxy(identifier: 'deflateFilter', externalStaticPropertyReader: () => RawZLibFilter.deflateFilter),
      'inflateFilter': VmProxy(identifier: 'inflateFilter', externalStaticPropertyReader: () => RawZLibFilter.inflateFilter),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (RawZLibFilter instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (RawZLibFilter instance) => instance.noSuchMethod),
      'process': VmProxy(identifier: 'process', externalInstancePropertyReader: (RawZLibFilter instance) => instance.process),
      'processed': VmProxy(identifier: 'processed', externalInstancePropertyReader: (RawZLibFilter instance) => instance.processed),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (RawZLibFilter instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (RawZLibFilter instance) => instance.toString),
    },
  );

  ///class ReadPipe
  static final classReadPipe = VmClass<ReadPipe>(
    identifier: 'ReadPipe',
    superclassNames: ['Object', 'Stream'],
    externalProxyMap: {
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (ReadPipe instance) => instance.any, externalInstanceFunctionCaller: (ReadPipe instance, a0) => instance.any((b0) => a0(b0))),
      'asBroadcastStream': VmProxy(identifier: 'asBroadcastStream', externalInstancePropertyReader: (ReadPipe instance) => instance.asBroadcastStream, externalInstanceFunctionCaller: (ReadPipe instance, {onListen, onCancel}) => instance.asBroadcastStream(onListen: onListen == null ? null : (b0) => onListen(b0), onCancel: onCancel == null ? null : (b0) => onCancel(b0))),
      'asyncExpand': VmProxy(identifier: 'asyncExpand', externalInstancePropertyReader: (ReadPipe instance) => instance.asyncExpand, externalInstanceFunctionCaller: (ReadPipe instance, a0) => instance.asyncExpand((b0) => a0(b0))),
      'asyncMap': VmProxy(identifier: 'asyncMap', externalInstancePropertyReader: (ReadPipe instance) => instance.asyncMap, externalInstanceFunctionCaller: (ReadPipe instance, a0) => instance.asyncMap((b0) => a0(b0))),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (ReadPipe instance) => instance.cast),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (ReadPipe instance) => instance.contains),
      'distinct': VmProxy(identifier: 'distinct', externalInstancePropertyReader: (ReadPipe instance) => instance.distinct, externalInstanceFunctionCaller: (ReadPipe instance, [a0]) => instance.distinct(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'drain': VmProxy(identifier: 'drain', externalInstancePropertyReader: (ReadPipe instance) => instance.drain),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (ReadPipe instance) => instance.elementAt),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (ReadPipe instance) => instance.every, externalInstanceFunctionCaller: (ReadPipe instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (ReadPipe instance) => instance.expand, externalInstanceFunctionCaller: (ReadPipe instance, a0) => instance.expand((b0) => a0(b0))),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (ReadPipe instance) => instance.first),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (ReadPipe instance) => instance.firstWhere, externalInstanceFunctionCaller: (ReadPipe instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (ReadPipe instance) => instance.fold, externalInstanceFunctionCaller: (ReadPipe instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (ReadPipe instance) => instance.forEach, externalInstanceFunctionCaller: (ReadPipe instance, a0) => instance.forEach((b0) => a0(b0))),
      'handleError': VmProxy(identifier: 'handleError', externalInstancePropertyReader: (ReadPipe instance) => instance.handleError, externalInstanceFunctionCaller: (ReadPipe instance, a0, {test}) => instance.handleError(a0, test: test == null ? null : (b0) => test(b0))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ReadPipe instance) => instance.hashCode),
      'isBroadcast': VmProxy(identifier: 'isBroadcast', externalInstancePropertyReader: (ReadPipe instance) => instance.isBroadcast),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (ReadPipe instance) => instance.isEmpty),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (ReadPipe instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (ReadPipe instance) => instance.last),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (ReadPipe instance) => instance.lastWhere, externalInstanceFunctionCaller: (ReadPipe instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (ReadPipe instance) => instance.length),
      'listen': VmProxy(identifier: 'listen', externalInstancePropertyReader: (ReadPipe instance) => instance.listen, externalInstanceFunctionCaller: (ReadPipe instance, a0, {onError, onDone, cancelOnError}) => instance.listen(a0 == null ? null : (b0) => a0(b0), onError: onError, onDone: onDone, cancelOnError: cancelOnError)),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (ReadPipe instance) => instance.map, externalInstanceFunctionCaller: (ReadPipe instance, a0) => instance.map((b0) => a0(b0))),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ReadPipe instance) => instance.noSuchMethod),
      'pipe': VmProxy(identifier: 'pipe', externalInstancePropertyReader: (ReadPipe instance) => instance.pipe),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (ReadPipe instance) => instance.reduce, externalInstanceFunctionCaller: (ReadPipe instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ReadPipe instance) => instance.runtimeType),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (ReadPipe instance) => instance.single),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (ReadPipe instance) => instance.singleWhere, externalInstanceFunctionCaller: (ReadPipe instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (ReadPipe instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (ReadPipe instance) => instance.skipWhile, externalInstanceFunctionCaller: (ReadPipe instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (ReadPipe instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (ReadPipe instance) => instance.takeWhile, externalInstanceFunctionCaller: (ReadPipe instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'timeout': VmProxy(identifier: 'timeout', externalInstancePropertyReader: (ReadPipe instance) => instance.timeout, externalInstanceFunctionCaller: (ReadPipe instance, a0, {onTimeout}) => instance.timeout(a0, onTimeout: onTimeout == null ? null : (b0) => onTimeout(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (ReadPipe instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (ReadPipe instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ReadPipe instance) => instance.toString),
      'transform': VmProxy(identifier: 'transform', externalInstancePropertyReader: (ReadPipe instance) => instance.transform),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (ReadPipe instance) => instance.where, externalInstanceFunctionCaller: (ReadPipe instance, a0) => instance.where((b0) => a0(b0))),
    },
  );

  ///class ReceivePort
  static final classReceivePort = VmClass<ReceivePort>(
    identifier: 'ReceivePort',
    superclassNames: ['Object', 'Stream'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ReceivePort.new),
      'fromRawReceivePort': VmProxy(identifier: 'fromRawReceivePort', externalStaticPropertyReader: () => ReceivePort.fromRawReceivePort),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (ReceivePort instance) => instance.any, externalInstanceFunctionCaller: (ReceivePort instance, a0) => instance.any((b0) => a0(b0))),
      'asBroadcastStream': VmProxy(identifier: 'asBroadcastStream', externalInstancePropertyReader: (ReceivePort instance) => instance.asBroadcastStream, externalInstanceFunctionCaller: (ReceivePort instance, {onListen, onCancel}) => instance.asBroadcastStream(onListen: onListen == null ? null : (b0) => onListen(b0), onCancel: onCancel == null ? null : (b0) => onCancel(b0))),
      'asyncExpand': VmProxy(identifier: 'asyncExpand', externalInstancePropertyReader: (ReceivePort instance) => instance.asyncExpand, externalInstanceFunctionCaller: (ReceivePort instance, a0) => instance.asyncExpand((b0) => a0(b0))),
      'asyncMap': VmProxy(identifier: 'asyncMap', externalInstancePropertyReader: (ReceivePort instance) => instance.asyncMap, externalInstanceFunctionCaller: (ReceivePort instance, a0) => instance.asyncMap((b0) => a0(b0))),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (ReceivePort instance) => instance.cast),
      'close': VmProxy(identifier: 'close', externalInstancePropertyReader: (ReceivePort instance) => instance.close),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (ReceivePort instance) => instance.contains),
      'distinct': VmProxy(identifier: 'distinct', externalInstancePropertyReader: (ReceivePort instance) => instance.distinct, externalInstanceFunctionCaller: (ReceivePort instance, [a0]) => instance.distinct(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'drain': VmProxy(identifier: 'drain', externalInstancePropertyReader: (ReceivePort instance) => instance.drain),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (ReceivePort instance) => instance.elementAt),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (ReceivePort instance) => instance.every, externalInstanceFunctionCaller: (ReceivePort instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (ReceivePort instance) => instance.expand, externalInstanceFunctionCaller: (ReceivePort instance, a0) => instance.expand((b0) => a0(b0))),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (ReceivePort instance) => instance.first),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (ReceivePort instance) => instance.firstWhere, externalInstanceFunctionCaller: (ReceivePort instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (ReceivePort instance) => instance.fold, externalInstanceFunctionCaller: (ReceivePort instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (ReceivePort instance) => instance.forEach, externalInstanceFunctionCaller: (ReceivePort instance, a0) => instance.forEach((b0) => a0(b0))),
      'handleError': VmProxy(identifier: 'handleError', externalInstancePropertyReader: (ReceivePort instance) => instance.handleError, externalInstanceFunctionCaller: (ReceivePort instance, a0, {test}) => instance.handleError(a0, test: test == null ? null : (b0) => test(b0))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ReceivePort instance) => instance.hashCode),
      'isBroadcast': VmProxy(identifier: 'isBroadcast', externalInstancePropertyReader: (ReceivePort instance) => instance.isBroadcast),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (ReceivePort instance) => instance.isEmpty),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (ReceivePort instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (ReceivePort instance) => instance.last),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (ReceivePort instance) => instance.lastWhere, externalInstanceFunctionCaller: (ReceivePort instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (ReceivePort instance) => instance.length),
      'listen': VmProxy(identifier: 'listen', externalInstancePropertyReader: (ReceivePort instance) => instance.listen, externalInstanceFunctionCaller: (ReceivePort instance, a0, {onError, onDone, cancelOnError}) => instance.listen(a0 == null ? null : (b0) => a0(b0), onError: onError, onDone: onDone, cancelOnError: cancelOnError)),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (ReceivePort instance) => instance.map, externalInstanceFunctionCaller: (ReceivePort instance, a0) => instance.map((b0) => a0(b0))),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ReceivePort instance) => instance.noSuchMethod),
      'pipe': VmProxy(identifier: 'pipe', externalInstancePropertyReader: (ReceivePort instance) => instance.pipe),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (ReceivePort instance) => instance.reduce, externalInstanceFunctionCaller: (ReceivePort instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ReceivePort instance) => instance.runtimeType),
      'sendPort': VmProxy(identifier: 'sendPort', externalInstancePropertyReader: (ReceivePort instance) => instance.sendPort),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (ReceivePort instance) => instance.single),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (ReceivePort instance) => instance.singleWhere, externalInstanceFunctionCaller: (ReceivePort instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (ReceivePort instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (ReceivePort instance) => instance.skipWhile, externalInstanceFunctionCaller: (ReceivePort instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (ReceivePort instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (ReceivePort instance) => instance.takeWhile, externalInstanceFunctionCaller: (ReceivePort instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'timeout': VmProxy(identifier: 'timeout', externalInstancePropertyReader: (ReceivePort instance) => instance.timeout, externalInstanceFunctionCaller: (ReceivePort instance, a0, {onTimeout}) => instance.timeout(a0, onTimeout: onTimeout == null ? null : (b0) => onTimeout(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (ReceivePort instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (ReceivePort instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ReceivePort instance) => instance.toString),
      'transform': VmProxy(identifier: 'transform', externalInstancePropertyReader: (ReceivePort instance) => instance.transform),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (ReceivePort instance) => instance.where, externalInstanceFunctionCaller: (ReceivePort instance, a0) => instance.where((b0) => a0(b0))),
    },
  );

  ///class Record
  static final classRecord = VmClass<Record>(
    identifier: 'Record',
    superclassNames: ['Object'],
    externalProxyMap: {
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Record instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Record instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Record instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Record instance) => instance.toString),
    },
  );

  ///class Rectangle
  static final classRectangle = VmClass<Rectangle>(
    identifier: 'Rectangle',
    superclassNames: ['Object', '_RectangleBase'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Rectangle.new),
      'fromPoints': VmProxy(identifier: 'fromPoints', externalStaticPropertyReader: () => Rectangle.fromPoints),
      'bottom': VmProxy(identifier: 'bottom', externalInstancePropertyReader: (Rectangle instance) => instance.bottom),
      'bottomLeft': VmProxy(identifier: 'bottomLeft', externalInstancePropertyReader: (Rectangle instance) => instance.bottomLeft),
      'bottomRight': VmProxy(identifier: 'bottomRight', externalInstancePropertyReader: (Rectangle instance) => instance.bottomRight),
      'boundingBox': VmProxy(identifier: 'boundingBox', externalInstancePropertyReader: (Rectangle instance) => instance.boundingBox),
      'containsPoint': VmProxy(identifier: 'containsPoint', externalInstancePropertyReader: (Rectangle instance) => instance.containsPoint),
      'containsRectangle': VmProxy(identifier: 'containsRectangle', externalInstancePropertyReader: (Rectangle instance) => instance.containsRectangle),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Rectangle instance) => instance.hashCode),
      'height': VmProxy(identifier: 'height', externalInstancePropertyReader: (Rectangle instance) => instance.height),
      'intersection': VmProxy(identifier: 'intersection', externalInstancePropertyReader: (Rectangle instance) => instance.intersection),
      'intersects': VmProxy(identifier: 'intersects', externalInstancePropertyReader: (Rectangle instance) => instance.intersects),
      'left': VmProxy(identifier: 'left', externalInstancePropertyReader: (Rectangle instance) => instance.left),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Rectangle instance) => instance.noSuchMethod),
      'right': VmProxy(identifier: 'right', externalInstancePropertyReader: (Rectangle instance) => instance.right),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Rectangle instance) => instance.runtimeType),
      'top': VmProxy(identifier: 'top', externalInstancePropertyReader: (Rectangle instance) => instance.top),
      'topLeft': VmProxy(identifier: 'topLeft', externalInstancePropertyReader: (Rectangle instance) => instance.topLeft),
      'topRight': VmProxy(identifier: 'topRight', externalInstancePropertyReader: (Rectangle instance) => instance.topRight),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Rectangle instance) => instance.toString),
      'width': VmProxy(identifier: 'width', externalInstancePropertyReader: (Rectangle instance) => instance.width),
    },
  );

  ///class RegExp
  static final classRegExp = VmClass<RegExp>(
    identifier: 'RegExp',
    superclassNames: ['Object', 'Pattern'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => RegExp.new),
      'escape': VmProxy(identifier: 'escape', externalStaticPropertyReader: () => RegExp.escape),
      'allMatches': VmProxy(identifier: 'allMatches', externalInstancePropertyReader: (RegExp instance) => instance.allMatches),
      'firstMatch': VmProxy(identifier: 'firstMatch', externalInstancePropertyReader: (RegExp instance) => instance.firstMatch),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (RegExp instance) => instance.hashCode),
      'hasMatch': VmProxy(identifier: 'hasMatch', externalInstancePropertyReader: (RegExp instance) => instance.hasMatch),
      'isCaseSensitive': VmProxy(identifier: 'isCaseSensitive', externalInstancePropertyReader: (RegExp instance) => instance.isCaseSensitive),
      'isDotAll': VmProxy(identifier: 'isDotAll', externalInstancePropertyReader: (RegExp instance) => instance.isDotAll),
      'isMultiLine': VmProxy(identifier: 'isMultiLine', externalInstancePropertyReader: (RegExp instance) => instance.isMultiLine),
      'isUnicode': VmProxy(identifier: 'isUnicode', externalInstancePropertyReader: (RegExp instance) => instance.isUnicode),
      'matchAsPrefix': VmProxy(identifier: 'matchAsPrefix', externalInstancePropertyReader: (RegExp instance) => instance.matchAsPrefix),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (RegExp instance) => instance.noSuchMethod),
      'pattern': VmProxy(identifier: 'pattern', externalInstancePropertyReader: (RegExp instance) => instance.pattern),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (RegExp instance) => instance.runtimeType),
      'stringMatch': VmProxy(identifier: 'stringMatch', externalInstancePropertyReader: (RegExp instance) => instance.stringMatch),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (RegExp instance) => instance.toString),
    },
  );

  ///class RegExpMatch
  static final classRegExpMatch = VmClass<RegExpMatch>(
    identifier: 'RegExpMatch',
    superclassNames: ['Object', 'Match'],
    externalProxyMap: {
      'end': VmProxy(identifier: 'end', externalInstancePropertyReader: (RegExpMatch instance) => instance.end),
      'group': VmProxy(identifier: 'group', externalInstancePropertyReader: (RegExpMatch instance) => instance.group),
      'groupCount': VmProxy(identifier: 'groupCount', externalInstancePropertyReader: (RegExpMatch instance) => instance.groupCount),
      'groupNames': VmProxy(identifier: 'groupNames', externalInstancePropertyReader: (RegExpMatch instance) => instance.groupNames),
      'groups': VmProxy(identifier: 'groups', externalInstancePropertyReader: (RegExpMatch instance) => instance.groups),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (RegExpMatch instance) => instance.hashCode),
      'input': VmProxy(identifier: 'input', externalInstancePropertyReader: (RegExpMatch instance) => instance.input),
      'namedGroup': VmProxy(identifier: 'namedGroup', externalInstancePropertyReader: (RegExpMatch instance) => instance.namedGroup),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (RegExpMatch instance) => instance.noSuchMethod),
      'pattern': VmProxy(identifier: 'pattern', externalInstancePropertyReader: (RegExpMatch instance) => instance.pattern),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (RegExpMatch instance) => instance.runtimeType),
      'start': VmProxy(identifier: 'start', externalInstancePropertyReader: (RegExpMatch instance) => instance.start),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (RegExpMatch instance) => instance.toString),
    },
  );

  ///class RemoteError
  static final classRemoteError = VmClass<RemoteError>(
    identifier: 'RemoteError',
    superclassNames: ['Object', 'Error'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => RemoteError.new),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (RemoteError instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (RemoteError instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (RemoteError instance) => instance.runtimeType),
      'stackTrace': VmProxy(identifier: 'stackTrace', externalInstancePropertyReader: (RemoteError instance) => instance.stackTrace),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (RemoteError instance) => instance.toString),
    },
  );

  ///class ResourceHandle
  static final classResourceHandle = VmClass<ResourceHandle>(
    identifier: 'ResourceHandle',
    superclassNames: ['Object'],
    externalProxyMap: {
      'fromFile': VmProxy(identifier: 'fromFile', externalStaticPropertyReader: () => ResourceHandle.fromFile),
      'fromRawDatagramSocket': VmProxy(identifier: 'fromRawDatagramSocket', externalStaticPropertyReader: () => ResourceHandle.fromRawDatagramSocket),
      'fromRawSocket': VmProxy(identifier: 'fromRawSocket', externalStaticPropertyReader: () => ResourceHandle.fromRawSocket),
      'fromReadPipe': VmProxy(identifier: 'fromReadPipe', externalStaticPropertyReader: () => ResourceHandle.fromReadPipe),
      'fromSocket': VmProxy(identifier: 'fromSocket', externalStaticPropertyReader: () => ResourceHandle.fromSocket),
      'fromStdin': VmProxy(identifier: 'fromStdin', externalStaticPropertyReader: () => ResourceHandle.fromStdin),
      'fromStdout': VmProxy(identifier: 'fromStdout', externalStaticPropertyReader: () => ResourceHandle.fromStdout),
      'fromWritePipe': VmProxy(identifier: 'fromWritePipe', externalStaticPropertyReader: () => ResourceHandle.fromWritePipe),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ResourceHandle instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ResourceHandle instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ResourceHandle instance) => instance.runtimeType),
      'toFile': VmProxy(identifier: 'toFile', externalInstancePropertyReader: (ResourceHandle instance) => instance.toFile),
      'toRawDatagramSocket': VmProxy(identifier: 'toRawDatagramSocket', externalInstancePropertyReader: (ResourceHandle instance) => instance.toRawDatagramSocket),
      'toRawSocket': VmProxy(identifier: 'toRawSocket', externalInstancePropertyReader: (ResourceHandle instance) => instance.toRawSocket),
      'toReadPipe': VmProxy(identifier: 'toReadPipe', externalInstancePropertyReader: (ResourceHandle instance) => instance.toReadPipe),
      'toSocket': VmProxy(identifier: 'toSocket', externalInstancePropertyReader: (ResourceHandle instance) => instance.toSocket),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ResourceHandle instance) => instance.toString),
      'toWritePipe': VmProxy(identifier: 'toWritePipe', externalInstancePropertyReader: (ResourceHandle instance) => instance.toWritePipe),
    },
  );

  ///class RuneIterator
  static final classRuneIterator = VmClass<RuneIterator>(
    identifier: 'RuneIterator',
    superclassNames: ['Object', 'Iterator'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => RuneIterator.new),
      'at': VmProxy(identifier: 'at', externalStaticPropertyReader: () => RuneIterator.at),
      'current': VmProxy(identifier: 'current', externalInstancePropertyReader: (RuneIterator instance) => instance.current),
      'currentAsString': VmProxy(identifier: 'currentAsString', externalInstancePropertyReader: (RuneIterator instance) => instance.currentAsString),
      'currentSize': VmProxy(identifier: 'currentSize', externalInstancePropertyReader: (RuneIterator instance) => instance.currentSize),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (RuneIterator instance) => instance.hashCode),
      'moveNext': VmProxy(identifier: 'moveNext', externalInstancePropertyReader: (RuneIterator instance) => instance.moveNext),
      'movePrevious': VmProxy(identifier: 'movePrevious', externalInstancePropertyReader: (RuneIterator instance) => instance.movePrevious),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (RuneIterator instance) => instance.noSuchMethod),
      'rawIndex': VmProxy(identifier: 'rawIndex', externalInstancePropertyReader: (RuneIterator instance) => instance.rawIndex, externalInstancePropertyWriter: (RuneIterator instance, value) => instance.rawIndex = value),
      'reset': VmProxy(identifier: 'reset', externalInstancePropertyReader: (RuneIterator instance) => instance.reset),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (RuneIterator instance) => instance.runtimeType),
      'string': VmProxy(identifier: 'string', externalInstancePropertyReader: (RuneIterator instance) => instance.string),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (RuneIterator instance) => instance.toString),
    },
  );

  ///class Runes
  static final classRunes = VmClass<Runes>(
    identifier: 'Runes',
    superclassNames: ['Object', 'Iterable'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Runes.new),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (Runes instance) => instance.any, externalInstanceFunctionCaller: (Runes instance, a0) => instance.any((b0) => a0(b0))),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (Runes instance) => instance.cast),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (Runes instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (Runes instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (Runes instance) => instance.elementAtOrNull),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (Runes instance) => instance.every, externalInstanceFunctionCaller: (Runes instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (Runes instance) => instance.expand, externalInstanceFunctionCaller: (Runes instance, a0) => instance.expand((b0) => a0(b0))),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (Runes instance) => instance.first),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (Runes instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (Runes instance) => instance.firstWhere, externalInstanceFunctionCaller: (Runes instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (Runes instance) => instance.fold, externalInstanceFunctionCaller: (Runes instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (Runes instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (Runes instance) => instance.forEach, externalInstanceFunctionCaller: (Runes instance, a0) => instance.forEach((b0) => a0(b0))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Runes instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (Runes instance) => instance.indexed),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (Runes instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (Runes instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (Runes instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (Runes instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (Runes instance) => instance.last),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (Runes instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (Runes instance) => instance.lastWhere, externalInstanceFunctionCaller: (Runes instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (Runes instance) => instance.length),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (Runes instance) => instance.map, externalInstanceFunctionCaller: (Runes instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (Runes instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Runes instance) => instance.noSuchMethod),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (Runes instance) => instance.reduce, externalInstanceFunctionCaller: (Runes instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Runes instance) => instance.runtimeType),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (Runes instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (Runes instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (Runes instance) => instance.singleWhere, externalInstanceFunctionCaller: (Runes instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (Runes instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (Runes instance) => instance.skipWhile, externalInstanceFunctionCaller: (Runes instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'string': VmProxy(identifier: 'string', externalInstancePropertyReader: (Runes instance) => instance.string),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (Runes instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (Runes instance) => instance.takeWhile, externalInstanceFunctionCaller: (Runes instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (Runes instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (Runes instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Runes instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (Runes instance) => instance.where, externalInstanceFunctionCaller: (Runes instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (Runes instance) => instance.whereType),
    },
  );

  ///class SecureServerSocket
  static final classSecureServerSocket = VmClass<SecureServerSocket>(
    identifier: 'SecureServerSocket',
    superclassNames: ['Object', 'Stream', 'ServerSocketBase'],
    externalProxyMap: {
      'bind': VmProxy(identifier: 'bind', externalStaticPropertyReader: () => SecureServerSocket.bind),
      'address': VmProxy(identifier: 'address', externalInstancePropertyReader: (SecureServerSocket instance) => instance.address),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (SecureServerSocket instance) => instance.any, externalInstanceFunctionCaller: (SecureServerSocket instance, a0) => instance.any((b0) => a0(b0))),
      'asBroadcastStream': VmProxy(identifier: 'asBroadcastStream', externalInstancePropertyReader: (SecureServerSocket instance) => instance.asBroadcastStream, externalInstanceFunctionCaller: (SecureServerSocket instance, {onListen, onCancel}) => instance.asBroadcastStream(onListen: onListen == null ? null : (b0) => onListen(b0), onCancel: onCancel == null ? null : (b0) => onCancel(b0))),
      'asyncExpand': VmProxy(identifier: 'asyncExpand', externalInstancePropertyReader: (SecureServerSocket instance) => instance.asyncExpand, externalInstanceFunctionCaller: (SecureServerSocket instance, a0) => instance.asyncExpand((b0) => a0(b0))),
      'asyncMap': VmProxy(identifier: 'asyncMap', externalInstancePropertyReader: (SecureServerSocket instance) => instance.asyncMap, externalInstanceFunctionCaller: (SecureServerSocket instance, a0) => instance.asyncMap((b0) => a0(b0))),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (SecureServerSocket instance) => instance.cast),
      'close': VmProxy(identifier: 'close', externalInstancePropertyReader: (SecureServerSocket instance) => instance.close),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (SecureServerSocket instance) => instance.contains),
      'distinct': VmProxy(identifier: 'distinct', externalInstancePropertyReader: (SecureServerSocket instance) => instance.distinct, externalInstanceFunctionCaller: (SecureServerSocket instance, [a0]) => instance.distinct(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'drain': VmProxy(identifier: 'drain', externalInstancePropertyReader: (SecureServerSocket instance) => instance.drain),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (SecureServerSocket instance) => instance.elementAt),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (SecureServerSocket instance) => instance.every, externalInstanceFunctionCaller: (SecureServerSocket instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (SecureServerSocket instance) => instance.expand, externalInstanceFunctionCaller: (SecureServerSocket instance, a0) => instance.expand((b0) => a0(b0))),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (SecureServerSocket instance) => instance.first),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (SecureServerSocket instance) => instance.firstWhere, externalInstanceFunctionCaller: (SecureServerSocket instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (SecureServerSocket instance) => instance.fold, externalInstanceFunctionCaller: (SecureServerSocket instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (SecureServerSocket instance) => instance.forEach, externalInstanceFunctionCaller: (SecureServerSocket instance, a0) => instance.forEach((b0) => a0(b0))),
      'handleError': VmProxy(identifier: 'handleError', externalInstancePropertyReader: (SecureServerSocket instance) => instance.handleError, externalInstanceFunctionCaller: (SecureServerSocket instance, a0, {test}) => instance.handleError(a0, test: test == null ? null : (b0) => test(b0))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (SecureServerSocket instance) => instance.hashCode),
      'isBroadcast': VmProxy(identifier: 'isBroadcast', externalInstancePropertyReader: (SecureServerSocket instance) => instance.isBroadcast),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (SecureServerSocket instance) => instance.isEmpty),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (SecureServerSocket instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (SecureServerSocket instance) => instance.last),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (SecureServerSocket instance) => instance.lastWhere, externalInstanceFunctionCaller: (SecureServerSocket instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (SecureServerSocket instance) => instance.length),
      'listen': VmProxy(identifier: 'listen', externalInstancePropertyReader: (SecureServerSocket instance) => instance.listen, externalInstanceFunctionCaller: (SecureServerSocket instance, a0, {onError, onDone, cancelOnError}) => instance.listen(a0 == null ? null : (b0) => a0(b0), onError: onError, onDone: onDone, cancelOnError: cancelOnError)),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (SecureServerSocket instance) => instance.map, externalInstanceFunctionCaller: (SecureServerSocket instance, a0) => instance.map((b0) => a0(b0))),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (SecureServerSocket instance) => instance.noSuchMethod),
      'pipe': VmProxy(identifier: 'pipe', externalInstancePropertyReader: (SecureServerSocket instance) => instance.pipe),
      'port': VmProxy(identifier: 'port', externalInstancePropertyReader: (SecureServerSocket instance) => instance.port),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (SecureServerSocket instance) => instance.reduce, externalInstanceFunctionCaller: (SecureServerSocket instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (SecureServerSocket instance) => instance.runtimeType),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (SecureServerSocket instance) => instance.single),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (SecureServerSocket instance) => instance.singleWhere, externalInstanceFunctionCaller: (SecureServerSocket instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (SecureServerSocket instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (SecureServerSocket instance) => instance.skipWhile, externalInstanceFunctionCaller: (SecureServerSocket instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (SecureServerSocket instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (SecureServerSocket instance) => instance.takeWhile, externalInstanceFunctionCaller: (SecureServerSocket instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'timeout': VmProxy(identifier: 'timeout', externalInstancePropertyReader: (SecureServerSocket instance) => instance.timeout, externalInstanceFunctionCaller: (SecureServerSocket instance, a0, {onTimeout}) => instance.timeout(a0, onTimeout: onTimeout == null ? null : (b0) => onTimeout(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (SecureServerSocket instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (SecureServerSocket instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (SecureServerSocket instance) => instance.toString),
      'transform': VmProxy(identifier: 'transform', externalInstancePropertyReader: (SecureServerSocket instance) => instance.transform),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (SecureServerSocket instance) => instance.where, externalInstanceFunctionCaller: (SecureServerSocket instance, a0) => instance.where((b0) => a0(b0))),
    },
  );

  ///class SecureSocket
  static final classSecureSocket = VmClass<SecureSocket>(
    identifier: 'SecureSocket',
    superclassNames: ['Object', 'Stream', 'Sink', 'EventSink', 'StreamConsumer', 'StreamSink', 'StringSink', 'IOSink', 'Socket'],
    externalProxyMap: {
      'connect': VmProxy(identifier: 'connect', externalStaticPropertyReader: () => SecureSocket.connect, externalStaticFunctionCaller: (a0, a1, {context, onBadCertificate, keyLog, supportedProtocols, timeout}) => SecureSocket.connect(a0, a1, context: context, onBadCertificate: onBadCertificate == null ? null : (b0) => onBadCertificate(b0), keyLog: keyLog == null ? null : (b0) => keyLog(b0), supportedProtocols: supportedProtocols, timeout: timeout)),
      'secure': VmProxy(identifier: 'secure', externalStaticPropertyReader: () => SecureSocket.secure, externalStaticFunctionCaller: (a0, {host, context, onBadCertificate, keyLog, supportedProtocols}) => SecureSocket.secure(a0, host: host, context: context, onBadCertificate: onBadCertificate == null ? null : (b0) => onBadCertificate(b0), keyLog: keyLog == null ? null : (b0) => keyLog(b0), supportedProtocols: supportedProtocols)),
      'secureServer': VmProxy(identifier: 'secureServer', externalStaticPropertyReader: () => SecureSocket.secureServer),
      'startConnect': VmProxy(identifier: 'startConnect', externalStaticPropertyReader: () => SecureSocket.startConnect, externalStaticFunctionCaller: (a0, a1, {context, onBadCertificate, keyLog, supportedProtocols}) => SecureSocket.startConnect(a0, a1, context: context, onBadCertificate: onBadCertificate == null ? null : (b0) => onBadCertificate(b0), keyLog: keyLog == null ? null : (b0) => keyLog(b0), supportedProtocols: supportedProtocols)),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (SecureSocket instance) => instance.add),
      'addError': VmProxy(identifier: 'addError', externalInstancePropertyReader: (SecureSocket instance) => instance.addError),
      'address': VmProxy(identifier: 'address', externalInstancePropertyReader: (SecureSocket instance) => instance.address),
      'addStream': VmProxy(identifier: 'addStream', externalInstancePropertyReader: (SecureSocket instance) => instance.addStream),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (SecureSocket instance) => instance.any, externalInstanceFunctionCaller: (SecureSocket instance, a0) => instance.any((b0) => a0(b0))),
      'asBroadcastStream': VmProxy(identifier: 'asBroadcastStream', externalInstancePropertyReader: (SecureSocket instance) => instance.asBroadcastStream, externalInstanceFunctionCaller: (SecureSocket instance, {onListen, onCancel}) => instance.asBroadcastStream(onListen: onListen == null ? null : (b0) => onListen(b0), onCancel: onCancel == null ? null : (b0) => onCancel(b0))),
      'asyncExpand': VmProxy(identifier: 'asyncExpand', externalInstancePropertyReader: (SecureSocket instance) => instance.asyncExpand, externalInstanceFunctionCaller: (SecureSocket instance, a0) => instance.asyncExpand((b0) => a0(b0))),
      'asyncMap': VmProxy(identifier: 'asyncMap', externalInstancePropertyReader: (SecureSocket instance) => instance.asyncMap, externalInstanceFunctionCaller: (SecureSocket instance, a0) => instance.asyncMap((b0) => a0(b0))),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (SecureSocket instance) => instance.cast),
      'close': VmProxy(identifier: 'close', externalInstancePropertyReader: (SecureSocket instance) => instance.close),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (SecureSocket instance) => instance.contains),
      'destroy': VmProxy(identifier: 'destroy', externalInstancePropertyReader: (SecureSocket instance) => instance.destroy),
      'distinct': VmProxy(identifier: 'distinct', externalInstancePropertyReader: (SecureSocket instance) => instance.distinct, externalInstanceFunctionCaller: (SecureSocket instance, [a0]) => instance.distinct(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'done': VmProxy(identifier: 'done', externalInstancePropertyReader: (SecureSocket instance) => instance.done),
      'drain': VmProxy(identifier: 'drain', externalInstancePropertyReader: (SecureSocket instance) => instance.drain),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (SecureSocket instance) => instance.elementAt),
      'encoding': VmProxy(identifier: 'encoding', externalInstancePropertyReader: (SecureSocket instance) => instance.encoding, externalInstancePropertyWriter: (SecureSocket instance, value) => instance.encoding = value),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (SecureSocket instance) => instance.every, externalInstanceFunctionCaller: (SecureSocket instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (SecureSocket instance) => instance.expand, externalInstanceFunctionCaller: (SecureSocket instance, a0) => instance.expand((b0) => a0(b0))),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (SecureSocket instance) => instance.first),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (SecureSocket instance) => instance.firstWhere, externalInstanceFunctionCaller: (SecureSocket instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'flush': VmProxy(identifier: 'flush', externalInstancePropertyReader: (SecureSocket instance) => instance.flush),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (SecureSocket instance) => instance.fold, externalInstanceFunctionCaller: (SecureSocket instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (SecureSocket instance) => instance.forEach, externalInstanceFunctionCaller: (SecureSocket instance, a0) => instance.forEach((b0) => a0(b0))),
      'getRawOption': VmProxy(identifier: 'getRawOption', externalInstancePropertyReader: (SecureSocket instance) => instance.getRawOption),
      'handleError': VmProxy(identifier: 'handleError', externalInstancePropertyReader: (SecureSocket instance) => instance.handleError, externalInstanceFunctionCaller: (SecureSocket instance, a0, {test}) => instance.handleError(a0, test: test == null ? null : (b0) => test(b0))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (SecureSocket instance) => instance.hashCode),
      'isBroadcast': VmProxy(identifier: 'isBroadcast', externalInstancePropertyReader: (SecureSocket instance) => instance.isBroadcast),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (SecureSocket instance) => instance.isEmpty),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (SecureSocket instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (SecureSocket instance) => instance.last),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (SecureSocket instance) => instance.lastWhere, externalInstanceFunctionCaller: (SecureSocket instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (SecureSocket instance) => instance.length),
      'listen': VmProxy(identifier: 'listen', externalInstancePropertyReader: (SecureSocket instance) => instance.listen, externalInstanceFunctionCaller: (SecureSocket instance, a0, {onError, onDone, cancelOnError}) => instance.listen(a0 == null ? null : (b0) => a0(b0), onError: onError, onDone: onDone, cancelOnError: cancelOnError)),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (SecureSocket instance) => instance.map, externalInstanceFunctionCaller: (SecureSocket instance, a0) => instance.map((b0) => a0(b0))),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (SecureSocket instance) => instance.noSuchMethod),
      'peerCertificate': VmProxy(identifier: 'peerCertificate', externalInstancePropertyReader: (SecureSocket instance) => instance.peerCertificate),
      'pipe': VmProxy(identifier: 'pipe', externalInstancePropertyReader: (SecureSocket instance) => instance.pipe),
      'port': VmProxy(identifier: 'port', externalInstancePropertyReader: (SecureSocket instance) => instance.port),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (SecureSocket instance) => instance.reduce, externalInstanceFunctionCaller: (SecureSocket instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remoteAddress': VmProxy(identifier: 'remoteAddress', externalInstancePropertyReader: (SecureSocket instance) => instance.remoteAddress),
      'remotePort': VmProxy(identifier: 'remotePort', externalInstancePropertyReader: (SecureSocket instance) => instance.remotePort),
      'renegotiate': VmProxy(identifier: 'renegotiate', externalInstancePropertyReader: (SecureSocket instance) => instance.renegotiate),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (SecureSocket instance) => instance.runtimeType),
      'selectedProtocol': VmProxy(identifier: 'selectedProtocol', externalInstancePropertyReader: (SecureSocket instance) => instance.selectedProtocol),
      'setOption': VmProxy(identifier: 'setOption', externalInstancePropertyReader: (SecureSocket instance) => instance.setOption),
      'setRawOption': VmProxy(identifier: 'setRawOption', externalInstancePropertyReader: (SecureSocket instance) => instance.setRawOption),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (SecureSocket instance) => instance.single),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (SecureSocket instance) => instance.singleWhere, externalInstanceFunctionCaller: (SecureSocket instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (SecureSocket instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (SecureSocket instance) => instance.skipWhile, externalInstanceFunctionCaller: (SecureSocket instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (SecureSocket instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (SecureSocket instance) => instance.takeWhile, externalInstanceFunctionCaller: (SecureSocket instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'timeout': VmProxy(identifier: 'timeout', externalInstancePropertyReader: (SecureSocket instance) => instance.timeout, externalInstanceFunctionCaller: (SecureSocket instance, a0, {onTimeout}) => instance.timeout(a0, onTimeout: onTimeout == null ? null : (b0) => onTimeout(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (SecureSocket instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (SecureSocket instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (SecureSocket instance) => instance.toString),
      'transform': VmProxy(identifier: 'transform', externalInstancePropertyReader: (SecureSocket instance) => instance.transform),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (SecureSocket instance) => instance.where, externalInstanceFunctionCaller: (SecureSocket instance, a0) => instance.where((b0) => a0(b0))),
      'write': VmProxy(identifier: 'write', externalInstancePropertyReader: (SecureSocket instance) => instance.write),
      'writeAll': VmProxy(identifier: 'writeAll', externalInstancePropertyReader: (SecureSocket instance) => instance.writeAll),
      'writeCharCode': VmProxy(identifier: 'writeCharCode', externalInstancePropertyReader: (SecureSocket instance) => instance.writeCharCode),
      'writeln': VmProxy(identifier: 'writeln', externalInstancePropertyReader: (SecureSocket instance) => instance.writeln),
    },
  );

  ///class SecurityContext
  static final classSecurityContext = VmClass<SecurityContext>(
    identifier: 'SecurityContext',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => SecurityContext.new),
      'alpnSupported': VmProxy(identifier: 'alpnSupported', externalStaticPropertyReader: () => SecurityContext.alpnSupported),
      'defaultContext': VmProxy(identifier: 'defaultContext', externalStaticPropertyReader: () => SecurityContext.defaultContext),
      'allowLegacyUnsafeRenegotiation': VmProxy(identifier: 'allowLegacyUnsafeRenegotiation', externalInstancePropertyReader: (SecurityContext instance) => instance.allowLegacyUnsafeRenegotiation, externalInstancePropertyWriter: (SecurityContext instance, value) => instance.allowLegacyUnsafeRenegotiation = value),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (SecurityContext instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (SecurityContext instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (SecurityContext instance) => instance.runtimeType),
      'setAlpnProtocols': VmProxy(identifier: 'setAlpnProtocols', externalInstancePropertyReader: (SecurityContext instance) => instance.setAlpnProtocols),
      'setClientAuthorities': VmProxy(identifier: 'setClientAuthorities', externalInstancePropertyReader: (SecurityContext instance) => instance.setClientAuthorities),
      'setClientAuthoritiesBytes': VmProxy(identifier: 'setClientAuthoritiesBytes', externalInstancePropertyReader: (SecurityContext instance) => instance.setClientAuthoritiesBytes),
      'setTrustedCertificates': VmProxy(identifier: 'setTrustedCertificates', externalInstancePropertyReader: (SecurityContext instance) => instance.setTrustedCertificates),
      'setTrustedCertificatesBytes': VmProxy(identifier: 'setTrustedCertificatesBytes', externalInstancePropertyReader: (SecurityContext instance) => instance.setTrustedCertificatesBytes),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (SecurityContext instance) => instance.toString),
      'useCertificateChain': VmProxy(identifier: 'useCertificateChain', externalInstancePropertyReader: (SecurityContext instance) => instance.useCertificateChain),
      'useCertificateChainBytes': VmProxy(identifier: 'useCertificateChainBytes', externalInstancePropertyReader: (SecurityContext instance) => instance.useCertificateChainBytes),
      'usePrivateKey': VmProxy(identifier: 'usePrivateKey', externalInstancePropertyReader: (SecurityContext instance) => instance.usePrivateKey),
      'usePrivateKeyBytes': VmProxy(identifier: 'usePrivateKeyBytes', externalInstancePropertyReader: (SecurityContext instance) => instance.usePrivateKeyBytes),
    },
  );

  ///class SendPort
  static final classSendPort = VmClass<SendPort>(
    identifier: 'SendPort',
    superclassNames: ['Object', 'Capability'],
    externalProxyMap: {
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (SendPort instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (SendPort instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (SendPort instance) => instance.runtimeType),
      'send': VmProxy(identifier: 'send', externalInstancePropertyReader: (SendPort instance) => instance.send),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (SendPort instance) => instance.toString),
    },
  );

  ///class ServerSocket
  static final classServerSocket = VmClass<ServerSocket>(
    identifier: 'ServerSocket',
    superclassNames: ['Object', 'Stream', 'ServerSocketBase'],
    externalProxyMap: {
      'bind': VmProxy(identifier: 'bind', externalStaticPropertyReader: () => ServerSocket.bind),
      'address': VmProxy(identifier: 'address', externalInstancePropertyReader: (ServerSocket instance) => instance.address),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (ServerSocket instance) => instance.any, externalInstanceFunctionCaller: (ServerSocket instance, a0) => instance.any((b0) => a0(b0))),
      'asBroadcastStream': VmProxy(identifier: 'asBroadcastStream', externalInstancePropertyReader: (ServerSocket instance) => instance.asBroadcastStream, externalInstanceFunctionCaller: (ServerSocket instance, {onListen, onCancel}) => instance.asBroadcastStream(onListen: onListen == null ? null : (b0) => onListen(b0), onCancel: onCancel == null ? null : (b0) => onCancel(b0))),
      'asyncExpand': VmProxy(identifier: 'asyncExpand', externalInstancePropertyReader: (ServerSocket instance) => instance.asyncExpand, externalInstanceFunctionCaller: (ServerSocket instance, a0) => instance.asyncExpand((b0) => a0(b0))),
      'asyncMap': VmProxy(identifier: 'asyncMap', externalInstancePropertyReader: (ServerSocket instance) => instance.asyncMap, externalInstanceFunctionCaller: (ServerSocket instance, a0) => instance.asyncMap((b0) => a0(b0))),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (ServerSocket instance) => instance.cast),
      'close': VmProxy(identifier: 'close', externalInstancePropertyReader: (ServerSocket instance) => instance.close),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (ServerSocket instance) => instance.contains),
      'distinct': VmProxy(identifier: 'distinct', externalInstancePropertyReader: (ServerSocket instance) => instance.distinct, externalInstanceFunctionCaller: (ServerSocket instance, [a0]) => instance.distinct(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'drain': VmProxy(identifier: 'drain', externalInstancePropertyReader: (ServerSocket instance) => instance.drain),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (ServerSocket instance) => instance.elementAt),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (ServerSocket instance) => instance.every, externalInstanceFunctionCaller: (ServerSocket instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (ServerSocket instance) => instance.expand, externalInstanceFunctionCaller: (ServerSocket instance, a0) => instance.expand((b0) => a0(b0))),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (ServerSocket instance) => instance.first),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (ServerSocket instance) => instance.firstWhere, externalInstanceFunctionCaller: (ServerSocket instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (ServerSocket instance) => instance.fold, externalInstanceFunctionCaller: (ServerSocket instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (ServerSocket instance) => instance.forEach, externalInstanceFunctionCaller: (ServerSocket instance, a0) => instance.forEach((b0) => a0(b0))),
      'handleError': VmProxy(identifier: 'handleError', externalInstancePropertyReader: (ServerSocket instance) => instance.handleError, externalInstanceFunctionCaller: (ServerSocket instance, a0, {test}) => instance.handleError(a0, test: test == null ? null : (b0) => test(b0))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ServerSocket instance) => instance.hashCode),
      'isBroadcast': VmProxy(identifier: 'isBroadcast', externalInstancePropertyReader: (ServerSocket instance) => instance.isBroadcast),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (ServerSocket instance) => instance.isEmpty),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (ServerSocket instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (ServerSocket instance) => instance.last),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (ServerSocket instance) => instance.lastWhere, externalInstanceFunctionCaller: (ServerSocket instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (ServerSocket instance) => instance.length),
      'listen': VmProxy(identifier: 'listen', externalInstancePropertyReader: (ServerSocket instance) => instance.listen, externalInstanceFunctionCaller: (ServerSocket instance, a0, {onError, onDone, cancelOnError}) => instance.listen(a0 == null ? null : (b0) => a0(b0), onError: onError, onDone: onDone, cancelOnError: cancelOnError)),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (ServerSocket instance) => instance.map, externalInstanceFunctionCaller: (ServerSocket instance, a0) => instance.map((b0) => a0(b0))),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ServerSocket instance) => instance.noSuchMethod),
      'pipe': VmProxy(identifier: 'pipe', externalInstancePropertyReader: (ServerSocket instance) => instance.pipe),
      'port': VmProxy(identifier: 'port', externalInstancePropertyReader: (ServerSocket instance) => instance.port),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (ServerSocket instance) => instance.reduce, externalInstanceFunctionCaller: (ServerSocket instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ServerSocket instance) => instance.runtimeType),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (ServerSocket instance) => instance.single),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (ServerSocket instance) => instance.singleWhere, externalInstanceFunctionCaller: (ServerSocket instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (ServerSocket instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (ServerSocket instance) => instance.skipWhile, externalInstanceFunctionCaller: (ServerSocket instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (ServerSocket instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (ServerSocket instance) => instance.takeWhile, externalInstanceFunctionCaller: (ServerSocket instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'timeout': VmProxy(identifier: 'timeout', externalInstancePropertyReader: (ServerSocket instance) => instance.timeout, externalInstanceFunctionCaller: (ServerSocket instance, a0, {onTimeout}) => instance.timeout(a0, onTimeout: onTimeout == null ? null : (b0) => onTimeout(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (ServerSocket instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (ServerSocket instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ServerSocket instance) => instance.toString),
      'transform': VmProxy(identifier: 'transform', externalInstancePropertyReader: (ServerSocket instance) => instance.transform),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (ServerSocket instance) => instance.where, externalInstanceFunctionCaller: (ServerSocket instance, a0) => instance.where((b0) => a0(b0))),
    },
  );

  ///class Set
  static final classSet = VmClass<Set>(
    identifier: 'Set',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Set.new),
      'from': VmProxy(identifier: 'from', externalStaticPropertyReader: () => Set.from),
      'identity': VmProxy(identifier: 'identity', externalStaticPropertyReader: () => Set.identity),
      'of': VmProxy(identifier: 'of', externalStaticPropertyReader: () => Set.of),
      'unmodifiable': VmProxy(identifier: 'unmodifiable', externalStaticPropertyReader: () => Set.unmodifiable),
      'castFrom': VmProxy(identifier: 'castFrom', externalStaticPropertyReader: () => Set.castFrom, externalStaticFunctionCaller: (a0, {newSet}) => Set.castFrom(a0, newSet: newSet == null ? null : <R>() => newSet())),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (Set instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (Set instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (Set instance) => instance.any, externalInstanceFunctionCaller: (Set instance, a0) => instance.any((b0) => a0(b0))),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (Set instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (Set instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (Set instance) => instance.contains),
      'containsAll': VmProxy(identifier: 'containsAll', externalInstancePropertyReader: (Set instance) => instance.containsAll),
      'difference': VmProxy(identifier: 'difference', externalInstancePropertyReader: (Set instance) => instance.difference),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (Set instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (Set instance) => instance.elementAtOrNull),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (Set instance) => instance.every, externalInstanceFunctionCaller: (Set instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (Set instance) => instance.expand, externalInstanceFunctionCaller: (Set instance, a0) => instance.expand((b0) => a0(b0))),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (Set instance) => instance.first),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (Set instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (Set instance) => instance.firstWhere, externalInstanceFunctionCaller: (Set instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (Set instance) => instance.fold, externalInstanceFunctionCaller: (Set instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (Set instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (Set instance) => instance.forEach, externalInstanceFunctionCaller: (Set instance, a0) => instance.forEach((b0) => a0(b0))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Set instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (Set instance) => instance.indexed),
      'intersection': VmProxy(identifier: 'intersection', externalInstancePropertyReader: (Set instance) => instance.intersection),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (Set instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (Set instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (Set instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (Set instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (Set instance) => instance.last),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (Set instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (Set instance) => instance.lastWhere, externalInstanceFunctionCaller: (Set instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (Set instance) => instance.length),
      'lookup': VmProxy(identifier: 'lookup', externalInstancePropertyReader: (Set instance) => instance.lookup),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (Set instance) => instance.map, externalInstanceFunctionCaller: (Set instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (Set instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Set instance) => instance.noSuchMethod),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (Set instance) => instance.reduce, externalInstanceFunctionCaller: (Set instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (Set instance) => instance.remove),
      'removeAll': VmProxy(identifier: 'removeAll', externalInstancePropertyReader: (Set instance) => instance.removeAll),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (Set instance) => instance.removeWhere, externalInstanceFunctionCaller: (Set instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'retainAll': VmProxy(identifier: 'retainAll', externalInstancePropertyReader: (Set instance) => instance.retainAll),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (Set instance) => instance.retainWhere, externalInstanceFunctionCaller: (Set instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Set instance) => instance.runtimeType),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (Set instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (Set instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (Set instance) => instance.singleWhere, externalInstanceFunctionCaller: (Set instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (Set instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (Set instance) => instance.skipWhile, externalInstanceFunctionCaller: (Set instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (Set instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (Set instance) => instance.takeWhile, externalInstanceFunctionCaller: (Set instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (Set instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (Set instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Set instance) => instance.toString),
      'union': VmProxy(identifier: 'union', externalInstancePropertyReader: (Set instance) => instance.union),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (Set instance) => instance.where, externalInstanceFunctionCaller: (Set instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (Set instance) => instance.whereType),
    },
  );

  ///class SetBase
  static final classSetBase = VmClass<SetBase>(
    identifier: 'SetBase',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable', 'Set'],
    externalProxyMap: {
      'setToString': VmProxy(identifier: 'setToString', externalStaticPropertyReader: () => SetBase.setToString),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (SetBase instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (SetBase instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (SetBase instance) => instance.any, externalInstanceFunctionCaller: (SetBase instance, a0) => instance.any((b0) => a0(b0))),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (SetBase instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (SetBase instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (SetBase instance) => instance.contains),
      'containsAll': VmProxy(identifier: 'containsAll', externalInstancePropertyReader: (SetBase instance) => instance.containsAll),
      'difference': VmProxy(identifier: 'difference', externalInstancePropertyReader: (SetBase instance) => instance.difference),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (SetBase instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (SetBase instance) => instance.elementAtOrNull),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (SetBase instance) => instance.every, externalInstanceFunctionCaller: (SetBase instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (SetBase instance) => instance.expand, externalInstanceFunctionCaller: (SetBase instance, a0) => instance.expand((b0) => a0(b0))),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (SetBase instance) => instance.first),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (SetBase instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (SetBase instance) => instance.firstWhere, externalInstanceFunctionCaller: (SetBase instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (SetBase instance) => instance.fold, externalInstanceFunctionCaller: (SetBase instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (SetBase instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (SetBase instance) => instance.forEach, externalInstanceFunctionCaller: (SetBase instance, a0) => instance.forEach((b0) => a0(b0))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (SetBase instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (SetBase instance) => instance.indexed),
      'intersection': VmProxy(identifier: 'intersection', externalInstancePropertyReader: (SetBase instance) => instance.intersection),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (SetBase instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (SetBase instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (SetBase instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (SetBase instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (SetBase instance) => instance.last),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (SetBase instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (SetBase instance) => instance.lastWhere, externalInstanceFunctionCaller: (SetBase instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (SetBase instance) => instance.length),
      'lookup': VmProxy(identifier: 'lookup', externalInstancePropertyReader: (SetBase instance) => instance.lookup),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (SetBase instance) => instance.map, externalInstanceFunctionCaller: (SetBase instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (SetBase instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (SetBase instance) => instance.noSuchMethod),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (SetBase instance) => instance.reduce, externalInstanceFunctionCaller: (SetBase instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (SetBase instance) => instance.remove),
      'removeAll': VmProxy(identifier: 'removeAll', externalInstancePropertyReader: (SetBase instance) => instance.removeAll),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (SetBase instance) => instance.removeWhere, externalInstanceFunctionCaller: (SetBase instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'retainAll': VmProxy(identifier: 'retainAll', externalInstancePropertyReader: (SetBase instance) => instance.retainAll),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (SetBase instance) => instance.retainWhere, externalInstanceFunctionCaller: (SetBase instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (SetBase instance) => instance.runtimeType),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (SetBase instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (SetBase instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (SetBase instance) => instance.singleWhere, externalInstanceFunctionCaller: (SetBase instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (SetBase instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (SetBase instance) => instance.skipWhile, externalInstanceFunctionCaller: (SetBase instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (SetBase instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (SetBase instance) => instance.takeWhile, externalInstanceFunctionCaller: (SetBase instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (SetBase instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (SetBase instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (SetBase instance) => instance.toString),
      'union': VmProxy(identifier: 'union', externalInstancePropertyReader: (SetBase instance) => instance.union),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (SetBase instance) => instance.where, externalInstanceFunctionCaller: (SetBase instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (SetBase instance) => instance.whereType),
    },
  );

  ///class SetMixin
  static final classSetMixin = VmClass<SetMixin>(
    identifier: 'SetMixin',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable', 'Set', 'SetBase'],
    externalProxyMap: {
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (SetMixin instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (SetMixin instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (SetMixin instance) => instance.any, externalInstanceFunctionCaller: (SetMixin instance, a0) => instance.any((b0) => a0(b0))),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (SetMixin instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (SetMixin instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (SetMixin instance) => instance.contains),
      'containsAll': VmProxy(identifier: 'containsAll', externalInstancePropertyReader: (SetMixin instance) => instance.containsAll),
      'difference': VmProxy(identifier: 'difference', externalInstancePropertyReader: (SetMixin instance) => instance.difference),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (SetMixin instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (SetMixin instance) => instance.elementAtOrNull),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (SetMixin instance) => instance.every, externalInstanceFunctionCaller: (SetMixin instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (SetMixin instance) => instance.expand, externalInstanceFunctionCaller: (SetMixin instance, a0) => instance.expand((b0) => a0(b0))),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (SetMixin instance) => instance.first),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (SetMixin instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (SetMixin instance) => instance.firstWhere, externalInstanceFunctionCaller: (SetMixin instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (SetMixin instance) => instance.fold, externalInstanceFunctionCaller: (SetMixin instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (SetMixin instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (SetMixin instance) => instance.forEach, externalInstanceFunctionCaller: (SetMixin instance, a0) => instance.forEach((b0) => a0(b0))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (SetMixin instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (SetMixin instance) => instance.indexed),
      'intersection': VmProxy(identifier: 'intersection', externalInstancePropertyReader: (SetMixin instance) => instance.intersection),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (SetMixin instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (SetMixin instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (SetMixin instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (SetMixin instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (SetMixin instance) => instance.last),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (SetMixin instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (SetMixin instance) => instance.lastWhere, externalInstanceFunctionCaller: (SetMixin instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (SetMixin instance) => instance.length),
      'lookup': VmProxy(identifier: 'lookup', externalInstancePropertyReader: (SetMixin instance) => instance.lookup),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (SetMixin instance) => instance.map, externalInstanceFunctionCaller: (SetMixin instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (SetMixin instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (SetMixin instance) => instance.noSuchMethod),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (SetMixin instance) => instance.reduce, externalInstanceFunctionCaller: (SetMixin instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (SetMixin instance) => instance.remove),
      'removeAll': VmProxy(identifier: 'removeAll', externalInstancePropertyReader: (SetMixin instance) => instance.removeAll),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (SetMixin instance) => instance.removeWhere, externalInstanceFunctionCaller: (SetMixin instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'retainAll': VmProxy(identifier: 'retainAll', externalInstancePropertyReader: (SetMixin instance) => instance.retainAll),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (SetMixin instance) => instance.retainWhere, externalInstanceFunctionCaller: (SetMixin instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (SetMixin instance) => instance.runtimeType),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (SetMixin instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (SetMixin instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (SetMixin instance) => instance.singleWhere, externalInstanceFunctionCaller: (SetMixin instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (SetMixin instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (SetMixin instance) => instance.skipWhile, externalInstanceFunctionCaller: (SetMixin instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (SetMixin instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (SetMixin instance) => instance.takeWhile, externalInstanceFunctionCaller: (SetMixin instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (SetMixin instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (SetMixin instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (SetMixin instance) => instance.toString),
      'union': VmProxy(identifier: 'union', externalInstancePropertyReader: (SetMixin instance) => instance.union),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (SetMixin instance) => instance.where, externalInstanceFunctionCaller: (SetMixin instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (SetMixin instance) => instance.whereType),
    },
  );

  ///class SignalException
  static final classSignalException = VmClass<SignalException>(
    identifier: 'SignalException',
    superclassNames: ['Object', 'Exception', 'IOException'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => SignalException.new),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (SignalException instance) => instance.hashCode),
      'message': VmProxy(identifier: 'message', externalInstancePropertyReader: (SignalException instance) => instance.message),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (SignalException instance) => instance.noSuchMethod),
      'osError': VmProxy(identifier: 'osError', externalInstancePropertyReader: (SignalException instance) => instance.osError),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (SignalException instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (SignalException instance) => instance.toString),
    },
  );

  ///class Sink
  static final classSink = VmClass<Sink>(
    identifier: 'Sink',
    superclassNames: ['Object'],
    externalProxyMap: {
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (Sink instance) => instance.add),
      'close': VmProxy(identifier: 'close', externalInstancePropertyReader: (Sink instance) => instance.close),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Sink instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Sink instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Sink instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Sink instance) => instance.toString),
    },
  );

  ///class Socket
  static final classSocket = VmClass<Socket>(
    identifier: 'Socket',
    superclassNames: ['Object', 'Stream', 'Sink', 'EventSink', 'StreamConsumer', 'StreamSink', 'StringSink', 'IOSink'],
    externalProxyMap: {
      'connect': VmProxy(identifier: 'connect', externalStaticPropertyReader: () => Socket.connect),
      'startConnect': VmProxy(identifier: 'startConnect', externalStaticPropertyReader: () => Socket.startConnect),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (Socket instance) => instance.add),
      'addError': VmProxy(identifier: 'addError', externalInstancePropertyReader: (Socket instance) => instance.addError),
      'address': VmProxy(identifier: 'address', externalInstancePropertyReader: (Socket instance) => instance.address),
      'addStream': VmProxy(identifier: 'addStream', externalInstancePropertyReader: (Socket instance) => instance.addStream),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (Socket instance) => instance.any, externalInstanceFunctionCaller: (Socket instance, a0) => instance.any((b0) => a0(b0))),
      'asBroadcastStream': VmProxy(identifier: 'asBroadcastStream', externalInstancePropertyReader: (Socket instance) => instance.asBroadcastStream, externalInstanceFunctionCaller: (Socket instance, {onListen, onCancel}) => instance.asBroadcastStream(onListen: onListen == null ? null : (b0) => onListen(b0), onCancel: onCancel == null ? null : (b0) => onCancel(b0))),
      'asyncExpand': VmProxy(identifier: 'asyncExpand', externalInstancePropertyReader: (Socket instance) => instance.asyncExpand, externalInstanceFunctionCaller: (Socket instance, a0) => instance.asyncExpand((b0) => a0(b0))),
      'asyncMap': VmProxy(identifier: 'asyncMap', externalInstancePropertyReader: (Socket instance) => instance.asyncMap, externalInstanceFunctionCaller: (Socket instance, a0) => instance.asyncMap((b0) => a0(b0))),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (Socket instance) => instance.cast),
      'close': VmProxy(identifier: 'close', externalInstancePropertyReader: (Socket instance) => instance.close),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (Socket instance) => instance.contains),
      'destroy': VmProxy(identifier: 'destroy', externalInstancePropertyReader: (Socket instance) => instance.destroy),
      'distinct': VmProxy(identifier: 'distinct', externalInstancePropertyReader: (Socket instance) => instance.distinct, externalInstanceFunctionCaller: (Socket instance, [a0]) => instance.distinct(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'done': VmProxy(identifier: 'done', externalInstancePropertyReader: (Socket instance) => instance.done),
      'drain': VmProxy(identifier: 'drain', externalInstancePropertyReader: (Socket instance) => instance.drain),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (Socket instance) => instance.elementAt),
      'encoding': VmProxy(identifier: 'encoding', externalInstancePropertyReader: (Socket instance) => instance.encoding, externalInstancePropertyWriter: (Socket instance, value) => instance.encoding = value),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (Socket instance) => instance.every, externalInstanceFunctionCaller: (Socket instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (Socket instance) => instance.expand, externalInstanceFunctionCaller: (Socket instance, a0) => instance.expand((b0) => a0(b0))),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (Socket instance) => instance.first),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (Socket instance) => instance.firstWhere, externalInstanceFunctionCaller: (Socket instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'flush': VmProxy(identifier: 'flush', externalInstancePropertyReader: (Socket instance) => instance.flush),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (Socket instance) => instance.fold, externalInstanceFunctionCaller: (Socket instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (Socket instance) => instance.forEach, externalInstanceFunctionCaller: (Socket instance, a0) => instance.forEach((b0) => a0(b0))),
      'getRawOption': VmProxy(identifier: 'getRawOption', externalInstancePropertyReader: (Socket instance) => instance.getRawOption),
      'handleError': VmProxy(identifier: 'handleError', externalInstancePropertyReader: (Socket instance) => instance.handleError, externalInstanceFunctionCaller: (Socket instance, a0, {test}) => instance.handleError(a0, test: test == null ? null : (b0) => test(b0))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Socket instance) => instance.hashCode),
      'isBroadcast': VmProxy(identifier: 'isBroadcast', externalInstancePropertyReader: (Socket instance) => instance.isBroadcast),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (Socket instance) => instance.isEmpty),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (Socket instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (Socket instance) => instance.last),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (Socket instance) => instance.lastWhere, externalInstanceFunctionCaller: (Socket instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (Socket instance) => instance.length),
      'listen': VmProxy(identifier: 'listen', externalInstancePropertyReader: (Socket instance) => instance.listen, externalInstanceFunctionCaller: (Socket instance, a0, {onError, onDone, cancelOnError}) => instance.listen(a0 == null ? null : (b0) => a0(b0), onError: onError, onDone: onDone, cancelOnError: cancelOnError)),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (Socket instance) => instance.map, externalInstanceFunctionCaller: (Socket instance, a0) => instance.map((b0) => a0(b0))),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Socket instance) => instance.noSuchMethod),
      'pipe': VmProxy(identifier: 'pipe', externalInstancePropertyReader: (Socket instance) => instance.pipe),
      'port': VmProxy(identifier: 'port', externalInstancePropertyReader: (Socket instance) => instance.port),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (Socket instance) => instance.reduce, externalInstanceFunctionCaller: (Socket instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remoteAddress': VmProxy(identifier: 'remoteAddress', externalInstancePropertyReader: (Socket instance) => instance.remoteAddress),
      'remotePort': VmProxy(identifier: 'remotePort', externalInstancePropertyReader: (Socket instance) => instance.remotePort),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Socket instance) => instance.runtimeType),
      'setOption': VmProxy(identifier: 'setOption', externalInstancePropertyReader: (Socket instance) => instance.setOption),
      'setRawOption': VmProxy(identifier: 'setRawOption', externalInstancePropertyReader: (Socket instance) => instance.setRawOption),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (Socket instance) => instance.single),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (Socket instance) => instance.singleWhere, externalInstanceFunctionCaller: (Socket instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (Socket instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (Socket instance) => instance.skipWhile, externalInstanceFunctionCaller: (Socket instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (Socket instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (Socket instance) => instance.takeWhile, externalInstanceFunctionCaller: (Socket instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'timeout': VmProxy(identifier: 'timeout', externalInstancePropertyReader: (Socket instance) => instance.timeout, externalInstanceFunctionCaller: (Socket instance, a0, {onTimeout}) => instance.timeout(a0, onTimeout: onTimeout == null ? null : (b0) => onTimeout(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (Socket instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (Socket instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Socket instance) => instance.toString),
      'transform': VmProxy(identifier: 'transform', externalInstancePropertyReader: (Socket instance) => instance.transform),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (Socket instance) => instance.where, externalInstanceFunctionCaller: (Socket instance, a0) => instance.where((b0) => a0(b0))),
      'write': VmProxy(identifier: 'write', externalInstancePropertyReader: (Socket instance) => instance.write),
      'writeAll': VmProxy(identifier: 'writeAll', externalInstancePropertyReader: (Socket instance) => instance.writeAll),
      'writeCharCode': VmProxy(identifier: 'writeCharCode', externalInstancePropertyReader: (Socket instance) => instance.writeCharCode),
      'writeln': VmProxy(identifier: 'writeln', externalInstancePropertyReader: (Socket instance) => instance.writeln),
    },
  );

  ///class SocketControlMessage
  static final classSocketControlMessage = VmClass<SocketControlMessage>(
    identifier: 'SocketControlMessage',
    superclassNames: ['Object'],
    externalProxyMap: {
      'fromHandles': VmProxy(identifier: 'fromHandles', externalStaticPropertyReader: () => SocketControlMessage.fromHandles),
      'data': VmProxy(identifier: 'data', externalInstancePropertyReader: (SocketControlMessage instance) => instance.data),
      'extractHandles': VmProxy(identifier: 'extractHandles', externalInstancePropertyReader: (SocketControlMessage instance) => instance.extractHandles),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (SocketControlMessage instance) => instance.hashCode),
      'level': VmProxy(identifier: 'level', externalInstancePropertyReader: (SocketControlMessage instance) => instance.level),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (SocketControlMessage instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (SocketControlMessage instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (SocketControlMessage instance) => instance.toString),
      'type': VmProxy(identifier: 'type', externalInstancePropertyReader: (SocketControlMessage instance) => instance.type),
    },
  );

  ///class SocketDirection
  static final classSocketDirection = VmClass<SocketDirection>(
    identifier: 'SocketDirection',
    superclassNames: ['Object'],
    externalProxyMap: {
      'both': VmProxy(identifier: 'both', externalStaticPropertyReader: () => SocketDirection.both),
      'receive': VmProxy(identifier: 'receive', externalStaticPropertyReader: () => SocketDirection.receive),
      'send': VmProxy(identifier: 'send', externalStaticPropertyReader: () => SocketDirection.send),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (SocketDirection instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (SocketDirection instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (SocketDirection instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (SocketDirection instance) => instance.toString),
    },
  );

  ///class SocketException
  static final classSocketException = VmClass<SocketException>(
    identifier: 'SocketException',
    superclassNames: ['Object', 'Exception', 'IOException'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => SocketException.new),
      'closed': VmProxy(identifier: 'closed', externalStaticPropertyReader: () => SocketException.closed),
      'address': VmProxy(identifier: 'address', externalInstancePropertyReader: (SocketException instance) => instance.address),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (SocketException instance) => instance.hashCode),
      'message': VmProxy(identifier: 'message', externalInstancePropertyReader: (SocketException instance) => instance.message),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (SocketException instance) => instance.noSuchMethod),
      'osError': VmProxy(identifier: 'osError', externalInstancePropertyReader: (SocketException instance) => instance.osError),
      'port': VmProxy(identifier: 'port', externalInstancePropertyReader: (SocketException instance) => instance.port),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (SocketException instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (SocketException instance) => instance.toString),
    },
  );

  ///class SocketMessage
  static final classSocketMessage = VmClass<SocketMessage>(
    identifier: 'SocketMessage',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => SocketMessage.new),
      'controlMessages': VmProxy(identifier: 'controlMessages', externalInstancePropertyReader: (SocketMessage instance) => instance.controlMessages),
      'data': VmProxy(identifier: 'data', externalInstancePropertyReader: (SocketMessage instance) => instance.data),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (SocketMessage instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (SocketMessage instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (SocketMessage instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (SocketMessage instance) => instance.toString),
    },
  );

  ///class SocketOption
  static final classSocketOption = VmClass<SocketOption>(
    identifier: 'SocketOption',
    superclassNames: ['Object'],
    externalProxyMap: {
      'tcpNoDelay': VmProxy(identifier: 'tcpNoDelay', externalStaticPropertyReader: () => SocketOption.tcpNoDelay),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (SocketOption instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (SocketOption instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (SocketOption instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (SocketOption instance) => instance.toString),
    },
  );

  ///class SplayTreeMap
  static final classSplayTreeMap = VmClass<SplayTreeMap>(
    identifier: 'SplayTreeMap',
    superclassNames: ['Object', '_SplayTree', 'Map', 'MapBase', 'MapMixin'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => SplayTreeMap.new, externalStaticFunctionCaller: ([a0, a1]) => SplayTreeMap.new(a0 == null ? null : (b0, b1) => a0(b0, b1), a1 == null ? null : (b0) => a1(b0))),
      'from': VmProxy(identifier: 'from', externalStaticPropertyReader: () => SplayTreeMap.from, externalStaticFunctionCaller: (a0, [a1, a2]) => SplayTreeMap.from(a0, a1 == null ? null : (b0, b1) => a1(b0, b1), a2 == null ? null : (b0) => a2(b0))),
      'fromIterable': VmProxy(identifier: 'fromIterable', externalStaticPropertyReader: () => SplayTreeMap.fromIterable, externalStaticFunctionCaller: (a0, {key, value, compare, isValidKey}) => SplayTreeMap.fromIterable(a0, key: key == null ? null : (b0) => key(b0), value: value == null ? null : (b0) => value(b0), compare: compare == null ? null : (b0, b1) => compare(b0, b1), isValidKey: isValidKey == null ? null : (b0) => isValidKey(b0))),
      'fromIterables': VmProxy(identifier: 'fromIterables', externalStaticPropertyReader: () => SplayTreeMap.fromIterables, externalStaticFunctionCaller: (a0, a1, [a2, a3]) => SplayTreeMap.fromIterables(a0, a1, a2 == null ? null : (b0, b1) => a2(b0, b1), a3 == null ? null : (b0) => a3(b0))),
      'of': VmProxy(identifier: 'of', externalStaticPropertyReader: () => SplayTreeMap.of, externalStaticFunctionCaller: (a0, [a1, a2]) => SplayTreeMap.of(a0, a1 == null ? null : (b0, b1) => a1(b0, b1), a2 == null ? null : (b0) => a2(b0))),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (SplayTreeMap instance) => instance.addAll),
      'addEntries': VmProxy(identifier: 'addEntries', externalInstancePropertyReader: (SplayTreeMap instance) => instance.addEntries),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (SplayTreeMap instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (SplayTreeMap instance) => instance.clear),
      'containsKey': VmProxy(identifier: 'containsKey', externalInstancePropertyReader: (SplayTreeMap instance) => instance.containsKey),
      'containsValue': VmProxy(identifier: 'containsValue', externalInstancePropertyReader: (SplayTreeMap instance) => instance.containsValue),
      'entries': VmProxy(identifier: 'entries', externalInstancePropertyReader: (SplayTreeMap instance) => instance.entries),
      'firstKey': VmProxy(identifier: 'firstKey', externalInstancePropertyReader: (SplayTreeMap instance) => instance.firstKey),
      'firstKeyAfter': VmProxy(identifier: 'firstKeyAfter', externalInstancePropertyReader: (SplayTreeMap instance) => instance.firstKeyAfter),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (SplayTreeMap instance) => instance.forEach, externalInstanceFunctionCaller: (SplayTreeMap instance, a0) => instance.forEach((b0, b1) => a0(b0, b1))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (SplayTreeMap instance) => instance.hashCode),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (SplayTreeMap instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (SplayTreeMap instance) => instance.isNotEmpty),
      'keys': VmProxy(identifier: 'keys', externalInstancePropertyReader: (SplayTreeMap instance) => instance.keys),
      'lastKey': VmProxy(identifier: 'lastKey', externalInstancePropertyReader: (SplayTreeMap instance) => instance.lastKey),
      'lastKeyBefore': VmProxy(identifier: 'lastKeyBefore', externalInstancePropertyReader: (SplayTreeMap instance) => instance.lastKeyBefore),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (SplayTreeMap instance) => instance.length),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (SplayTreeMap instance) => instance.map, externalInstanceFunctionCaller: (SplayTreeMap instance, a0) => instance.map((b0, b1) => a0(b0, b1))),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (SplayTreeMap instance) => instance.noSuchMethod),
      'putIfAbsent': VmProxy(identifier: 'putIfAbsent', externalInstancePropertyReader: (SplayTreeMap instance) => instance.putIfAbsent, externalInstanceFunctionCaller: (SplayTreeMap instance, a0, a1) => instance.putIfAbsent(a0, () => a1())),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (SplayTreeMap instance) => instance.remove),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (SplayTreeMap instance) => instance.removeWhere, externalInstanceFunctionCaller: (SplayTreeMap instance, a0) => instance.removeWhere((b0, b1) => a0(b0, b1))),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (SplayTreeMap instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (SplayTreeMap instance) => instance.toString),
      'update': VmProxy(identifier: 'update', externalInstancePropertyReader: (SplayTreeMap instance) => instance.update, externalInstanceFunctionCaller: (SplayTreeMap instance, a0, a1, {ifAbsent}) => instance.update(a0, (b0) => a1(b0), ifAbsent: ifAbsent == null ? null : () => ifAbsent())),
      'updateAll': VmProxy(identifier: 'updateAll', externalInstancePropertyReader: (SplayTreeMap instance) => instance.updateAll, externalInstanceFunctionCaller: (SplayTreeMap instance, a0) => instance.updateAll((b0, b1) => a0(b0, b1))),
      'values': VmProxy(identifier: 'values', externalInstancePropertyReader: (SplayTreeMap instance) => instance.values),
    },
  );

  ///class SplayTreeSet
  static final classSplayTreeSet = VmClass<SplayTreeSet>(
    identifier: 'SplayTreeSet',
    superclassNames: ['Object', '_SplayTree', 'Iterable', 'EfficientLengthIterable', 'Set', 'SetBase', 'SetMixin'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => SplayTreeSet.new, externalStaticFunctionCaller: ([a0, a1]) => SplayTreeSet.new(a0 == null ? null : (b0, b1) => a0(b0, b1), a1 == null ? null : (b0) => a1(b0))),
      'from': VmProxy(identifier: 'from', externalStaticPropertyReader: () => SplayTreeSet.from, externalStaticFunctionCaller: (a0, [a1, a2]) => SplayTreeSet.from(a0, a1 == null ? null : (b0, b1) => a1(b0, b1), a2 == null ? null : (b0) => a2(b0))),
      'of': VmProxy(identifier: 'of', externalStaticPropertyReader: () => SplayTreeSet.of, externalStaticFunctionCaller: (a0, [a1, a2]) => SplayTreeSet.of(a0, a1 == null ? null : (b0, b1) => a1(b0, b1), a2 == null ? null : (b0) => a2(b0))),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (SplayTreeSet instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (SplayTreeSet instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (SplayTreeSet instance) => instance.any, externalInstanceFunctionCaller: (SplayTreeSet instance, a0) => instance.any((b0) => a0(b0))),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (SplayTreeSet instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (SplayTreeSet instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (SplayTreeSet instance) => instance.contains),
      'containsAll': VmProxy(identifier: 'containsAll', externalInstancePropertyReader: (SplayTreeSet instance) => instance.containsAll),
      'difference': VmProxy(identifier: 'difference', externalInstancePropertyReader: (SplayTreeSet instance) => instance.difference),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (SplayTreeSet instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (SplayTreeSet instance) => instance.elementAtOrNull),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (SplayTreeSet instance) => instance.every, externalInstanceFunctionCaller: (SplayTreeSet instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (SplayTreeSet instance) => instance.expand, externalInstanceFunctionCaller: (SplayTreeSet instance, a0) => instance.expand((b0) => a0(b0))),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (SplayTreeSet instance) => instance.first),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (SplayTreeSet instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (SplayTreeSet instance) => instance.firstWhere, externalInstanceFunctionCaller: (SplayTreeSet instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (SplayTreeSet instance) => instance.fold, externalInstanceFunctionCaller: (SplayTreeSet instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (SplayTreeSet instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (SplayTreeSet instance) => instance.forEach, externalInstanceFunctionCaller: (SplayTreeSet instance, a0) => instance.forEach((b0) => a0(b0))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (SplayTreeSet instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (SplayTreeSet instance) => instance.indexed),
      'intersection': VmProxy(identifier: 'intersection', externalInstancePropertyReader: (SplayTreeSet instance) => instance.intersection),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (SplayTreeSet instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (SplayTreeSet instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (SplayTreeSet instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (SplayTreeSet instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (SplayTreeSet instance) => instance.last),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (SplayTreeSet instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (SplayTreeSet instance) => instance.lastWhere, externalInstanceFunctionCaller: (SplayTreeSet instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (SplayTreeSet instance) => instance.length),
      'lookup': VmProxy(identifier: 'lookup', externalInstancePropertyReader: (SplayTreeSet instance) => instance.lookup),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (SplayTreeSet instance) => instance.map, externalInstanceFunctionCaller: (SplayTreeSet instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (SplayTreeSet instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (SplayTreeSet instance) => instance.noSuchMethod),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (SplayTreeSet instance) => instance.reduce, externalInstanceFunctionCaller: (SplayTreeSet instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (SplayTreeSet instance) => instance.remove),
      'removeAll': VmProxy(identifier: 'removeAll', externalInstancePropertyReader: (SplayTreeSet instance) => instance.removeAll),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (SplayTreeSet instance) => instance.removeWhere, externalInstanceFunctionCaller: (SplayTreeSet instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'retainAll': VmProxy(identifier: 'retainAll', externalInstancePropertyReader: (SplayTreeSet instance) => instance.retainAll),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (SplayTreeSet instance) => instance.retainWhere, externalInstanceFunctionCaller: (SplayTreeSet instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (SplayTreeSet instance) => instance.runtimeType),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (SplayTreeSet instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (SplayTreeSet instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (SplayTreeSet instance) => instance.singleWhere, externalInstanceFunctionCaller: (SplayTreeSet instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (SplayTreeSet instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (SplayTreeSet instance) => instance.skipWhile, externalInstanceFunctionCaller: (SplayTreeSet instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (SplayTreeSet instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (SplayTreeSet instance) => instance.takeWhile, externalInstanceFunctionCaller: (SplayTreeSet instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (SplayTreeSet instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (SplayTreeSet instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (SplayTreeSet instance) => instance.toString),
      'union': VmProxy(identifier: 'union', externalInstancePropertyReader: (SplayTreeSet instance) => instance.union),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (SplayTreeSet instance) => instance.where, externalInstanceFunctionCaller: (SplayTreeSet instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (SplayTreeSet instance) => instance.whereType),
    },
  );

  ///class StackOverflowError
  static final classStackOverflowError = VmClass<StackOverflowError>(
    identifier: 'StackOverflowError',
    superclassNames: ['Object', 'Error'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => StackOverflowError.new),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (StackOverflowError instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (StackOverflowError instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (StackOverflowError instance) => instance.runtimeType),
      'stackTrace': VmProxy(identifier: 'stackTrace', externalInstancePropertyReader: (StackOverflowError instance) => instance.stackTrace),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (StackOverflowError instance) => instance.toString),
    },
  );

  ///class StackTrace
  static final classStackTrace = VmClass<StackTrace>(
    identifier: 'StackTrace',
    superclassNames: ['Object'],
    externalProxyMap: {
      'fromString': VmProxy(identifier: 'fromString', externalStaticPropertyReader: () => StackTrace.fromString),
      'current': VmProxy(identifier: 'current', externalStaticPropertyReader: () => StackTrace.current),
      'empty': VmProxy(identifier: 'empty', externalStaticPropertyReader: () => StackTrace.empty),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (StackTrace instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (StackTrace instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (StackTrace instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (StackTrace instance) => instance.toString),
    },
  );

  ///class StateError
  static final classStateError = VmClass<StateError>(
    identifier: 'StateError',
    superclassNames: ['Object', 'Error'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => StateError.new),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (StateError instance) => instance.hashCode),
      'message': VmProxy(identifier: 'message', externalInstancePropertyReader: (StateError instance) => instance.message),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (StateError instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (StateError instance) => instance.runtimeType),
      'stackTrace': VmProxy(identifier: 'stackTrace', externalInstancePropertyReader: (StateError instance) => instance.stackTrace),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (StateError instance) => instance.toString),
    },
  );

  ///class Stdin
  static final classStdin = VmClass<Stdin>(
    identifier: 'Stdin',
    superclassNames: ['Object', 'Stream', '_StdStream'],
    externalProxyMap: {
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (Stdin instance) => instance.any, externalInstanceFunctionCaller: (Stdin instance, a0) => instance.any((b0) => a0(b0))),
      'asBroadcastStream': VmProxy(identifier: 'asBroadcastStream', externalInstancePropertyReader: (Stdin instance) => instance.asBroadcastStream, externalInstanceFunctionCaller: (Stdin instance, {onListen, onCancel}) => instance.asBroadcastStream(onListen: onListen == null ? null : (b0) => onListen(b0), onCancel: onCancel == null ? null : (b0) => onCancel(b0))),
      'asyncExpand': VmProxy(identifier: 'asyncExpand', externalInstancePropertyReader: (Stdin instance) => instance.asyncExpand, externalInstanceFunctionCaller: (Stdin instance, a0) => instance.asyncExpand((b0) => a0(b0))),
      'asyncMap': VmProxy(identifier: 'asyncMap', externalInstancePropertyReader: (Stdin instance) => instance.asyncMap, externalInstanceFunctionCaller: (Stdin instance, a0) => instance.asyncMap((b0) => a0(b0))),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (Stdin instance) => instance.cast),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (Stdin instance) => instance.contains),
      'distinct': VmProxy(identifier: 'distinct', externalInstancePropertyReader: (Stdin instance) => instance.distinct, externalInstanceFunctionCaller: (Stdin instance, [a0]) => instance.distinct(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'drain': VmProxy(identifier: 'drain', externalInstancePropertyReader: (Stdin instance) => instance.drain),
      'echoMode': VmProxy(identifier: 'echoMode', externalInstancePropertyReader: (Stdin instance) => instance.echoMode, externalInstancePropertyWriter: (Stdin instance, value) => instance.echoMode = value),
      'echoNewlineMode': VmProxy(identifier: 'echoNewlineMode', externalInstancePropertyReader: (Stdin instance) => instance.echoNewlineMode, externalInstancePropertyWriter: (Stdin instance, value) => instance.echoNewlineMode = value),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (Stdin instance) => instance.elementAt),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (Stdin instance) => instance.every, externalInstanceFunctionCaller: (Stdin instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (Stdin instance) => instance.expand, externalInstanceFunctionCaller: (Stdin instance, a0) => instance.expand((b0) => a0(b0))),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (Stdin instance) => instance.first),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (Stdin instance) => instance.firstWhere, externalInstanceFunctionCaller: (Stdin instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (Stdin instance) => instance.fold, externalInstanceFunctionCaller: (Stdin instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (Stdin instance) => instance.forEach, externalInstanceFunctionCaller: (Stdin instance, a0) => instance.forEach((b0) => a0(b0))),
      'handleError': VmProxy(identifier: 'handleError', externalInstancePropertyReader: (Stdin instance) => instance.handleError, externalInstanceFunctionCaller: (Stdin instance, a0, {test}) => instance.handleError(a0, test: test == null ? null : (b0) => test(b0))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Stdin instance) => instance.hashCode),
      'hasTerminal': VmProxy(identifier: 'hasTerminal', externalInstancePropertyReader: (Stdin instance) => instance.hasTerminal),
      'isBroadcast': VmProxy(identifier: 'isBroadcast', externalInstancePropertyReader: (Stdin instance) => instance.isBroadcast),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (Stdin instance) => instance.isEmpty),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (Stdin instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (Stdin instance) => instance.last),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (Stdin instance) => instance.lastWhere, externalInstanceFunctionCaller: (Stdin instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (Stdin instance) => instance.length),
      'lineMode': VmProxy(identifier: 'lineMode', externalInstancePropertyReader: (Stdin instance) => instance.lineMode, externalInstancePropertyWriter: (Stdin instance, value) => instance.lineMode = value),
      'listen': VmProxy(identifier: 'listen', externalInstancePropertyReader: (Stdin instance) => instance.listen, externalInstanceFunctionCaller: (Stdin instance, a0, {onError, onDone, cancelOnError}) => instance.listen(a0 == null ? null : (b0) => a0(b0), onError: onError, onDone: onDone, cancelOnError: cancelOnError)),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (Stdin instance) => instance.map, externalInstanceFunctionCaller: (Stdin instance, a0) => instance.map((b0) => a0(b0))),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Stdin instance) => instance.noSuchMethod),
      'pipe': VmProxy(identifier: 'pipe', externalInstancePropertyReader: (Stdin instance) => instance.pipe),
      'readByteSync': VmProxy(identifier: 'readByteSync', externalInstancePropertyReader: (Stdin instance) => instance.readByteSync),
      'readLineSync': VmProxy(identifier: 'readLineSync', externalInstancePropertyReader: (Stdin instance) => instance.readLineSync),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (Stdin instance) => instance.reduce, externalInstanceFunctionCaller: (Stdin instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Stdin instance) => instance.runtimeType),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (Stdin instance) => instance.single),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (Stdin instance) => instance.singleWhere, externalInstanceFunctionCaller: (Stdin instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (Stdin instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (Stdin instance) => instance.skipWhile, externalInstanceFunctionCaller: (Stdin instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'supportsAnsiEscapes': VmProxy(identifier: 'supportsAnsiEscapes', externalInstancePropertyReader: (Stdin instance) => instance.supportsAnsiEscapes),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (Stdin instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (Stdin instance) => instance.takeWhile, externalInstanceFunctionCaller: (Stdin instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'timeout': VmProxy(identifier: 'timeout', externalInstancePropertyReader: (Stdin instance) => instance.timeout, externalInstanceFunctionCaller: (Stdin instance, a0, {onTimeout}) => instance.timeout(a0, onTimeout: onTimeout == null ? null : (b0) => onTimeout(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (Stdin instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (Stdin instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Stdin instance) => instance.toString),
      'transform': VmProxy(identifier: 'transform', externalInstancePropertyReader: (Stdin instance) => instance.transform),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (Stdin instance) => instance.where, externalInstanceFunctionCaller: (Stdin instance, a0) => instance.where((b0) => a0(b0))),
    },
  );

  ///class StdinException
  static final classStdinException = VmClass<StdinException>(
    identifier: 'StdinException',
    superclassNames: ['Object', 'Exception', 'IOException'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => StdinException.new),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (StdinException instance) => instance.hashCode),
      'message': VmProxy(identifier: 'message', externalInstancePropertyReader: (StdinException instance) => instance.message),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (StdinException instance) => instance.noSuchMethod),
      'osError': VmProxy(identifier: 'osError', externalInstancePropertyReader: (StdinException instance) => instance.osError),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (StdinException instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (StdinException instance) => instance.toString),
    },
  );

  ///class StdioType
  static final classStdioType = VmClass<StdioType>(
    identifier: 'StdioType',
    superclassNames: ['Object'],
    externalProxyMap: {
      'file': VmProxy(identifier: 'file', externalStaticPropertyReader: () => StdioType.file),
      'other': VmProxy(identifier: 'other', externalStaticPropertyReader: () => StdioType.other),
      'pipe': VmProxy(identifier: 'pipe', externalStaticPropertyReader: () => StdioType.pipe),
      'terminal': VmProxy(identifier: 'terminal', externalStaticPropertyReader: () => StdioType.terminal),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (StdioType instance) => instance.hashCode),
      'name': VmProxy(identifier: 'name', externalInstancePropertyReader: (StdioType instance) => instance.name),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (StdioType instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (StdioType instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (StdioType instance) => instance.toString),
    },
  );

  ///class Stdout
  static final classStdout = VmClass<Stdout>(
    identifier: 'Stdout',
    superclassNames: ['Object', 'Sink', 'EventSink', 'StreamConsumer', 'StreamSink', 'StringSink', 'IOSink', '_StdSink'],
    externalProxyMap: {
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (Stdout instance) => instance.add),
      'addError': VmProxy(identifier: 'addError', externalInstancePropertyReader: (Stdout instance) => instance.addError),
      'addStream': VmProxy(identifier: 'addStream', externalInstancePropertyReader: (Stdout instance) => instance.addStream),
      'close': VmProxy(identifier: 'close', externalInstancePropertyReader: (Stdout instance) => instance.close),
      'done': VmProxy(identifier: 'done', externalInstancePropertyReader: (Stdout instance) => instance.done),
      'encoding': VmProxy(identifier: 'encoding', externalInstancePropertyReader: (Stdout instance) => instance.encoding, externalInstancePropertyWriter: (Stdout instance, value) => instance.encoding = value),
      'flush': VmProxy(identifier: 'flush', externalInstancePropertyReader: (Stdout instance) => instance.flush),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Stdout instance) => instance.hashCode),
      'hasTerminal': VmProxy(identifier: 'hasTerminal', externalInstancePropertyReader: (Stdout instance) => instance.hasTerminal),
      'nonBlocking': VmProxy(identifier: 'nonBlocking', externalInstancePropertyReader: (Stdout instance) => instance.nonBlocking),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Stdout instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Stdout instance) => instance.runtimeType),
      'supportsAnsiEscapes': VmProxy(identifier: 'supportsAnsiEscapes', externalInstancePropertyReader: (Stdout instance) => instance.supportsAnsiEscapes),
      'terminalColumns': VmProxy(identifier: 'terminalColumns', externalInstancePropertyReader: (Stdout instance) => instance.terminalColumns),
      'terminalLines': VmProxy(identifier: 'terminalLines', externalInstancePropertyReader: (Stdout instance) => instance.terminalLines),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Stdout instance) => instance.toString),
      'write': VmProxy(identifier: 'write', externalInstancePropertyReader: (Stdout instance) => instance.write),
      'writeAll': VmProxy(identifier: 'writeAll', externalInstancePropertyReader: (Stdout instance) => instance.writeAll),
      'writeCharCode': VmProxy(identifier: 'writeCharCode', externalInstancePropertyReader: (Stdout instance) => instance.writeCharCode),
      'writeln': VmProxy(identifier: 'writeln', externalInstancePropertyReader: (Stdout instance) => instance.writeln),
    },
  );

  ///class StdoutException
  static final classStdoutException = VmClass<StdoutException>(
    identifier: 'StdoutException',
    superclassNames: ['Object', 'Exception', 'IOException'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => StdoutException.new),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (StdoutException instance) => instance.hashCode),
      'message': VmProxy(identifier: 'message', externalInstancePropertyReader: (StdoutException instance) => instance.message),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (StdoutException instance) => instance.noSuchMethod),
      'osError': VmProxy(identifier: 'osError', externalInstancePropertyReader: (StdoutException instance) => instance.osError),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (StdoutException instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (StdoutException instance) => instance.toString),
    },
  );

  ///class Stopwatch
  static final classStopwatch = VmClass<Stopwatch>(
    identifier: 'Stopwatch',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Stopwatch.new),
      'elapsed': VmProxy(identifier: 'elapsed', externalInstancePropertyReader: (Stopwatch instance) => instance.elapsed),
      'elapsedMicroseconds': VmProxy(identifier: 'elapsedMicroseconds', externalInstancePropertyReader: (Stopwatch instance) => instance.elapsedMicroseconds),
      'elapsedMilliseconds': VmProxy(identifier: 'elapsedMilliseconds', externalInstancePropertyReader: (Stopwatch instance) => instance.elapsedMilliseconds),
      'elapsedTicks': VmProxy(identifier: 'elapsedTicks', externalInstancePropertyReader: (Stopwatch instance) => instance.elapsedTicks),
      'frequency': VmProxy(identifier: 'frequency', externalInstancePropertyReader: (Stopwatch instance) => instance.frequency),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Stopwatch instance) => instance.hashCode),
      'isRunning': VmProxy(identifier: 'isRunning', externalInstancePropertyReader: (Stopwatch instance) => instance.isRunning),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Stopwatch instance) => instance.noSuchMethod),
      'reset': VmProxy(identifier: 'reset', externalInstancePropertyReader: (Stopwatch instance) => instance.reset),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Stopwatch instance) => instance.runtimeType),
      'start': VmProxy(identifier: 'start', externalInstancePropertyReader: (Stopwatch instance) => instance.start),
      'stop': VmProxy(identifier: 'stop', externalInstancePropertyReader: (Stopwatch instance) => instance.stop),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Stopwatch instance) => instance.toString),
    },
  );

  ///class Stream
  static final classStream = VmClass<Stream>(
    identifier: 'Stream',
    superclassNames: ['Object'],
    externalProxyMap: {
      'empty': VmProxy(identifier: 'empty', externalStaticPropertyReader: () => Stream.empty),
      'error': VmProxy(identifier: 'error', externalStaticPropertyReader: () => Stream.error),
      'eventTransformed': VmProxy(identifier: 'eventTransformed', externalStaticPropertyReader: () => Stream.eventTransformed, externalStaticFunctionCaller: (a0, a1) => Stream.eventTransformed(a0, (b0) => a1(b0))),
      'fromFuture': VmProxy(identifier: 'fromFuture', externalStaticPropertyReader: () => Stream.fromFuture),
      'fromFutures': VmProxy(identifier: 'fromFutures', externalStaticPropertyReader: () => Stream.fromFutures),
      'fromIterable': VmProxy(identifier: 'fromIterable', externalStaticPropertyReader: () => Stream.fromIterable),
      'multi': VmProxy(identifier: 'multi', externalStaticPropertyReader: () => Stream.multi, externalStaticFunctionCaller: (a0, {isBroadcast = false}) => Stream.multi((b0) => a0(b0), isBroadcast: isBroadcast)),
      'periodic': VmProxy(identifier: 'periodic', externalStaticPropertyReader: () => Stream.periodic, externalStaticFunctionCaller: (a0, [a1]) => Stream.periodic(a0, a1 == null ? null : (b0) => a1(b0))),
      'value': VmProxy(identifier: 'value', externalStaticPropertyReader: () => Stream.value),
      'castFrom': VmProxy(identifier: 'castFrom', externalStaticPropertyReader: () => Stream.castFrom),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (Stream instance) => instance.any, externalInstanceFunctionCaller: (Stream instance, a0) => instance.any((b0) => a0(b0))),
      'asBroadcastStream': VmProxy(identifier: 'asBroadcastStream', externalInstancePropertyReader: (Stream instance) => instance.asBroadcastStream, externalInstanceFunctionCaller: (Stream instance, {onListen, onCancel}) => instance.asBroadcastStream(onListen: onListen == null ? null : (b0) => onListen(b0), onCancel: onCancel == null ? null : (b0) => onCancel(b0))),
      'asyncExpand': VmProxy(identifier: 'asyncExpand', externalInstancePropertyReader: (Stream instance) => instance.asyncExpand, externalInstanceFunctionCaller: (Stream instance, a0) => instance.asyncExpand((b0) => a0(b0))),
      'asyncMap': VmProxy(identifier: 'asyncMap', externalInstancePropertyReader: (Stream instance) => instance.asyncMap, externalInstanceFunctionCaller: (Stream instance, a0) => instance.asyncMap((b0) => a0(b0))),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (Stream instance) => instance.cast),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (Stream instance) => instance.contains),
      'distinct': VmProxy(identifier: 'distinct', externalInstancePropertyReader: (Stream instance) => instance.distinct, externalInstanceFunctionCaller: (Stream instance, [a0]) => instance.distinct(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'drain': VmProxy(identifier: 'drain', externalInstancePropertyReader: (Stream instance) => instance.drain),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (Stream instance) => instance.elementAt),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (Stream instance) => instance.every, externalInstanceFunctionCaller: (Stream instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (Stream instance) => instance.expand, externalInstanceFunctionCaller: (Stream instance, a0) => instance.expand((b0) => a0(b0))),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (Stream instance) => instance.first),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (Stream instance) => instance.firstWhere, externalInstanceFunctionCaller: (Stream instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (Stream instance) => instance.fold, externalInstanceFunctionCaller: (Stream instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (Stream instance) => instance.forEach, externalInstanceFunctionCaller: (Stream instance, a0) => instance.forEach((b0) => a0(b0))),
      'handleError': VmProxy(identifier: 'handleError', externalInstancePropertyReader: (Stream instance) => instance.handleError, externalInstanceFunctionCaller: (Stream instance, a0, {test}) => instance.handleError(a0, test: test == null ? null : (b0) => test(b0))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Stream instance) => instance.hashCode),
      'isBroadcast': VmProxy(identifier: 'isBroadcast', externalInstancePropertyReader: (Stream instance) => instance.isBroadcast),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (Stream instance) => instance.isEmpty),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (Stream instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (Stream instance) => instance.last),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (Stream instance) => instance.lastWhere, externalInstanceFunctionCaller: (Stream instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (Stream instance) => instance.length),
      'listen': VmProxy(identifier: 'listen', externalInstancePropertyReader: (Stream instance) => instance.listen, externalInstanceFunctionCaller: (Stream instance, a0, {onError, onDone, cancelOnError}) => instance.listen(a0 == null ? null : (b0) => a0(b0), onError: onError, onDone: onDone, cancelOnError: cancelOnError)),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (Stream instance) => instance.map, externalInstanceFunctionCaller: (Stream instance, a0) => instance.map((b0) => a0(b0))),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Stream instance) => instance.noSuchMethod),
      'pipe': VmProxy(identifier: 'pipe', externalInstancePropertyReader: (Stream instance) => instance.pipe),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (Stream instance) => instance.reduce, externalInstanceFunctionCaller: (Stream instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Stream instance) => instance.runtimeType),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (Stream instance) => instance.single),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (Stream instance) => instance.singleWhere, externalInstanceFunctionCaller: (Stream instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (Stream instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (Stream instance) => instance.skipWhile, externalInstanceFunctionCaller: (Stream instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (Stream instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (Stream instance) => instance.takeWhile, externalInstanceFunctionCaller: (Stream instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'timeout': VmProxy(identifier: 'timeout', externalInstancePropertyReader: (Stream instance) => instance.timeout, externalInstanceFunctionCaller: (Stream instance, a0, {onTimeout}) => instance.timeout(a0, onTimeout: onTimeout == null ? null : (b0) => onTimeout(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (Stream instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (Stream instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Stream instance) => instance.toString),
      'transform': VmProxy(identifier: 'transform', externalInstancePropertyReader: (Stream instance) => instance.transform),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (Stream instance) => instance.where, externalInstanceFunctionCaller: (Stream instance, a0) => instance.where((b0) => a0(b0))),
    },
  );

  ///class StreamConsumer
  static final classStreamConsumer = VmClass<StreamConsumer>(
    identifier: 'StreamConsumer',
    superclassNames: ['Object'],
    externalProxyMap: {
      'addStream': VmProxy(identifier: 'addStream', externalInstancePropertyReader: (StreamConsumer instance) => instance.addStream),
      'close': VmProxy(identifier: 'close', externalInstancePropertyReader: (StreamConsumer instance) => instance.close),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (StreamConsumer instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (StreamConsumer instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (StreamConsumer instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (StreamConsumer instance) => instance.toString),
    },
  );

  ///class StreamController
  static final classStreamController = VmClass<StreamController>(
    identifier: 'StreamController',
    superclassNames: ['Object', 'Sink', 'EventSink', 'StreamConsumer', 'StreamSink'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => StreamController.new, externalStaticFunctionCaller: ({onListen, onPause, onResume, onCancel, sync = false}) => StreamController.new(onListen: onListen, onPause: onPause, onResume: onResume, onCancel: onCancel == null ? null : () => onCancel(), sync: sync)),
      'broadcast': VmProxy(identifier: 'broadcast', externalStaticPropertyReader: () => StreamController.broadcast),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (StreamController instance) => instance.add),
      'addError': VmProxy(identifier: 'addError', externalInstancePropertyReader: (StreamController instance) => instance.addError),
      'addStream': VmProxy(identifier: 'addStream', externalInstancePropertyReader: (StreamController instance) => instance.addStream),
      'close': VmProxy(identifier: 'close', externalInstancePropertyReader: (StreamController instance) => instance.close),
      'done': VmProxy(identifier: 'done', externalInstancePropertyReader: (StreamController instance) => instance.done),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (StreamController instance) => instance.hashCode),
      'hasListener': VmProxy(identifier: 'hasListener', externalInstancePropertyReader: (StreamController instance) => instance.hasListener),
      'isClosed': VmProxy(identifier: 'isClosed', externalInstancePropertyReader: (StreamController instance) => instance.isClosed),
      'isPaused': VmProxy(identifier: 'isPaused', externalInstancePropertyReader: (StreamController instance) => instance.isPaused),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (StreamController instance) => instance.noSuchMethod),
      'onCancel': VmProxy(identifier: 'onCancel', externalInstancePropertyReader: (StreamController instance) => instance.onCancel, externalInstancePropertyWriter: (StreamController instance, value) => instance.onCancel = value),
      'onListen': VmProxy(identifier: 'onListen', externalInstancePropertyReader: (StreamController instance) => instance.onListen, externalInstancePropertyWriter: (StreamController instance, value) => instance.onListen = value),
      'onPause': VmProxy(identifier: 'onPause', externalInstancePropertyReader: (StreamController instance) => instance.onPause, externalInstancePropertyWriter: (StreamController instance, value) => instance.onPause = value),
      'onResume': VmProxy(identifier: 'onResume', externalInstancePropertyReader: (StreamController instance) => instance.onResume, externalInstancePropertyWriter: (StreamController instance, value) => instance.onResume = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (StreamController instance) => instance.runtimeType),
      'sink': VmProxy(identifier: 'sink', externalInstancePropertyReader: (StreamController instance) => instance.sink),
      'stream': VmProxy(identifier: 'stream', externalInstancePropertyReader: (StreamController instance) => instance.stream),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (StreamController instance) => instance.toString),
    },
  );

  ///class StreamIterator
  static final classStreamIterator = VmClass<StreamIterator>(
    identifier: 'StreamIterator',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => StreamIterator.new),
      'cancel': VmProxy(identifier: 'cancel', externalInstancePropertyReader: (StreamIterator instance) => instance.cancel),
      'current': VmProxy(identifier: 'current', externalInstancePropertyReader: (StreamIterator instance) => instance.current),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (StreamIterator instance) => instance.hashCode),
      'moveNext': VmProxy(identifier: 'moveNext', externalInstancePropertyReader: (StreamIterator instance) => instance.moveNext),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (StreamIterator instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (StreamIterator instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (StreamIterator instance) => instance.toString),
    },
  );

  ///class StreamSink
  static final classStreamSink = VmClass<StreamSink>(
    identifier: 'StreamSink',
    superclassNames: ['Object', 'Sink', 'EventSink', 'StreamConsumer'],
    externalProxyMap: {
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (StreamSink instance) => instance.add),
      'addError': VmProxy(identifier: 'addError', externalInstancePropertyReader: (StreamSink instance) => instance.addError),
      'addStream': VmProxy(identifier: 'addStream', externalInstancePropertyReader: (StreamSink instance) => instance.addStream),
      'close': VmProxy(identifier: 'close', externalInstancePropertyReader: (StreamSink instance) => instance.close),
      'done': VmProxy(identifier: 'done', externalInstancePropertyReader: (StreamSink instance) => instance.done),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (StreamSink instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (StreamSink instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (StreamSink instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (StreamSink instance) => instance.toString),
    },
  );

  ///class StreamSubscription
  static final classStreamSubscription = VmClass<StreamSubscription>(
    identifier: 'StreamSubscription',
    superclassNames: ['Object'],
    externalProxyMap: {
      'asFuture': VmProxy(identifier: 'asFuture', externalInstancePropertyReader: (StreamSubscription instance) => instance.asFuture),
      'cancel': VmProxy(identifier: 'cancel', externalInstancePropertyReader: (StreamSubscription instance) => instance.cancel),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (StreamSubscription instance) => instance.hashCode),
      'isPaused': VmProxy(identifier: 'isPaused', externalInstancePropertyReader: (StreamSubscription instance) => instance.isPaused),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (StreamSubscription instance) => instance.noSuchMethod),
      'onData': VmProxy(identifier: 'onData', externalInstancePropertyReader: (StreamSubscription instance) => instance.onData, externalInstanceFunctionCaller: (StreamSubscription instance, a0) => instance.onData(a0 == null ? null : (b0) => a0(b0))),
      'onDone': VmProxy(identifier: 'onDone', externalInstancePropertyReader: (StreamSubscription instance) => instance.onDone),
      'onError': VmProxy(identifier: 'onError', externalInstancePropertyReader: (StreamSubscription instance) => instance.onError),
      'pause': VmProxy(identifier: 'pause', externalInstancePropertyReader: (StreamSubscription instance) => instance.pause),
      'resume': VmProxy(identifier: 'resume', externalInstancePropertyReader: (StreamSubscription instance) => instance.resume),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (StreamSubscription instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (StreamSubscription instance) => instance.toString),
    },
  );

  ///class StreamTransformer
  static final classStreamTransformer = VmClass<StreamTransformer>(
    identifier: 'StreamTransformer',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => StreamTransformer.new, externalStaticFunctionCaller: (a0) => StreamTransformer.new((b0, b1) => a0(b0, b1))),
      'fromBind': VmProxy(identifier: 'fromBind', externalStaticPropertyReader: () => StreamTransformer.fromBind, externalStaticFunctionCaller: (a0) => StreamTransformer.fromBind((b0) => a0(b0))),
      'fromHandlers': VmProxy(identifier: 'fromHandlers', externalStaticPropertyReader: () => StreamTransformer.fromHandlers, externalStaticFunctionCaller: ({handleData, handleError, handleDone}) => StreamTransformer.fromHandlers(handleData: handleData == null ? null : (b0, b1) => handleData(b0, b1), handleError: handleError == null ? null : (b0, b1, b2) => handleError(b0, b1, b2), handleDone: handleDone == null ? null : (b0) => handleDone(b0))),
      'castFrom': VmProxy(identifier: 'castFrom', externalStaticPropertyReader: () => StreamTransformer.castFrom),
      'bind': VmProxy(identifier: 'bind', externalInstancePropertyReader: (StreamTransformer instance) => instance.bind),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (StreamTransformer instance) => instance.cast),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (StreamTransformer instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (StreamTransformer instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (StreamTransformer instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (StreamTransformer instance) => instance.toString),
    },
  );

  ///class StreamTransformerBase
  static final classStreamTransformerBase = VmClass<StreamTransformerBase>(
    identifier: 'StreamTransformerBase',
    superclassNames: ['Object', 'StreamTransformer'],
    externalProxyMap: {
      'bind': VmProxy(identifier: 'bind', externalInstancePropertyReader: (StreamTransformerBase instance) => instance.bind),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (StreamTransformerBase instance) => instance.cast),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (StreamTransformerBase instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (StreamTransformerBase instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (StreamTransformerBase instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (StreamTransformerBase instance) => instance.toString),
    },
  );

  ///class StreamView
  static final classStreamView = VmClass<StreamView>(
    identifier: 'StreamView',
    superclassNames: ['Object', 'Stream'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => StreamView.new),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (StreamView instance) => instance.any, externalInstanceFunctionCaller: (StreamView instance, a0) => instance.any((b0) => a0(b0))),
      'asBroadcastStream': VmProxy(identifier: 'asBroadcastStream', externalInstancePropertyReader: (StreamView instance) => instance.asBroadcastStream, externalInstanceFunctionCaller: (StreamView instance, {onListen, onCancel}) => instance.asBroadcastStream(onListen: onListen == null ? null : (b0) => onListen(b0), onCancel: onCancel == null ? null : (b0) => onCancel(b0))),
      'asyncExpand': VmProxy(identifier: 'asyncExpand', externalInstancePropertyReader: (StreamView instance) => instance.asyncExpand, externalInstanceFunctionCaller: (StreamView instance, a0) => instance.asyncExpand((b0) => a0(b0))),
      'asyncMap': VmProxy(identifier: 'asyncMap', externalInstancePropertyReader: (StreamView instance) => instance.asyncMap, externalInstanceFunctionCaller: (StreamView instance, a0) => instance.asyncMap((b0) => a0(b0))),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (StreamView instance) => instance.cast),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (StreamView instance) => instance.contains),
      'distinct': VmProxy(identifier: 'distinct', externalInstancePropertyReader: (StreamView instance) => instance.distinct, externalInstanceFunctionCaller: (StreamView instance, [a0]) => instance.distinct(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'drain': VmProxy(identifier: 'drain', externalInstancePropertyReader: (StreamView instance) => instance.drain),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (StreamView instance) => instance.elementAt),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (StreamView instance) => instance.every, externalInstanceFunctionCaller: (StreamView instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (StreamView instance) => instance.expand, externalInstanceFunctionCaller: (StreamView instance, a0) => instance.expand((b0) => a0(b0))),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (StreamView instance) => instance.first),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (StreamView instance) => instance.firstWhere, externalInstanceFunctionCaller: (StreamView instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (StreamView instance) => instance.fold, externalInstanceFunctionCaller: (StreamView instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (StreamView instance) => instance.forEach, externalInstanceFunctionCaller: (StreamView instance, a0) => instance.forEach((b0) => a0(b0))),
      'handleError': VmProxy(identifier: 'handleError', externalInstancePropertyReader: (StreamView instance) => instance.handleError, externalInstanceFunctionCaller: (StreamView instance, a0, {test}) => instance.handleError(a0, test: test == null ? null : (b0) => test(b0))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (StreamView instance) => instance.hashCode),
      'isBroadcast': VmProxy(identifier: 'isBroadcast', externalInstancePropertyReader: (StreamView instance) => instance.isBroadcast),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (StreamView instance) => instance.isEmpty),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (StreamView instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (StreamView instance) => instance.last),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (StreamView instance) => instance.lastWhere, externalInstanceFunctionCaller: (StreamView instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (StreamView instance) => instance.length),
      'listen': VmProxy(identifier: 'listen', externalInstancePropertyReader: (StreamView instance) => instance.listen, externalInstanceFunctionCaller: (StreamView instance, a0, {onError, onDone, cancelOnError}) => instance.listen(a0 == null ? null : (b0) => a0(b0), onError: onError, onDone: onDone, cancelOnError: cancelOnError)),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (StreamView instance) => instance.map, externalInstanceFunctionCaller: (StreamView instance, a0) => instance.map((b0) => a0(b0))),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (StreamView instance) => instance.noSuchMethod),
      'pipe': VmProxy(identifier: 'pipe', externalInstancePropertyReader: (StreamView instance) => instance.pipe),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (StreamView instance) => instance.reduce, externalInstanceFunctionCaller: (StreamView instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (StreamView instance) => instance.runtimeType),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (StreamView instance) => instance.single),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (StreamView instance) => instance.singleWhere, externalInstanceFunctionCaller: (StreamView instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (StreamView instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (StreamView instance) => instance.skipWhile, externalInstanceFunctionCaller: (StreamView instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (StreamView instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (StreamView instance) => instance.takeWhile, externalInstanceFunctionCaller: (StreamView instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'timeout': VmProxy(identifier: 'timeout', externalInstancePropertyReader: (StreamView instance) => instance.timeout, externalInstanceFunctionCaller: (StreamView instance, a0, {onTimeout}) => instance.timeout(a0, onTimeout: onTimeout == null ? null : (b0) => onTimeout(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (StreamView instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (StreamView instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (StreamView instance) => instance.toString),
      'transform': VmProxy(identifier: 'transform', externalInstancePropertyReader: (StreamView instance) => instance.transform),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (StreamView instance) => instance.where, externalInstanceFunctionCaller: (StreamView instance, a0) => instance.where((b0) => a0(b0))),
    },
  );

  ///class String
  static final classString = VmClass<String>(
    identifier: 'String',
    superclassNames: ['Object', 'Comparable', 'Pattern'],
    externalProxyMap: {
      'fromCharCode': VmProxy(identifier: 'fromCharCode', externalStaticPropertyReader: () => String.fromCharCode),
      'fromCharCodes': VmProxy(identifier: 'fromCharCodes', externalStaticPropertyReader: () => String.fromCharCodes),
      'fromEnvironment': VmProxy(identifier: 'fromEnvironment', externalStaticPropertyReader: () => String.fromEnvironment),
      'allMatches': VmProxy(identifier: 'allMatches', externalInstancePropertyReader: (String instance) => instance.allMatches),
      'codeUnitAt': VmProxy(identifier: 'codeUnitAt', externalInstancePropertyReader: (String instance) => instance.codeUnitAt),
      'codeUnits': VmProxy(identifier: 'codeUnits', externalInstancePropertyReader: (String instance) => instance.codeUnits),
      'compareTo': VmProxy(identifier: 'compareTo', externalInstancePropertyReader: (String instance) => instance.compareTo),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (String instance) => instance.contains),
      'endsWith': VmProxy(identifier: 'endsWith', externalInstancePropertyReader: (String instance) => instance.endsWith),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (String instance) => instance.hashCode),
      'indexOf': VmProxy(identifier: 'indexOf', externalInstancePropertyReader: (String instance) => instance.indexOf),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (String instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (String instance) => instance.isNotEmpty),
      'lastIndexOf': VmProxy(identifier: 'lastIndexOf', externalInstancePropertyReader: (String instance) => instance.lastIndexOf),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (String instance) => instance.length),
      'matchAsPrefix': VmProxy(identifier: 'matchAsPrefix', externalInstancePropertyReader: (String instance) => instance.matchAsPrefix),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (String instance) => instance.noSuchMethod),
      'padLeft': VmProxy(identifier: 'padLeft', externalInstancePropertyReader: (String instance) => instance.padLeft),
      'padRight': VmProxy(identifier: 'padRight', externalInstancePropertyReader: (String instance) => instance.padRight),
      'replaceAll': VmProxy(identifier: 'replaceAll', externalInstancePropertyReader: (String instance) => instance.replaceAll),
      'replaceAllMapped': VmProxy(identifier: 'replaceAllMapped', externalInstancePropertyReader: (String instance) => instance.replaceAllMapped, externalInstanceFunctionCaller: (String instance, a0, a1) => instance.replaceAllMapped(a0, (b0) => a1(b0))),
      'replaceFirst': VmProxy(identifier: 'replaceFirst', externalInstancePropertyReader: (String instance) => instance.replaceFirst),
      'replaceFirstMapped': VmProxy(identifier: 'replaceFirstMapped', externalInstancePropertyReader: (String instance) => instance.replaceFirstMapped, externalInstanceFunctionCaller: (String instance, a0, a1, [a2 = 0]) => instance.replaceFirstMapped(a0, (b0) => a1(b0), a2)),
      'replaceRange': VmProxy(identifier: 'replaceRange', externalInstancePropertyReader: (String instance) => instance.replaceRange),
      'runes': VmProxy(identifier: 'runes', externalInstancePropertyReader: (String instance) => instance.runes),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (String instance) => instance.runtimeType),
      'split': VmProxy(identifier: 'split', externalInstancePropertyReader: (String instance) => instance.split),
      'splitMapJoin': VmProxy(identifier: 'splitMapJoin', externalInstancePropertyReader: (String instance) => instance.splitMapJoin, externalInstanceFunctionCaller: (String instance, a0, {onMatch, onNonMatch}) => instance.splitMapJoin(a0, onMatch: onMatch == null ? null : (b0) => onMatch(b0), onNonMatch: onNonMatch == null ? null : (b0) => onNonMatch(b0))),
      'startsWith': VmProxy(identifier: 'startsWith', externalInstancePropertyReader: (String instance) => instance.startsWith),
      'substring': VmProxy(identifier: 'substring', externalInstancePropertyReader: (String instance) => instance.substring),
      'toLowerCase': VmProxy(identifier: 'toLowerCase', externalInstancePropertyReader: (String instance) => instance.toLowerCase),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (String instance) => instance.toString),
      'toUpperCase': VmProxy(identifier: 'toUpperCase', externalInstancePropertyReader: (String instance) => instance.toUpperCase),
      'trim': VmProxy(identifier: 'trim', externalInstancePropertyReader: (String instance) => instance.trim),
      'trimLeft': VmProxy(identifier: 'trimLeft', externalInstancePropertyReader: (String instance) => instance.trimLeft),
      'trimRight': VmProxy(identifier: 'trimRight', externalInstancePropertyReader: (String instance) => instance.trimRight),
      'trs': VmProxy(identifier: 'trs', externalInstancePropertyReader: (String instance) => instance.trs),
      'trsCode': VmProxy(identifier: 'trsCode', externalInstancePropertyReader: (String instance) => instance.trsCode),
      'trsParams': VmProxy(identifier: 'trsParams', externalInstancePropertyReader: (String instance) => instance.trsParams),
    },
  );

  ///class StringBuffer
  static final classStringBuffer = VmClass<StringBuffer>(
    identifier: 'StringBuffer',
    superclassNames: ['Object', 'StringSink'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => StringBuffer.new),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (StringBuffer instance) => instance.clear),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (StringBuffer instance) => instance.hashCode),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (StringBuffer instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (StringBuffer instance) => instance.isNotEmpty),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (StringBuffer instance) => instance.length),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (StringBuffer instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (StringBuffer instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (StringBuffer instance) => instance.toString),
      'write': VmProxy(identifier: 'write', externalInstancePropertyReader: (StringBuffer instance) => instance.write),
      'writeAll': VmProxy(identifier: 'writeAll', externalInstancePropertyReader: (StringBuffer instance) => instance.writeAll),
      'writeCharCode': VmProxy(identifier: 'writeCharCode', externalInstancePropertyReader: (StringBuffer instance) => instance.writeCharCode),
      'writeln': VmProxy(identifier: 'writeln', externalInstancePropertyReader: (StringBuffer instance) => instance.writeln),
    },
  );

  ///class StringConversionSink
  static final classStringConversionSink = VmClass<StringConversionSink>(
    identifier: 'StringConversionSink',
    superclassNames: ['Object', 'Sink', 'ChunkedConversionSink'],
    externalProxyMap: {
      'from': VmProxy(identifier: 'from', externalStaticPropertyReader: () => StringConversionSink.from),
      'fromStringSink': VmProxy(identifier: 'fromStringSink', externalStaticPropertyReader: () => StringConversionSink.fromStringSink),
      'withCallback': VmProxy(identifier: 'withCallback', externalStaticPropertyReader: () => StringConversionSink.withCallback, externalStaticFunctionCaller: (a0) => StringConversionSink.withCallback((b0) => a0(b0))),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (StringConversionSink instance) => instance.add),
      'addSlice': VmProxy(identifier: 'addSlice', externalInstancePropertyReader: (StringConversionSink instance) => instance.addSlice),
      'asStringSink': VmProxy(identifier: 'asStringSink', externalInstancePropertyReader: (StringConversionSink instance) => instance.asStringSink),
      'asUtf8Sink': VmProxy(identifier: 'asUtf8Sink', externalInstancePropertyReader: (StringConversionSink instance) => instance.asUtf8Sink),
      'close': VmProxy(identifier: 'close', externalInstancePropertyReader: (StringConversionSink instance) => instance.close),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (StringConversionSink instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (StringConversionSink instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (StringConversionSink instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (StringConversionSink instance) => instance.toString),
    },
  );

  ///class StringConversionSinkBase
  static final classStringConversionSinkBase = VmClass<StringConversionSinkBase>(
    identifier: 'StringConversionSinkBase',
    superclassNames: ['Object', 'Sink', 'ChunkedConversionSink', 'StringConversionSink'],
    externalProxyMap: {
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (StringConversionSinkBase instance) => instance.add),
      'addSlice': VmProxy(identifier: 'addSlice', externalInstancePropertyReader: (StringConversionSinkBase instance) => instance.addSlice),
      'asStringSink': VmProxy(identifier: 'asStringSink', externalInstancePropertyReader: (StringConversionSinkBase instance) => instance.asStringSink),
      'asUtf8Sink': VmProxy(identifier: 'asUtf8Sink', externalInstancePropertyReader: (StringConversionSinkBase instance) => instance.asUtf8Sink),
      'close': VmProxy(identifier: 'close', externalInstancePropertyReader: (StringConversionSinkBase instance) => instance.close),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (StringConversionSinkBase instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (StringConversionSinkBase instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (StringConversionSinkBase instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (StringConversionSinkBase instance) => instance.toString),
    },
  );

  ///class StringConversionSinkMixin
  static final classStringConversionSinkMixin = VmClass<StringConversionSinkMixin>(
    identifier: 'StringConversionSinkMixin',
    superclassNames: ['Object', 'Sink', 'ChunkedConversionSink', 'StringConversionSink'],
    externalProxyMap: {
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (StringConversionSinkMixin instance) => instance.add),
      'addSlice': VmProxy(identifier: 'addSlice', externalInstancePropertyReader: (StringConversionSinkMixin instance) => instance.addSlice),
      'asStringSink': VmProxy(identifier: 'asStringSink', externalInstancePropertyReader: (StringConversionSinkMixin instance) => instance.asStringSink),
      'asUtf8Sink': VmProxy(identifier: 'asUtf8Sink', externalInstancePropertyReader: (StringConversionSinkMixin instance) => instance.asUtf8Sink),
      'close': VmProxy(identifier: 'close', externalInstancePropertyReader: (StringConversionSinkMixin instance) => instance.close),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (StringConversionSinkMixin instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (StringConversionSinkMixin instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (StringConversionSinkMixin instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (StringConversionSinkMixin instance) => instance.toString),
    },
  );

  ///class StringSink
  static final classStringSink = VmClass<StringSink>(
    identifier: 'StringSink',
    superclassNames: ['Object'],
    externalProxyMap: {
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (StringSink instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (StringSink instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (StringSink instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (StringSink instance) => instance.toString),
      'write': VmProxy(identifier: 'write', externalInstancePropertyReader: (StringSink instance) => instance.write),
      'writeAll': VmProxy(identifier: 'writeAll', externalInstancePropertyReader: (StringSink instance) => instance.writeAll),
      'writeCharCode': VmProxy(identifier: 'writeCharCode', externalInstancePropertyReader: (StringSink instance) => instance.writeCharCode),
      'writeln': VmProxy(identifier: 'writeln', externalInstancePropertyReader: (StringSink instance) => instance.writeln),
    },
  );

  ///class Symbol
  static final classSymbol = VmClass<Symbol>(
    identifier: 'Symbol',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Symbol.new),
      'empty': VmProxy(identifier: 'empty', externalStaticPropertyReader: () => Symbol.empty),
      'unaryMinus': VmProxy(identifier: 'unaryMinus', externalStaticPropertyReader: () => Symbol.unaryMinus),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Symbol instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Symbol instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Symbol instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Symbol instance) => instance.toString),
    },
  );

  ///class SynchronousStreamController
  static final classSynchronousStreamController = VmClass<SynchronousStreamController>(
    identifier: 'SynchronousStreamController',
    superclassNames: ['Object', 'Sink', 'EventSink', 'StreamConsumer', 'StreamSink', 'StreamController'],
    externalProxyMap: {
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (SynchronousStreamController instance) => instance.add),
      'addError': VmProxy(identifier: 'addError', externalInstancePropertyReader: (SynchronousStreamController instance) => instance.addError),
      'addStream': VmProxy(identifier: 'addStream', externalInstancePropertyReader: (SynchronousStreamController instance) => instance.addStream),
      'close': VmProxy(identifier: 'close', externalInstancePropertyReader: (SynchronousStreamController instance) => instance.close),
      'done': VmProxy(identifier: 'done', externalInstancePropertyReader: (SynchronousStreamController instance) => instance.done),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (SynchronousStreamController instance) => instance.hashCode),
      'hasListener': VmProxy(identifier: 'hasListener', externalInstancePropertyReader: (SynchronousStreamController instance) => instance.hasListener),
      'isClosed': VmProxy(identifier: 'isClosed', externalInstancePropertyReader: (SynchronousStreamController instance) => instance.isClosed),
      'isPaused': VmProxy(identifier: 'isPaused', externalInstancePropertyReader: (SynchronousStreamController instance) => instance.isPaused),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (SynchronousStreamController instance) => instance.noSuchMethod),
      'onCancel': VmProxy(identifier: 'onCancel', externalInstancePropertyReader: (SynchronousStreamController instance) => instance.onCancel, externalInstancePropertyWriter: (SynchronousStreamController instance, value) => instance.onCancel = value),
      'onListen': VmProxy(identifier: 'onListen', externalInstancePropertyReader: (SynchronousStreamController instance) => instance.onListen, externalInstancePropertyWriter: (SynchronousStreamController instance, value) => instance.onListen = value),
      'onPause': VmProxy(identifier: 'onPause', externalInstancePropertyReader: (SynchronousStreamController instance) => instance.onPause, externalInstancePropertyWriter: (SynchronousStreamController instance, value) => instance.onPause = value),
      'onResume': VmProxy(identifier: 'onResume', externalInstancePropertyReader: (SynchronousStreamController instance) => instance.onResume, externalInstancePropertyWriter: (SynchronousStreamController instance, value) => instance.onResume = value),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (SynchronousStreamController instance) => instance.runtimeType),
      'sink': VmProxy(identifier: 'sink', externalInstancePropertyReader: (SynchronousStreamController instance) => instance.sink),
      'stream': VmProxy(identifier: 'stream', externalInstancePropertyReader: (SynchronousStreamController instance) => instance.stream),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (SynchronousStreamController instance) => instance.toString),
    },
  );

  ///class SystemEncoding
  static final classSystemEncoding = VmClass<SystemEncoding>(
    identifier: 'SystemEncoding',
    superclassNames: ['Object', 'Codec', 'Encoding'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => SystemEncoding.new),
      'decode': VmProxy(identifier: 'decode', externalInstancePropertyReader: (SystemEncoding instance) => instance.decode),
      'decoder': VmProxy(identifier: 'decoder', externalInstancePropertyReader: (SystemEncoding instance) => instance.decoder),
      'decodeStream': VmProxy(identifier: 'decodeStream', externalInstancePropertyReader: (SystemEncoding instance) => instance.decodeStream),
      'encode': VmProxy(identifier: 'encode', externalInstancePropertyReader: (SystemEncoding instance) => instance.encode),
      'encoder': VmProxy(identifier: 'encoder', externalInstancePropertyReader: (SystemEncoding instance) => instance.encoder),
      'fuse': VmProxy(identifier: 'fuse', externalInstancePropertyReader: (SystemEncoding instance) => instance.fuse),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (SystemEncoding instance) => instance.hashCode),
      'inverted': VmProxy(identifier: 'inverted', externalInstancePropertyReader: (SystemEncoding instance) => instance.inverted),
      'name': VmProxy(identifier: 'name', externalInstancePropertyReader: (SystemEncoding instance) => instance.name),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (SystemEncoding instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (SystemEncoding instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (SystemEncoding instance) => instance.toString),
    },
  );

  ///class TimeoutException
  static final classTimeoutException = VmClass<TimeoutException>(
    identifier: 'TimeoutException',
    superclassNames: ['Object', 'Exception'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => TimeoutException.new),
      'duration': VmProxy(identifier: 'duration', externalInstancePropertyReader: (TimeoutException instance) => instance.duration),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (TimeoutException instance) => instance.hashCode),
      'message': VmProxy(identifier: 'message', externalInstancePropertyReader: (TimeoutException instance) => instance.message),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (TimeoutException instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (TimeoutException instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (TimeoutException instance) => instance.toString),
    },
  );

  ///class Timer
  static final classTimer = VmClass<Timer>(
    identifier: 'Timer',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Timer.new),
      'periodic': VmProxy(identifier: 'periodic', externalStaticPropertyReader: () => Timer.periodic, externalStaticFunctionCaller: (a0, a1) => Timer.periodic(a0, (b0) => a1(b0))),
      'run': VmProxy(identifier: 'run', externalStaticPropertyReader: () => Timer.run),
      'cancel': VmProxy(identifier: 'cancel', externalInstancePropertyReader: (Timer instance) => instance.cancel),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Timer instance) => instance.hashCode),
      'isActive': VmProxy(identifier: 'isActive', externalInstancePropertyReader: (Timer instance) => instance.isActive),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Timer instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Timer instance) => instance.runtimeType),
      'tick': VmProxy(identifier: 'tick', externalInstancePropertyReader: (Timer instance) => instance.tick),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Timer instance) => instance.toString),
    },
  );

  ///class TlsException
  static final classTlsException = VmClass<TlsException>(
    identifier: 'TlsException',
    superclassNames: ['Object', 'Exception', 'IOException'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => TlsException.new),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (TlsException instance) => instance.hashCode),
      'message': VmProxy(identifier: 'message', externalInstancePropertyReader: (TlsException instance) => instance.message),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (TlsException instance) => instance.noSuchMethod),
      'osError': VmProxy(identifier: 'osError', externalInstancePropertyReader: (TlsException instance) => instance.osError),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (TlsException instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (TlsException instance) => instance.toString),
      'type': VmProxy(identifier: 'type', externalInstancePropertyReader: (TlsException instance) => instance.type),
    },
  );

  ///class TransferableTypedData
  static final classTransferableTypedData = VmClass<TransferableTypedData>(
    identifier: 'TransferableTypedData',
    superclassNames: ['Object'],
    externalProxyMap: {
      'fromList': VmProxy(identifier: 'fromList', externalStaticPropertyReader: () => TransferableTypedData.fromList),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (TransferableTypedData instance) => instance.hashCode),
      'materialize': VmProxy(identifier: 'materialize', externalInstancePropertyReader: (TransferableTypedData instance) => instance.materialize),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (TransferableTypedData instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (TransferableTypedData instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (TransferableTypedData instance) => instance.toString),
    },
  );

  ///class Type
  static final classType = VmClass<Type>(
    identifier: 'Type',
    superclassNames: ['Object'],
    externalProxyMap: {
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Type instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Type instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Type instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Type instance) => instance.toString),
    },
  );

  ///class TypedData
  static final classTypedData = VmClass<TypedData>(
    identifier: 'TypedData',
    superclassNames: ['Object'],
    externalProxyMap: {
      'buffer': VmProxy(identifier: 'buffer', externalInstancePropertyReader: (TypedData instance) => instance.buffer),
      'elementSizeInBytes': VmProxy(identifier: 'elementSizeInBytes', externalInstancePropertyReader: (TypedData instance) => instance.elementSizeInBytes),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (TypedData instance) => instance.hashCode),
      'lengthInBytes': VmProxy(identifier: 'lengthInBytes', externalInstancePropertyReader: (TypedData instance) => instance.lengthInBytes),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (TypedData instance) => instance.noSuchMethod),
      'offsetInBytes': VmProxy(identifier: 'offsetInBytes', externalInstancePropertyReader: (TypedData instance) => instance.offsetInBytes),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (TypedData instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (TypedData instance) => instance.toString),
    },
  );

  ///class TypeError
  static final classTypeError = VmClass<TypeError>(
    identifier: 'TypeError',
    superclassNames: ['Object', 'Error'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => TypeError.new),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (TypeError instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (TypeError instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (TypeError instance) => instance.runtimeType),
      'stackTrace': VmProxy(identifier: 'stackTrace', externalInstancePropertyReader: (TypeError instance) => instance.stackTrace),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (TypeError instance) => instance.toString),
    },
  );

  ///class Uint16List
  static final classUint16List = VmClass<Uint16List>(
    identifier: 'Uint16List',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable', 'List', 'TypedData', '_TypedIntList'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Uint16List.new),
      'fromList': VmProxy(identifier: 'fromList', externalStaticPropertyReader: () => Uint16List.fromList),
      'sublistView': VmProxy(identifier: 'sublistView', externalStaticPropertyReader: () => Uint16List.sublistView),
      'view': VmProxy(identifier: 'view', externalStaticPropertyReader: () => Uint16List.view),
      'bytesPerElement': VmProxy(identifier: 'bytesPerElement', externalStaticPropertyReader: () => Uint16List.bytesPerElement),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (Uint16List instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (Uint16List instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (Uint16List instance) => instance.any, externalInstanceFunctionCaller: (Uint16List instance, a0) => instance.any((b0) => a0(b0))),
      'asMap': VmProxy(identifier: 'asMap', externalInstancePropertyReader: (Uint16List instance) => instance.asMap),
      'buffer': VmProxy(identifier: 'buffer', externalInstancePropertyReader: (Uint16List instance) => instance.buffer),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (Uint16List instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (Uint16List instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (Uint16List instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (Uint16List instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (Uint16List instance) => instance.elementAtOrNull),
      'elementSizeInBytes': VmProxy(identifier: 'elementSizeInBytes', externalInstancePropertyReader: (Uint16List instance) => instance.elementSizeInBytes),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (Uint16List instance) => instance.every, externalInstanceFunctionCaller: (Uint16List instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (Uint16List instance) => instance.expand, externalInstanceFunctionCaller: (Uint16List instance, a0) => instance.expand((b0) => a0(b0))),
      'fillRange': VmProxy(identifier: 'fillRange', externalInstancePropertyReader: (Uint16List instance) => instance.fillRange),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (Uint16List instance) => instance.first, externalInstancePropertyWriter: (Uint16List instance, value) => instance.first = value),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (Uint16List instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (Uint16List instance) => instance.firstWhere, externalInstanceFunctionCaller: (Uint16List instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (Uint16List instance) => instance.fold, externalInstanceFunctionCaller: (Uint16List instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (Uint16List instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (Uint16List instance) => instance.forEach, externalInstanceFunctionCaller: (Uint16List instance, a0) => instance.forEach((b0) => a0(b0))),
      'getRange': VmProxy(identifier: 'getRange', externalInstancePropertyReader: (Uint16List instance) => instance.getRange),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Uint16List instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (Uint16List instance) => instance.indexed),
      'indexOf': VmProxy(identifier: 'indexOf', externalInstancePropertyReader: (Uint16List instance) => instance.indexOf),
      'indexWhere': VmProxy(identifier: 'indexWhere', externalInstancePropertyReader: (Uint16List instance) => instance.indexWhere, externalInstanceFunctionCaller: (Uint16List instance, a0, [a1 = 0]) => instance.indexWhere((b0) => a0(b0), a1)),
      'insert': VmProxy(identifier: 'insert', externalInstancePropertyReader: (Uint16List instance) => instance.insert),
      'insertAll': VmProxy(identifier: 'insertAll', externalInstancePropertyReader: (Uint16List instance) => instance.insertAll),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (Uint16List instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (Uint16List instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (Uint16List instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (Uint16List instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (Uint16List instance) => instance.last, externalInstancePropertyWriter: (Uint16List instance, value) => instance.last = value),
      'lastIndexOf': VmProxy(identifier: 'lastIndexOf', externalInstancePropertyReader: (Uint16List instance) => instance.lastIndexOf),
      'lastIndexWhere': VmProxy(identifier: 'lastIndexWhere', externalInstancePropertyReader: (Uint16List instance) => instance.lastIndexWhere, externalInstanceFunctionCaller: (Uint16List instance, a0, [a1]) => instance.lastIndexWhere((b0) => a0(b0), a1)),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (Uint16List instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (Uint16List instance) => instance.lastWhere, externalInstanceFunctionCaller: (Uint16List instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (Uint16List instance) => instance.length, externalInstancePropertyWriter: (Uint16List instance, value) => instance.length = value),
      'lengthInBytes': VmProxy(identifier: 'lengthInBytes', externalInstancePropertyReader: (Uint16List instance) => instance.lengthInBytes),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (Uint16List instance) => instance.map, externalInstanceFunctionCaller: (Uint16List instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (Uint16List instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Uint16List instance) => instance.noSuchMethod),
      'offsetInBytes': VmProxy(identifier: 'offsetInBytes', externalInstancePropertyReader: (Uint16List instance) => instance.offsetInBytes),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (Uint16List instance) => instance.reduce, externalInstanceFunctionCaller: (Uint16List instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (Uint16List instance) => instance.remove),
      'removeAt': VmProxy(identifier: 'removeAt', externalInstancePropertyReader: (Uint16List instance) => instance.removeAt),
      'removeLast': VmProxy(identifier: 'removeLast', externalInstancePropertyReader: (Uint16List instance) => instance.removeLast),
      'removeRange': VmProxy(identifier: 'removeRange', externalInstancePropertyReader: (Uint16List instance) => instance.removeRange),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (Uint16List instance) => instance.removeWhere, externalInstanceFunctionCaller: (Uint16List instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'replaceRange': VmProxy(identifier: 'replaceRange', externalInstancePropertyReader: (Uint16List instance) => instance.replaceRange),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (Uint16List instance) => instance.retainWhere, externalInstanceFunctionCaller: (Uint16List instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'reversed': VmProxy(identifier: 'reversed', externalInstancePropertyReader: (Uint16List instance) => instance.reversed),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Uint16List instance) => instance.runtimeType),
      'setAll': VmProxy(identifier: 'setAll', externalInstancePropertyReader: (Uint16List instance) => instance.setAll),
      'setRange': VmProxy(identifier: 'setRange', externalInstancePropertyReader: (Uint16List instance) => instance.setRange),
      'shuffle': VmProxy(identifier: 'shuffle', externalInstancePropertyReader: (Uint16List instance) => instance.shuffle),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (Uint16List instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (Uint16List instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (Uint16List instance) => instance.singleWhere, externalInstanceFunctionCaller: (Uint16List instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (Uint16List instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (Uint16List instance) => instance.skipWhile, externalInstanceFunctionCaller: (Uint16List instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'sort': VmProxy(identifier: 'sort', externalInstancePropertyReader: (Uint16List instance) => instance.sort, externalInstanceFunctionCaller: (Uint16List instance, [a0]) => instance.sort(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'sublist': VmProxy(identifier: 'sublist', externalInstancePropertyReader: (Uint16List instance) => instance.sublist),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (Uint16List instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (Uint16List instance) => instance.takeWhile, externalInstanceFunctionCaller: (Uint16List instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (Uint16List instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (Uint16List instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Uint16List instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (Uint16List instance) => instance.where, externalInstanceFunctionCaller: (Uint16List instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (Uint16List instance) => instance.whereType),
    },
  );

  ///class Uint32List
  static final classUint32List = VmClass<Uint32List>(
    identifier: 'Uint32List',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable', 'List', 'TypedData', '_TypedIntList'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Uint32List.new),
      'fromList': VmProxy(identifier: 'fromList', externalStaticPropertyReader: () => Uint32List.fromList),
      'sublistView': VmProxy(identifier: 'sublistView', externalStaticPropertyReader: () => Uint32List.sublistView),
      'view': VmProxy(identifier: 'view', externalStaticPropertyReader: () => Uint32List.view),
      'bytesPerElement': VmProxy(identifier: 'bytesPerElement', externalStaticPropertyReader: () => Uint32List.bytesPerElement),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (Uint32List instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (Uint32List instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (Uint32List instance) => instance.any, externalInstanceFunctionCaller: (Uint32List instance, a0) => instance.any((b0) => a0(b0))),
      'asMap': VmProxy(identifier: 'asMap', externalInstancePropertyReader: (Uint32List instance) => instance.asMap),
      'buffer': VmProxy(identifier: 'buffer', externalInstancePropertyReader: (Uint32List instance) => instance.buffer),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (Uint32List instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (Uint32List instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (Uint32List instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (Uint32List instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (Uint32List instance) => instance.elementAtOrNull),
      'elementSizeInBytes': VmProxy(identifier: 'elementSizeInBytes', externalInstancePropertyReader: (Uint32List instance) => instance.elementSizeInBytes),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (Uint32List instance) => instance.every, externalInstanceFunctionCaller: (Uint32List instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (Uint32List instance) => instance.expand, externalInstanceFunctionCaller: (Uint32List instance, a0) => instance.expand((b0) => a0(b0))),
      'fillRange': VmProxy(identifier: 'fillRange', externalInstancePropertyReader: (Uint32List instance) => instance.fillRange),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (Uint32List instance) => instance.first, externalInstancePropertyWriter: (Uint32List instance, value) => instance.first = value),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (Uint32List instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (Uint32List instance) => instance.firstWhere, externalInstanceFunctionCaller: (Uint32List instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (Uint32List instance) => instance.fold, externalInstanceFunctionCaller: (Uint32List instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (Uint32List instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (Uint32List instance) => instance.forEach, externalInstanceFunctionCaller: (Uint32List instance, a0) => instance.forEach((b0) => a0(b0))),
      'getRange': VmProxy(identifier: 'getRange', externalInstancePropertyReader: (Uint32List instance) => instance.getRange),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Uint32List instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (Uint32List instance) => instance.indexed),
      'indexOf': VmProxy(identifier: 'indexOf', externalInstancePropertyReader: (Uint32List instance) => instance.indexOf),
      'indexWhere': VmProxy(identifier: 'indexWhere', externalInstancePropertyReader: (Uint32List instance) => instance.indexWhere, externalInstanceFunctionCaller: (Uint32List instance, a0, [a1 = 0]) => instance.indexWhere((b0) => a0(b0), a1)),
      'insert': VmProxy(identifier: 'insert', externalInstancePropertyReader: (Uint32List instance) => instance.insert),
      'insertAll': VmProxy(identifier: 'insertAll', externalInstancePropertyReader: (Uint32List instance) => instance.insertAll),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (Uint32List instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (Uint32List instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (Uint32List instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (Uint32List instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (Uint32List instance) => instance.last, externalInstancePropertyWriter: (Uint32List instance, value) => instance.last = value),
      'lastIndexOf': VmProxy(identifier: 'lastIndexOf', externalInstancePropertyReader: (Uint32List instance) => instance.lastIndexOf),
      'lastIndexWhere': VmProxy(identifier: 'lastIndexWhere', externalInstancePropertyReader: (Uint32List instance) => instance.lastIndexWhere, externalInstanceFunctionCaller: (Uint32List instance, a0, [a1]) => instance.lastIndexWhere((b0) => a0(b0), a1)),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (Uint32List instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (Uint32List instance) => instance.lastWhere, externalInstanceFunctionCaller: (Uint32List instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (Uint32List instance) => instance.length, externalInstancePropertyWriter: (Uint32List instance, value) => instance.length = value),
      'lengthInBytes': VmProxy(identifier: 'lengthInBytes', externalInstancePropertyReader: (Uint32List instance) => instance.lengthInBytes),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (Uint32List instance) => instance.map, externalInstanceFunctionCaller: (Uint32List instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (Uint32List instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Uint32List instance) => instance.noSuchMethod),
      'offsetInBytes': VmProxy(identifier: 'offsetInBytes', externalInstancePropertyReader: (Uint32List instance) => instance.offsetInBytes),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (Uint32List instance) => instance.reduce, externalInstanceFunctionCaller: (Uint32List instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (Uint32List instance) => instance.remove),
      'removeAt': VmProxy(identifier: 'removeAt', externalInstancePropertyReader: (Uint32List instance) => instance.removeAt),
      'removeLast': VmProxy(identifier: 'removeLast', externalInstancePropertyReader: (Uint32List instance) => instance.removeLast),
      'removeRange': VmProxy(identifier: 'removeRange', externalInstancePropertyReader: (Uint32List instance) => instance.removeRange),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (Uint32List instance) => instance.removeWhere, externalInstanceFunctionCaller: (Uint32List instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'replaceRange': VmProxy(identifier: 'replaceRange', externalInstancePropertyReader: (Uint32List instance) => instance.replaceRange),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (Uint32List instance) => instance.retainWhere, externalInstanceFunctionCaller: (Uint32List instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'reversed': VmProxy(identifier: 'reversed', externalInstancePropertyReader: (Uint32List instance) => instance.reversed),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Uint32List instance) => instance.runtimeType),
      'setAll': VmProxy(identifier: 'setAll', externalInstancePropertyReader: (Uint32List instance) => instance.setAll),
      'setRange': VmProxy(identifier: 'setRange', externalInstancePropertyReader: (Uint32List instance) => instance.setRange),
      'shuffle': VmProxy(identifier: 'shuffle', externalInstancePropertyReader: (Uint32List instance) => instance.shuffle),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (Uint32List instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (Uint32List instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (Uint32List instance) => instance.singleWhere, externalInstanceFunctionCaller: (Uint32List instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (Uint32List instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (Uint32List instance) => instance.skipWhile, externalInstanceFunctionCaller: (Uint32List instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'sort': VmProxy(identifier: 'sort', externalInstancePropertyReader: (Uint32List instance) => instance.sort, externalInstanceFunctionCaller: (Uint32List instance, [a0]) => instance.sort(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'sublist': VmProxy(identifier: 'sublist', externalInstancePropertyReader: (Uint32List instance) => instance.sublist),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (Uint32List instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (Uint32List instance) => instance.takeWhile, externalInstanceFunctionCaller: (Uint32List instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (Uint32List instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (Uint32List instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Uint32List instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (Uint32List instance) => instance.where, externalInstanceFunctionCaller: (Uint32List instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (Uint32List instance) => instance.whereType),
    },
  );

  ///class Uint64List
  static final classUint64List = VmClass<Uint64List>(
    identifier: 'Uint64List',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable', 'List', 'TypedData', '_TypedIntList'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Uint64List.new),
      'fromList': VmProxy(identifier: 'fromList', externalStaticPropertyReader: () => Uint64List.fromList),
      'sublistView': VmProxy(identifier: 'sublistView', externalStaticPropertyReader: () => Uint64List.sublistView),
      'view': VmProxy(identifier: 'view', externalStaticPropertyReader: () => Uint64List.view),
      'bytesPerElement': VmProxy(identifier: 'bytesPerElement', externalStaticPropertyReader: () => Uint64List.bytesPerElement),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (Uint64List instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (Uint64List instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (Uint64List instance) => instance.any, externalInstanceFunctionCaller: (Uint64List instance, a0) => instance.any((b0) => a0(b0))),
      'asMap': VmProxy(identifier: 'asMap', externalInstancePropertyReader: (Uint64List instance) => instance.asMap),
      'buffer': VmProxy(identifier: 'buffer', externalInstancePropertyReader: (Uint64List instance) => instance.buffer),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (Uint64List instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (Uint64List instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (Uint64List instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (Uint64List instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (Uint64List instance) => instance.elementAtOrNull),
      'elementSizeInBytes': VmProxy(identifier: 'elementSizeInBytes', externalInstancePropertyReader: (Uint64List instance) => instance.elementSizeInBytes),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (Uint64List instance) => instance.every, externalInstanceFunctionCaller: (Uint64List instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (Uint64List instance) => instance.expand, externalInstanceFunctionCaller: (Uint64List instance, a0) => instance.expand((b0) => a0(b0))),
      'fillRange': VmProxy(identifier: 'fillRange', externalInstancePropertyReader: (Uint64List instance) => instance.fillRange),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (Uint64List instance) => instance.first, externalInstancePropertyWriter: (Uint64List instance, value) => instance.first = value),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (Uint64List instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (Uint64List instance) => instance.firstWhere, externalInstanceFunctionCaller: (Uint64List instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (Uint64List instance) => instance.fold, externalInstanceFunctionCaller: (Uint64List instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (Uint64List instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (Uint64List instance) => instance.forEach, externalInstanceFunctionCaller: (Uint64List instance, a0) => instance.forEach((b0) => a0(b0))),
      'getRange': VmProxy(identifier: 'getRange', externalInstancePropertyReader: (Uint64List instance) => instance.getRange),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Uint64List instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (Uint64List instance) => instance.indexed),
      'indexOf': VmProxy(identifier: 'indexOf', externalInstancePropertyReader: (Uint64List instance) => instance.indexOf),
      'indexWhere': VmProxy(identifier: 'indexWhere', externalInstancePropertyReader: (Uint64List instance) => instance.indexWhere, externalInstanceFunctionCaller: (Uint64List instance, a0, [a1 = 0]) => instance.indexWhere((b0) => a0(b0), a1)),
      'insert': VmProxy(identifier: 'insert', externalInstancePropertyReader: (Uint64List instance) => instance.insert),
      'insertAll': VmProxy(identifier: 'insertAll', externalInstancePropertyReader: (Uint64List instance) => instance.insertAll),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (Uint64List instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (Uint64List instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (Uint64List instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (Uint64List instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (Uint64List instance) => instance.last, externalInstancePropertyWriter: (Uint64List instance, value) => instance.last = value),
      'lastIndexOf': VmProxy(identifier: 'lastIndexOf', externalInstancePropertyReader: (Uint64List instance) => instance.lastIndexOf),
      'lastIndexWhere': VmProxy(identifier: 'lastIndexWhere', externalInstancePropertyReader: (Uint64List instance) => instance.lastIndexWhere, externalInstanceFunctionCaller: (Uint64List instance, a0, [a1]) => instance.lastIndexWhere((b0) => a0(b0), a1)),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (Uint64List instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (Uint64List instance) => instance.lastWhere, externalInstanceFunctionCaller: (Uint64List instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (Uint64List instance) => instance.length, externalInstancePropertyWriter: (Uint64List instance, value) => instance.length = value),
      'lengthInBytes': VmProxy(identifier: 'lengthInBytes', externalInstancePropertyReader: (Uint64List instance) => instance.lengthInBytes),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (Uint64List instance) => instance.map, externalInstanceFunctionCaller: (Uint64List instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (Uint64List instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Uint64List instance) => instance.noSuchMethod),
      'offsetInBytes': VmProxy(identifier: 'offsetInBytes', externalInstancePropertyReader: (Uint64List instance) => instance.offsetInBytes),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (Uint64List instance) => instance.reduce, externalInstanceFunctionCaller: (Uint64List instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (Uint64List instance) => instance.remove),
      'removeAt': VmProxy(identifier: 'removeAt', externalInstancePropertyReader: (Uint64List instance) => instance.removeAt),
      'removeLast': VmProxy(identifier: 'removeLast', externalInstancePropertyReader: (Uint64List instance) => instance.removeLast),
      'removeRange': VmProxy(identifier: 'removeRange', externalInstancePropertyReader: (Uint64List instance) => instance.removeRange),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (Uint64List instance) => instance.removeWhere, externalInstanceFunctionCaller: (Uint64List instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'replaceRange': VmProxy(identifier: 'replaceRange', externalInstancePropertyReader: (Uint64List instance) => instance.replaceRange),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (Uint64List instance) => instance.retainWhere, externalInstanceFunctionCaller: (Uint64List instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'reversed': VmProxy(identifier: 'reversed', externalInstancePropertyReader: (Uint64List instance) => instance.reversed),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Uint64List instance) => instance.runtimeType),
      'setAll': VmProxy(identifier: 'setAll', externalInstancePropertyReader: (Uint64List instance) => instance.setAll),
      'setRange': VmProxy(identifier: 'setRange', externalInstancePropertyReader: (Uint64List instance) => instance.setRange),
      'shuffle': VmProxy(identifier: 'shuffle', externalInstancePropertyReader: (Uint64List instance) => instance.shuffle),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (Uint64List instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (Uint64List instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (Uint64List instance) => instance.singleWhere, externalInstanceFunctionCaller: (Uint64List instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (Uint64List instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (Uint64List instance) => instance.skipWhile, externalInstanceFunctionCaller: (Uint64List instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'sort': VmProxy(identifier: 'sort', externalInstancePropertyReader: (Uint64List instance) => instance.sort, externalInstanceFunctionCaller: (Uint64List instance, [a0]) => instance.sort(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'sublist': VmProxy(identifier: 'sublist', externalInstancePropertyReader: (Uint64List instance) => instance.sublist),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (Uint64List instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (Uint64List instance) => instance.takeWhile, externalInstanceFunctionCaller: (Uint64List instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (Uint64List instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (Uint64List instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Uint64List instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (Uint64List instance) => instance.where, externalInstanceFunctionCaller: (Uint64List instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (Uint64List instance) => instance.whereType),
    },
  );

  ///class Uint8ClampedList
  static final classUint8ClampedList = VmClass<Uint8ClampedList>(
    identifier: 'Uint8ClampedList',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable', 'List', 'TypedData', '_TypedIntList'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Uint8ClampedList.new),
      'fromList': VmProxy(identifier: 'fromList', externalStaticPropertyReader: () => Uint8ClampedList.fromList),
      'sublistView': VmProxy(identifier: 'sublistView', externalStaticPropertyReader: () => Uint8ClampedList.sublistView),
      'view': VmProxy(identifier: 'view', externalStaticPropertyReader: () => Uint8ClampedList.view),
      'bytesPerElement': VmProxy(identifier: 'bytesPerElement', externalStaticPropertyReader: () => Uint8ClampedList.bytesPerElement),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.any, externalInstanceFunctionCaller: (Uint8ClampedList instance, a0) => instance.any((b0) => a0(b0))),
      'asMap': VmProxy(identifier: 'asMap', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.asMap),
      'buffer': VmProxy(identifier: 'buffer', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.buffer),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.elementAtOrNull),
      'elementSizeInBytes': VmProxy(identifier: 'elementSizeInBytes', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.elementSizeInBytes),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.every, externalInstanceFunctionCaller: (Uint8ClampedList instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.expand, externalInstanceFunctionCaller: (Uint8ClampedList instance, a0) => instance.expand((b0) => a0(b0))),
      'fillRange': VmProxy(identifier: 'fillRange', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.fillRange),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.first, externalInstancePropertyWriter: (Uint8ClampedList instance, value) => instance.first = value),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.firstWhere, externalInstanceFunctionCaller: (Uint8ClampedList instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.fold, externalInstanceFunctionCaller: (Uint8ClampedList instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.forEach, externalInstanceFunctionCaller: (Uint8ClampedList instance, a0) => instance.forEach((b0) => a0(b0))),
      'getRange': VmProxy(identifier: 'getRange', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.getRange),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.indexed),
      'indexOf': VmProxy(identifier: 'indexOf', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.indexOf),
      'indexWhere': VmProxy(identifier: 'indexWhere', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.indexWhere, externalInstanceFunctionCaller: (Uint8ClampedList instance, a0, [a1 = 0]) => instance.indexWhere((b0) => a0(b0), a1)),
      'insert': VmProxy(identifier: 'insert', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.insert),
      'insertAll': VmProxy(identifier: 'insertAll', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.insertAll),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.last, externalInstancePropertyWriter: (Uint8ClampedList instance, value) => instance.last = value),
      'lastIndexOf': VmProxy(identifier: 'lastIndexOf', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.lastIndexOf),
      'lastIndexWhere': VmProxy(identifier: 'lastIndexWhere', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.lastIndexWhere, externalInstanceFunctionCaller: (Uint8ClampedList instance, a0, [a1]) => instance.lastIndexWhere((b0) => a0(b0), a1)),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.lastWhere, externalInstanceFunctionCaller: (Uint8ClampedList instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.length, externalInstancePropertyWriter: (Uint8ClampedList instance, value) => instance.length = value),
      'lengthInBytes': VmProxy(identifier: 'lengthInBytes', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.lengthInBytes),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.map, externalInstanceFunctionCaller: (Uint8ClampedList instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.noSuchMethod),
      'offsetInBytes': VmProxy(identifier: 'offsetInBytes', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.offsetInBytes),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.reduce, externalInstanceFunctionCaller: (Uint8ClampedList instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.remove),
      'removeAt': VmProxy(identifier: 'removeAt', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.removeAt),
      'removeLast': VmProxy(identifier: 'removeLast', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.removeLast),
      'removeRange': VmProxy(identifier: 'removeRange', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.removeRange),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.removeWhere, externalInstanceFunctionCaller: (Uint8ClampedList instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'replaceRange': VmProxy(identifier: 'replaceRange', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.replaceRange),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.retainWhere, externalInstanceFunctionCaller: (Uint8ClampedList instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'reversed': VmProxy(identifier: 'reversed', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.reversed),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.runtimeType),
      'setAll': VmProxy(identifier: 'setAll', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.setAll),
      'setRange': VmProxy(identifier: 'setRange', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.setRange),
      'shuffle': VmProxy(identifier: 'shuffle', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.shuffle),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.singleWhere, externalInstanceFunctionCaller: (Uint8ClampedList instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.skipWhile, externalInstanceFunctionCaller: (Uint8ClampedList instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'sort': VmProxy(identifier: 'sort', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.sort, externalInstanceFunctionCaller: (Uint8ClampedList instance, [a0]) => instance.sort(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'sublist': VmProxy(identifier: 'sublist', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.sublist),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.takeWhile, externalInstanceFunctionCaller: (Uint8ClampedList instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.where, externalInstanceFunctionCaller: (Uint8ClampedList instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (Uint8ClampedList instance) => instance.whereType),
    },
  );

  ///class Uint8List
  static final classUint8List = VmClass<Uint8List>(
    identifier: 'Uint8List',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable', 'List', 'TypedData', '_TypedIntList'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Uint8List.new),
      'fromList': VmProxy(identifier: 'fromList', externalStaticPropertyReader: () => Uint8List.fromList),
      'sublistView': VmProxy(identifier: 'sublistView', externalStaticPropertyReader: () => Uint8List.sublistView),
      'view': VmProxy(identifier: 'view', externalStaticPropertyReader: () => Uint8List.view),
      'bytesPerElement': VmProxy(identifier: 'bytesPerElement', externalStaticPropertyReader: () => Uint8List.bytesPerElement),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (Uint8List instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (Uint8List instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (Uint8List instance) => instance.any, externalInstanceFunctionCaller: (Uint8List instance, a0) => instance.any((b0) => a0(b0))),
      'asMap': VmProxy(identifier: 'asMap', externalInstancePropertyReader: (Uint8List instance) => instance.asMap),
      'buffer': VmProxy(identifier: 'buffer', externalInstancePropertyReader: (Uint8List instance) => instance.buffer),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (Uint8List instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (Uint8List instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (Uint8List instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (Uint8List instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (Uint8List instance) => instance.elementAtOrNull),
      'elementSizeInBytes': VmProxy(identifier: 'elementSizeInBytes', externalInstancePropertyReader: (Uint8List instance) => instance.elementSizeInBytes),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (Uint8List instance) => instance.every, externalInstanceFunctionCaller: (Uint8List instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (Uint8List instance) => instance.expand, externalInstanceFunctionCaller: (Uint8List instance, a0) => instance.expand((b0) => a0(b0))),
      'fillRange': VmProxy(identifier: 'fillRange', externalInstancePropertyReader: (Uint8List instance) => instance.fillRange),
      'first': VmProxy(identifier: 'first', externalInstancePropertyWriter: (Uint8List instance, value) => instance.first = value, externalInstancePropertyReader: (Uint8List instance) => instance.first),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (Uint8List instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (Uint8List instance) => instance.firstWhere, externalInstanceFunctionCaller: (Uint8List instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (Uint8List instance) => instance.fold, externalInstanceFunctionCaller: (Uint8List instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (Uint8List instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (Uint8List instance) => instance.forEach, externalInstanceFunctionCaller: (Uint8List instance, a0) => instance.forEach((b0) => a0(b0))),
      'getRange': VmProxy(identifier: 'getRange', externalInstancePropertyReader: (Uint8List instance) => instance.getRange),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Uint8List instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (Uint8List instance) => instance.indexed),
      'indexOf': VmProxy(identifier: 'indexOf', externalInstancePropertyReader: (Uint8List instance) => instance.indexOf),
      'indexWhere': VmProxy(identifier: 'indexWhere', externalInstancePropertyReader: (Uint8List instance) => instance.indexWhere, externalInstanceFunctionCaller: (Uint8List instance, a0, [a1 = 0]) => instance.indexWhere((b0) => a0(b0), a1)),
      'insert': VmProxy(identifier: 'insert', externalInstancePropertyReader: (Uint8List instance) => instance.insert),
      'insertAll': VmProxy(identifier: 'insertAll', externalInstancePropertyReader: (Uint8List instance) => instance.insertAll),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (Uint8List instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (Uint8List instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (Uint8List instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (Uint8List instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (Uint8List instance) => instance.last, externalInstancePropertyWriter: (Uint8List instance, value) => instance.last = value),
      'lastIndexOf': VmProxy(identifier: 'lastIndexOf', externalInstancePropertyReader: (Uint8List instance) => instance.lastIndexOf),
      'lastIndexWhere': VmProxy(identifier: 'lastIndexWhere', externalInstancePropertyReader: (Uint8List instance) => instance.lastIndexWhere, externalInstanceFunctionCaller: (Uint8List instance, a0, [a1]) => instance.lastIndexWhere((b0) => a0(b0), a1)),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (Uint8List instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (Uint8List instance) => instance.lastWhere, externalInstanceFunctionCaller: (Uint8List instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (Uint8List instance) => instance.length, externalInstancePropertyWriter: (Uint8List instance, value) => instance.length = value),
      'lengthInBytes': VmProxy(identifier: 'lengthInBytes', externalInstancePropertyReader: (Uint8List instance) => instance.lengthInBytes),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (Uint8List instance) => instance.map, externalInstanceFunctionCaller: (Uint8List instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (Uint8List instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Uint8List instance) => instance.noSuchMethod),
      'offsetInBytes': VmProxy(identifier: 'offsetInBytes', externalInstancePropertyReader: (Uint8List instance) => instance.offsetInBytes),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (Uint8List instance) => instance.reduce, externalInstanceFunctionCaller: (Uint8List instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (Uint8List instance) => instance.remove),
      'removeAt': VmProxy(identifier: 'removeAt', externalInstancePropertyReader: (Uint8List instance) => instance.removeAt),
      'removeLast': VmProxy(identifier: 'removeLast', externalInstancePropertyReader: (Uint8List instance) => instance.removeLast),
      'removeRange': VmProxy(identifier: 'removeRange', externalInstancePropertyReader: (Uint8List instance) => instance.removeRange),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (Uint8List instance) => instance.removeWhere, externalInstanceFunctionCaller: (Uint8List instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'replaceRange': VmProxy(identifier: 'replaceRange', externalInstancePropertyReader: (Uint8List instance) => instance.replaceRange),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (Uint8List instance) => instance.retainWhere, externalInstanceFunctionCaller: (Uint8List instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'reversed': VmProxy(identifier: 'reversed', externalInstancePropertyReader: (Uint8List instance) => instance.reversed),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Uint8List instance) => instance.runtimeType),
      'setAll': VmProxy(identifier: 'setAll', externalInstancePropertyReader: (Uint8List instance) => instance.setAll),
      'setRange': VmProxy(identifier: 'setRange', externalInstancePropertyReader: (Uint8List instance) => instance.setRange),
      'shuffle': VmProxy(identifier: 'shuffle', externalInstancePropertyReader: (Uint8List instance) => instance.shuffle),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (Uint8List instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (Uint8List instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (Uint8List instance) => instance.singleWhere, externalInstanceFunctionCaller: (Uint8List instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (Uint8List instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (Uint8List instance) => instance.skipWhile, externalInstanceFunctionCaller: (Uint8List instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'sort': VmProxy(identifier: 'sort', externalInstancePropertyReader: (Uint8List instance) => instance.sort, externalInstanceFunctionCaller: (Uint8List instance, [a0]) => instance.sort(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'sublist': VmProxy(identifier: 'sublist', externalInstancePropertyReader: (Uint8List instance) => instance.sublist),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (Uint8List instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (Uint8List instance) => instance.takeWhile, externalInstanceFunctionCaller: (Uint8List instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (Uint8List instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (Uint8List instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Uint8List instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (Uint8List instance) => instance.where, externalInstanceFunctionCaller: (Uint8List instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (Uint8List instance) => instance.whereType),
    },
  );

  ///class UnimplementedError
  static final classUnimplementedError = VmClass<UnimplementedError>(
    identifier: 'UnimplementedError',
    superclassNames: ['Object', 'Error', 'UnsupportedError'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => UnimplementedError.new),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (UnimplementedError instance) => instance.hashCode),
      'message': VmProxy(identifier: 'message', externalInstancePropertyReader: (UnimplementedError instance) => instance.message),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (UnimplementedError instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (UnimplementedError instance) => instance.runtimeType),
      'stackTrace': VmProxy(identifier: 'stackTrace', externalInstancePropertyReader: (UnimplementedError instance) => instance.stackTrace),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (UnimplementedError instance) => instance.toString),
    },
  );

  ///class UnmodifiableByteBufferView
  static final classUnmodifiableByteBufferView = VmClass<UnmodifiableByteBufferView>(
    identifier: 'UnmodifiableByteBufferView',
    superclassNames: ['Object', 'ByteBuffer'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => UnmodifiableByteBufferView.new),
      'asByteData': VmProxy(identifier: 'asByteData', externalInstancePropertyReader: (UnmodifiableByteBufferView instance) => instance.asByteData),
      'asFloat32List': VmProxy(identifier: 'asFloat32List', externalInstancePropertyReader: (UnmodifiableByteBufferView instance) => instance.asFloat32List),
      'asFloat32x4List': VmProxy(identifier: 'asFloat32x4List', externalInstancePropertyReader: (UnmodifiableByteBufferView instance) => instance.asFloat32x4List),
      'asFloat64List': VmProxy(identifier: 'asFloat64List', externalInstancePropertyReader: (UnmodifiableByteBufferView instance) => instance.asFloat64List),
      'asFloat64x2List': VmProxy(identifier: 'asFloat64x2List', externalInstancePropertyReader: (UnmodifiableByteBufferView instance) => instance.asFloat64x2List),
      'asInt16List': VmProxy(identifier: 'asInt16List', externalInstancePropertyReader: (UnmodifiableByteBufferView instance) => instance.asInt16List),
      'asInt32List': VmProxy(identifier: 'asInt32List', externalInstancePropertyReader: (UnmodifiableByteBufferView instance) => instance.asInt32List),
      'asInt32x4List': VmProxy(identifier: 'asInt32x4List', externalInstancePropertyReader: (UnmodifiableByteBufferView instance) => instance.asInt32x4List),
      'asInt64List': VmProxy(identifier: 'asInt64List', externalInstancePropertyReader: (UnmodifiableByteBufferView instance) => instance.asInt64List),
      'asInt8List': VmProxy(identifier: 'asInt8List', externalInstancePropertyReader: (UnmodifiableByteBufferView instance) => instance.asInt8List),
      'asUint16List': VmProxy(identifier: 'asUint16List', externalInstancePropertyReader: (UnmodifiableByteBufferView instance) => instance.asUint16List),
      'asUint32List': VmProxy(identifier: 'asUint32List', externalInstancePropertyReader: (UnmodifiableByteBufferView instance) => instance.asUint32List),
      'asUint64List': VmProxy(identifier: 'asUint64List', externalInstancePropertyReader: (UnmodifiableByteBufferView instance) => instance.asUint64List),
      'asUint8ClampedList': VmProxy(identifier: 'asUint8ClampedList', externalInstancePropertyReader: (UnmodifiableByteBufferView instance) => instance.asUint8ClampedList),
      'asUint8List': VmProxy(identifier: 'asUint8List', externalInstancePropertyReader: (UnmodifiableByteBufferView instance) => instance.asUint8List),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (UnmodifiableByteBufferView instance) => instance.hashCode),
      'lengthInBytes': VmProxy(identifier: 'lengthInBytes', externalInstancePropertyReader: (UnmodifiableByteBufferView instance) => instance.lengthInBytes),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (UnmodifiableByteBufferView instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (UnmodifiableByteBufferView instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (UnmodifiableByteBufferView instance) => instance.toString),
    },
  );

  ///class UnmodifiableByteDataView
  static final classUnmodifiableByteDataView = VmClass<UnmodifiableByteDataView>(
    identifier: 'UnmodifiableByteDataView',
    superclassNames: ['Object', 'TypedData', 'ByteData'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => UnmodifiableByteDataView.new),
      'buffer': VmProxy(identifier: 'buffer', externalInstancePropertyReader: (UnmodifiableByteDataView instance) => instance.buffer),
      'elementSizeInBytes': VmProxy(identifier: 'elementSizeInBytes', externalInstancePropertyReader: (UnmodifiableByteDataView instance) => instance.elementSizeInBytes),
      'getFloat32': VmProxy(identifier: 'getFloat32', externalInstancePropertyReader: (UnmodifiableByteDataView instance) => instance.getFloat32),
      'getFloat64': VmProxy(identifier: 'getFloat64', externalInstancePropertyReader: (UnmodifiableByteDataView instance) => instance.getFloat64),
      'getInt16': VmProxy(identifier: 'getInt16', externalInstancePropertyReader: (UnmodifiableByteDataView instance) => instance.getInt16),
      'getInt32': VmProxy(identifier: 'getInt32', externalInstancePropertyReader: (UnmodifiableByteDataView instance) => instance.getInt32),
      'getInt64': VmProxy(identifier: 'getInt64', externalInstancePropertyReader: (UnmodifiableByteDataView instance) => instance.getInt64),
      'getInt8': VmProxy(identifier: 'getInt8', externalInstancePropertyReader: (UnmodifiableByteDataView instance) => instance.getInt8),
      'getUint16': VmProxy(identifier: 'getUint16', externalInstancePropertyReader: (UnmodifiableByteDataView instance) => instance.getUint16),
      'getUint32': VmProxy(identifier: 'getUint32', externalInstancePropertyReader: (UnmodifiableByteDataView instance) => instance.getUint32),
      'getUint64': VmProxy(identifier: 'getUint64', externalInstancePropertyReader: (UnmodifiableByteDataView instance) => instance.getUint64),
      'getUint8': VmProxy(identifier: 'getUint8', externalInstancePropertyReader: (UnmodifiableByteDataView instance) => instance.getUint8),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (UnmodifiableByteDataView instance) => instance.hashCode),
      'lengthInBytes': VmProxy(identifier: 'lengthInBytes', externalInstancePropertyReader: (UnmodifiableByteDataView instance) => instance.lengthInBytes),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (UnmodifiableByteDataView instance) => instance.noSuchMethod),
      'offsetInBytes': VmProxy(identifier: 'offsetInBytes', externalInstancePropertyReader: (UnmodifiableByteDataView instance) => instance.offsetInBytes),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (UnmodifiableByteDataView instance) => instance.runtimeType),
      'setFloat32': VmProxy(identifier: 'setFloat32', externalInstancePropertyReader: (UnmodifiableByteDataView instance) => instance.setFloat32),
      'setFloat64': VmProxy(identifier: 'setFloat64', externalInstancePropertyReader: (UnmodifiableByteDataView instance) => instance.setFloat64),
      'setInt16': VmProxy(identifier: 'setInt16', externalInstancePropertyReader: (UnmodifiableByteDataView instance) => instance.setInt16),
      'setInt32': VmProxy(identifier: 'setInt32', externalInstancePropertyReader: (UnmodifiableByteDataView instance) => instance.setInt32),
      'setInt64': VmProxy(identifier: 'setInt64', externalInstancePropertyReader: (UnmodifiableByteDataView instance) => instance.setInt64),
      'setInt8': VmProxy(identifier: 'setInt8', externalInstancePropertyReader: (UnmodifiableByteDataView instance) => instance.setInt8),
      'setUint16': VmProxy(identifier: 'setUint16', externalInstancePropertyReader: (UnmodifiableByteDataView instance) => instance.setUint16),
      'setUint32': VmProxy(identifier: 'setUint32', externalInstancePropertyReader: (UnmodifiableByteDataView instance) => instance.setUint32),
      'setUint64': VmProxy(identifier: 'setUint64', externalInstancePropertyReader: (UnmodifiableByteDataView instance) => instance.setUint64),
      'setUint8': VmProxy(identifier: 'setUint8', externalInstancePropertyReader: (UnmodifiableByteDataView instance) => instance.setUint8),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (UnmodifiableByteDataView instance) => instance.toString),
    },
  );

  ///class UnmodifiableFloat32ListView
  static final classUnmodifiableFloat32ListView = VmClass<UnmodifiableFloat32ListView>(
    identifier: 'UnmodifiableFloat32ListView',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable', 'List', 'TypedData', '_TypedFloatList', 'Float32List'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => UnmodifiableFloat32ListView.new),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.any, externalInstanceFunctionCaller: (UnmodifiableFloat32ListView instance, a0) => instance.any((b0) => a0(b0))),
      'asMap': VmProxy(identifier: 'asMap', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.asMap),
      'buffer': VmProxy(identifier: 'buffer', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.buffer),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.elementAtOrNull),
      'elementSizeInBytes': VmProxy(identifier: 'elementSizeInBytes', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.elementSizeInBytes),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.every, externalInstanceFunctionCaller: (UnmodifiableFloat32ListView instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.expand, externalInstanceFunctionCaller: (UnmodifiableFloat32ListView instance, a0) => instance.expand((b0) => a0(b0))),
      'fillRange': VmProxy(identifier: 'fillRange', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.fillRange),
      'first': VmProxy(identifier: 'first', externalInstancePropertyWriter: (UnmodifiableFloat32ListView instance, value) => instance.first = value, externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.first),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.firstWhere, externalInstanceFunctionCaller: (UnmodifiableFloat32ListView instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.fold, externalInstanceFunctionCaller: (UnmodifiableFloat32ListView instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.forEach, externalInstanceFunctionCaller: (UnmodifiableFloat32ListView instance, a0) => instance.forEach((b0) => a0(b0))),
      'getRange': VmProxy(identifier: 'getRange', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.getRange),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.indexed),
      'indexOf': VmProxy(identifier: 'indexOf', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.indexOf),
      'indexWhere': VmProxy(identifier: 'indexWhere', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.indexWhere, externalInstanceFunctionCaller: (UnmodifiableFloat32ListView instance, a0, [a1 = 0]) => instance.indexWhere((b0) => a0(b0), a1)),
      'insert': VmProxy(identifier: 'insert', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.insert),
      'insertAll': VmProxy(identifier: 'insertAll', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.insertAll),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyWriter: (UnmodifiableFloat32ListView instance, value) => instance.last = value, externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.last),
      'lastIndexOf': VmProxy(identifier: 'lastIndexOf', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.lastIndexOf),
      'lastIndexWhere': VmProxy(identifier: 'lastIndexWhere', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.lastIndexWhere, externalInstanceFunctionCaller: (UnmodifiableFloat32ListView instance, a0, [a1]) => instance.lastIndexWhere((b0) => a0(b0), a1)),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.lastWhere, externalInstanceFunctionCaller: (UnmodifiableFloat32ListView instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.length, externalInstancePropertyWriter: (UnmodifiableFloat32ListView instance, value) => instance.length = value),
      'lengthInBytes': VmProxy(identifier: 'lengthInBytes', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.lengthInBytes),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.map, externalInstanceFunctionCaller: (UnmodifiableFloat32ListView instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.noSuchMethod),
      'offsetInBytes': VmProxy(identifier: 'offsetInBytes', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.offsetInBytes),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.reduce, externalInstanceFunctionCaller: (UnmodifiableFloat32ListView instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.remove),
      'removeAt': VmProxy(identifier: 'removeAt', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.removeAt),
      'removeLast': VmProxy(identifier: 'removeLast', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.removeLast),
      'removeRange': VmProxy(identifier: 'removeRange', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.removeRange),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.removeWhere, externalInstanceFunctionCaller: (UnmodifiableFloat32ListView instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'replaceRange': VmProxy(identifier: 'replaceRange', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.replaceRange),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.retainWhere, externalInstanceFunctionCaller: (UnmodifiableFloat32ListView instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'reversed': VmProxy(identifier: 'reversed', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.reversed),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.runtimeType),
      'setAll': VmProxy(identifier: 'setAll', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.setAll),
      'setRange': VmProxy(identifier: 'setRange', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.setRange),
      'shuffle': VmProxy(identifier: 'shuffle', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.shuffle),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.singleWhere, externalInstanceFunctionCaller: (UnmodifiableFloat32ListView instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.skipWhile, externalInstanceFunctionCaller: (UnmodifiableFloat32ListView instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'sort': VmProxy(identifier: 'sort', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.sort, externalInstanceFunctionCaller: (UnmodifiableFloat32ListView instance, [a0]) => instance.sort(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'sublist': VmProxy(identifier: 'sublist', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.sublist),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.takeWhile, externalInstanceFunctionCaller: (UnmodifiableFloat32ListView instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.where, externalInstanceFunctionCaller: (UnmodifiableFloat32ListView instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (UnmodifiableFloat32ListView instance) => instance.whereType),
    },
  );

  ///class UnmodifiableFloat32x4ListView
  static final classUnmodifiableFloat32x4ListView = VmClass<UnmodifiableFloat32x4ListView>(
    identifier: 'UnmodifiableFloat32x4ListView',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable', 'List', 'TypedData', 'Float32x4List'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => UnmodifiableFloat32x4ListView.new),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.any, externalInstanceFunctionCaller: (UnmodifiableFloat32x4ListView instance, a0) => instance.any((b0) => a0(b0))),
      'asMap': VmProxy(identifier: 'asMap', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.asMap),
      'buffer': VmProxy(identifier: 'buffer', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.buffer),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.elementAtOrNull),
      'elementSizeInBytes': VmProxy(identifier: 'elementSizeInBytes', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.elementSizeInBytes),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.every, externalInstanceFunctionCaller: (UnmodifiableFloat32x4ListView instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.expand, externalInstanceFunctionCaller: (UnmodifiableFloat32x4ListView instance, a0) => instance.expand((b0) => a0(b0))),
      'fillRange': VmProxy(identifier: 'fillRange', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.fillRange),
      'first': VmProxy(identifier: 'first', externalInstancePropertyWriter: (UnmodifiableFloat32x4ListView instance, value) => instance.first = value, externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.first),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.firstWhere, externalInstanceFunctionCaller: (UnmodifiableFloat32x4ListView instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.fold, externalInstanceFunctionCaller: (UnmodifiableFloat32x4ListView instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.forEach, externalInstanceFunctionCaller: (UnmodifiableFloat32x4ListView instance, a0) => instance.forEach((b0) => a0(b0))),
      'getRange': VmProxy(identifier: 'getRange', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.getRange),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.indexed),
      'indexOf': VmProxy(identifier: 'indexOf', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.indexOf),
      'indexWhere': VmProxy(identifier: 'indexWhere', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.indexWhere, externalInstanceFunctionCaller: (UnmodifiableFloat32x4ListView instance, a0, [a1 = 0]) => instance.indexWhere((b0) => a0(b0), a1)),
      'insert': VmProxy(identifier: 'insert', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.insert),
      'insertAll': VmProxy(identifier: 'insertAll', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.insertAll),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.last, externalInstancePropertyWriter: (UnmodifiableFloat32x4ListView instance, value) => instance.last = value),
      'lastIndexOf': VmProxy(identifier: 'lastIndexOf', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.lastIndexOf),
      'lastIndexWhere': VmProxy(identifier: 'lastIndexWhere', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.lastIndexWhere, externalInstanceFunctionCaller: (UnmodifiableFloat32x4ListView instance, a0, [a1]) => instance.lastIndexWhere((b0) => a0(b0), a1)),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.lastWhere, externalInstanceFunctionCaller: (UnmodifiableFloat32x4ListView instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.length, externalInstancePropertyWriter: (UnmodifiableFloat32x4ListView instance, value) => instance.length = value),
      'lengthInBytes': VmProxy(identifier: 'lengthInBytes', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.lengthInBytes),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.map, externalInstanceFunctionCaller: (UnmodifiableFloat32x4ListView instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.noSuchMethod),
      'offsetInBytes': VmProxy(identifier: 'offsetInBytes', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.offsetInBytes),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.reduce, externalInstanceFunctionCaller: (UnmodifiableFloat32x4ListView instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.remove),
      'removeAt': VmProxy(identifier: 'removeAt', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.removeAt),
      'removeLast': VmProxy(identifier: 'removeLast', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.removeLast),
      'removeRange': VmProxy(identifier: 'removeRange', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.removeRange),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.removeWhere, externalInstanceFunctionCaller: (UnmodifiableFloat32x4ListView instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'replaceRange': VmProxy(identifier: 'replaceRange', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.replaceRange),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.retainWhere, externalInstanceFunctionCaller: (UnmodifiableFloat32x4ListView instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'reversed': VmProxy(identifier: 'reversed', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.reversed),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.runtimeType),
      'setAll': VmProxy(identifier: 'setAll', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.setAll),
      'setRange': VmProxy(identifier: 'setRange', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.setRange),
      'shuffle': VmProxy(identifier: 'shuffle', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.shuffle),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.singleWhere, externalInstanceFunctionCaller: (UnmodifiableFloat32x4ListView instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.skipWhile, externalInstanceFunctionCaller: (UnmodifiableFloat32x4ListView instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'sort': VmProxy(identifier: 'sort', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.sort, externalInstanceFunctionCaller: (UnmodifiableFloat32x4ListView instance, [a0]) => instance.sort(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'sublist': VmProxy(identifier: 'sublist', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.sublist),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.takeWhile, externalInstanceFunctionCaller: (UnmodifiableFloat32x4ListView instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.where, externalInstanceFunctionCaller: (UnmodifiableFloat32x4ListView instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (UnmodifiableFloat32x4ListView instance) => instance.whereType),
    },
  );

  ///class UnmodifiableFloat64ListView
  static final classUnmodifiableFloat64ListView = VmClass<UnmodifiableFloat64ListView>(
    identifier: 'UnmodifiableFloat64ListView',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable', 'List', 'TypedData', '_TypedFloatList', 'Float64List'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => UnmodifiableFloat64ListView.new),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.any, externalInstanceFunctionCaller: (UnmodifiableFloat64ListView instance, a0) => instance.any((b0) => a0(b0))),
      'asMap': VmProxy(identifier: 'asMap', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.asMap),
      'buffer': VmProxy(identifier: 'buffer', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.buffer),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.elementAtOrNull),
      'elementSizeInBytes': VmProxy(identifier: 'elementSizeInBytes', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.elementSizeInBytes),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.every, externalInstanceFunctionCaller: (UnmodifiableFloat64ListView instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.expand, externalInstanceFunctionCaller: (UnmodifiableFloat64ListView instance, a0) => instance.expand((b0) => a0(b0))),
      'fillRange': VmProxy(identifier: 'fillRange', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.fillRange),
      'first': VmProxy(identifier: 'first', externalInstancePropertyWriter: (UnmodifiableFloat64ListView instance, value) => instance.first = value, externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.first),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.firstWhere, externalInstanceFunctionCaller: (UnmodifiableFloat64ListView instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.fold, externalInstanceFunctionCaller: (UnmodifiableFloat64ListView instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.forEach, externalInstanceFunctionCaller: (UnmodifiableFloat64ListView instance, a0) => instance.forEach((b0) => a0(b0))),
      'getRange': VmProxy(identifier: 'getRange', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.getRange),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.indexed),
      'indexOf': VmProxy(identifier: 'indexOf', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.indexOf),
      'indexWhere': VmProxy(identifier: 'indexWhere', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.indexWhere, externalInstanceFunctionCaller: (UnmodifiableFloat64ListView instance, a0, [a1 = 0]) => instance.indexWhere((b0) => a0(b0), a1)),
      'insert': VmProxy(identifier: 'insert', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.insert),
      'insertAll': VmProxy(identifier: 'insertAll', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.insertAll),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyWriter: (UnmodifiableFloat64ListView instance, value) => instance.last = value, externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.last),
      'lastIndexOf': VmProxy(identifier: 'lastIndexOf', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.lastIndexOf),
      'lastIndexWhere': VmProxy(identifier: 'lastIndexWhere', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.lastIndexWhere, externalInstanceFunctionCaller: (UnmodifiableFloat64ListView instance, a0, [a1]) => instance.lastIndexWhere((b0) => a0(b0), a1)),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.lastWhere, externalInstanceFunctionCaller: (UnmodifiableFloat64ListView instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.length, externalInstancePropertyWriter: (UnmodifiableFloat64ListView instance, value) => instance.length = value),
      'lengthInBytes': VmProxy(identifier: 'lengthInBytes', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.lengthInBytes),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.map, externalInstanceFunctionCaller: (UnmodifiableFloat64ListView instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.noSuchMethod),
      'offsetInBytes': VmProxy(identifier: 'offsetInBytes', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.offsetInBytes),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.reduce, externalInstanceFunctionCaller: (UnmodifiableFloat64ListView instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.remove),
      'removeAt': VmProxy(identifier: 'removeAt', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.removeAt),
      'removeLast': VmProxy(identifier: 'removeLast', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.removeLast),
      'removeRange': VmProxy(identifier: 'removeRange', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.removeRange),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.removeWhere, externalInstanceFunctionCaller: (UnmodifiableFloat64ListView instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'replaceRange': VmProxy(identifier: 'replaceRange', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.replaceRange),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.retainWhere, externalInstanceFunctionCaller: (UnmodifiableFloat64ListView instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'reversed': VmProxy(identifier: 'reversed', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.reversed),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.runtimeType),
      'setAll': VmProxy(identifier: 'setAll', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.setAll),
      'setRange': VmProxy(identifier: 'setRange', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.setRange),
      'shuffle': VmProxy(identifier: 'shuffle', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.shuffle),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.singleWhere, externalInstanceFunctionCaller: (UnmodifiableFloat64ListView instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.skipWhile, externalInstanceFunctionCaller: (UnmodifiableFloat64ListView instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'sort': VmProxy(identifier: 'sort', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.sort, externalInstanceFunctionCaller: (UnmodifiableFloat64ListView instance, [a0]) => instance.sort(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'sublist': VmProxy(identifier: 'sublist', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.sublist),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.takeWhile, externalInstanceFunctionCaller: (UnmodifiableFloat64ListView instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.where, externalInstanceFunctionCaller: (UnmodifiableFloat64ListView instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (UnmodifiableFloat64ListView instance) => instance.whereType),
    },
  );

  ///class UnmodifiableFloat64x2ListView
  static final classUnmodifiableFloat64x2ListView = VmClass<UnmodifiableFloat64x2ListView>(
    identifier: 'UnmodifiableFloat64x2ListView',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable', 'List', 'TypedData', 'Float64x2List'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => UnmodifiableFloat64x2ListView.new),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.any, externalInstanceFunctionCaller: (UnmodifiableFloat64x2ListView instance, a0) => instance.any((b0) => a0(b0))),
      'asMap': VmProxy(identifier: 'asMap', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.asMap),
      'buffer': VmProxy(identifier: 'buffer', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.buffer),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.elementAtOrNull),
      'elementSizeInBytes': VmProxy(identifier: 'elementSizeInBytes', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.elementSizeInBytes),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.every, externalInstanceFunctionCaller: (UnmodifiableFloat64x2ListView instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.expand, externalInstanceFunctionCaller: (UnmodifiableFloat64x2ListView instance, a0) => instance.expand((b0) => a0(b0))),
      'fillRange': VmProxy(identifier: 'fillRange', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.fillRange),
      'first': VmProxy(identifier: 'first', externalInstancePropertyWriter: (UnmodifiableFloat64x2ListView instance, value) => instance.first = value, externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.first),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.firstWhere, externalInstanceFunctionCaller: (UnmodifiableFloat64x2ListView instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.fold, externalInstanceFunctionCaller: (UnmodifiableFloat64x2ListView instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.forEach, externalInstanceFunctionCaller: (UnmodifiableFloat64x2ListView instance, a0) => instance.forEach((b0) => a0(b0))),
      'getRange': VmProxy(identifier: 'getRange', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.getRange),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.indexed),
      'indexOf': VmProxy(identifier: 'indexOf', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.indexOf),
      'indexWhere': VmProxy(identifier: 'indexWhere', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.indexWhere, externalInstanceFunctionCaller: (UnmodifiableFloat64x2ListView instance, a0, [a1 = 0]) => instance.indexWhere((b0) => a0(b0), a1)),
      'insert': VmProxy(identifier: 'insert', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.insert),
      'insertAll': VmProxy(identifier: 'insertAll', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.insertAll),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.last, externalInstancePropertyWriter: (UnmodifiableFloat64x2ListView instance, value) => instance.last = value),
      'lastIndexOf': VmProxy(identifier: 'lastIndexOf', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.lastIndexOf),
      'lastIndexWhere': VmProxy(identifier: 'lastIndexWhere', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.lastIndexWhere, externalInstanceFunctionCaller: (UnmodifiableFloat64x2ListView instance, a0, [a1]) => instance.lastIndexWhere((b0) => a0(b0), a1)),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.lastWhere, externalInstanceFunctionCaller: (UnmodifiableFloat64x2ListView instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.length, externalInstancePropertyWriter: (UnmodifiableFloat64x2ListView instance, value) => instance.length = value),
      'lengthInBytes': VmProxy(identifier: 'lengthInBytes', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.lengthInBytes),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.map, externalInstanceFunctionCaller: (UnmodifiableFloat64x2ListView instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.noSuchMethod),
      'offsetInBytes': VmProxy(identifier: 'offsetInBytes', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.offsetInBytes),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.reduce, externalInstanceFunctionCaller: (UnmodifiableFloat64x2ListView instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.remove),
      'removeAt': VmProxy(identifier: 'removeAt', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.removeAt),
      'removeLast': VmProxy(identifier: 'removeLast', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.removeLast),
      'removeRange': VmProxy(identifier: 'removeRange', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.removeRange),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.removeWhere, externalInstanceFunctionCaller: (UnmodifiableFloat64x2ListView instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'replaceRange': VmProxy(identifier: 'replaceRange', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.replaceRange),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.retainWhere, externalInstanceFunctionCaller: (UnmodifiableFloat64x2ListView instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'reversed': VmProxy(identifier: 'reversed', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.reversed),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.runtimeType),
      'setAll': VmProxy(identifier: 'setAll', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.setAll),
      'setRange': VmProxy(identifier: 'setRange', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.setRange),
      'shuffle': VmProxy(identifier: 'shuffle', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.shuffle),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.singleWhere, externalInstanceFunctionCaller: (UnmodifiableFloat64x2ListView instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.skipWhile, externalInstanceFunctionCaller: (UnmodifiableFloat64x2ListView instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'sort': VmProxy(identifier: 'sort', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.sort, externalInstanceFunctionCaller: (UnmodifiableFloat64x2ListView instance, [a0]) => instance.sort(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'sublist': VmProxy(identifier: 'sublist', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.sublist),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.takeWhile, externalInstanceFunctionCaller: (UnmodifiableFloat64x2ListView instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.where, externalInstanceFunctionCaller: (UnmodifiableFloat64x2ListView instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (UnmodifiableFloat64x2ListView instance) => instance.whereType),
    },
  );

  ///class UnmodifiableInt16ListView
  static final classUnmodifiableInt16ListView = VmClass<UnmodifiableInt16ListView>(
    identifier: 'UnmodifiableInt16ListView',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable', 'List', 'TypedData', '_TypedIntList', 'Int16List'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => UnmodifiableInt16ListView.new),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.any, externalInstanceFunctionCaller: (UnmodifiableInt16ListView instance, a0) => instance.any((b0) => a0(b0))),
      'asMap': VmProxy(identifier: 'asMap', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.asMap),
      'buffer': VmProxy(identifier: 'buffer', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.buffer),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.elementAtOrNull),
      'elementSizeInBytes': VmProxy(identifier: 'elementSizeInBytes', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.elementSizeInBytes),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.every, externalInstanceFunctionCaller: (UnmodifiableInt16ListView instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.expand, externalInstanceFunctionCaller: (UnmodifiableInt16ListView instance, a0) => instance.expand((b0) => a0(b0))),
      'fillRange': VmProxy(identifier: 'fillRange', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.fillRange),
      'first': VmProxy(identifier: 'first', externalInstancePropertyWriter: (UnmodifiableInt16ListView instance, value) => instance.first = value, externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.first),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.firstWhere, externalInstanceFunctionCaller: (UnmodifiableInt16ListView instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.fold, externalInstanceFunctionCaller: (UnmodifiableInt16ListView instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.forEach, externalInstanceFunctionCaller: (UnmodifiableInt16ListView instance, a0) => instance.forEach((b0) => a0(b0))),
      'getRange': VmProxy(identifier: 'getRange', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.getRange),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.indexed),
      'indexOf': VmProxy(identifier: 'indexOf', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.indexOf),
      'indexWhere': VmProxy(identifier: 'indexWhere', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.indexWhere, externalInstanceFunctionCaller: (UnmodifiableInt16ListView instance, a0, [a1 = 0]) => instance.indexWhere((b0) => a0(b0), a1)),
      'insert': VmProxy(identifier: 'insert', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.insert),
      'insertAll': VmProxy(identifier: 'insertAll', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.insertAll),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyWriter: (UnmodifiableInt16ListView instance, value) => instance.last = value, externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.last),
      'lastIndexOf': VmProxy(identifier: 'lastIndexOf', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.lastIndexOf),
      'lastIndexWhere': VmProxy(identifier: 'lastIndexWhere', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.lastIndexWhere, externalInstanceFunctionCaller: (UnmodifiableInt16ListView instance, a0, [a1]) => instance.lastIndexWhere((b0) => a0(b0), a1)),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.lastWhere, externalInstanceFunctionCaller: (UnmodifiableInt16ListView instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.length, externalInstancePropertyWriter: (UnmodifiableInt16ListView instance, value) => instance.length = value),
      'lengthInBytes': VmProxy(identifier: 'lengthInBytes', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.lengthInBytes),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.map, externalInstanceFunctionCaller: (UnmodifiableInt16ListView instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.noSuchMethod),
      'offsetInBytes': VmProxy(identifier: 'offsetInBytes', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.offsetInBytes),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.reduce, externalInstanceFunctionCaller: (UnmodifiableInt16ListView instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.remove),
      'removeAt': VmProxy(identifier: 'removeAt', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.removeAt),
      'removeLast': VmProxy(identifier: 'removeLast', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.removeLast),
      'removeRange': VmProxy(identifier: 'removeRange', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.removeRange),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.removeWhere, externalInstanceFunctionCaller: (UnmodifiableInt16ListView instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'replaceRange': VmProxy(identifier: 'replaceRange', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.replaceRange),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.retainWhere, externalInstanceFunctionCaller: (UnmodifiableInt16ListView instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'reversed': VmProxy(identifier: 'reversed', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.reversed),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.runtimeType),
      'setAll': VmProxy(identifier: 'setAll', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.setAll),
      'setRange': VmProxy(identifier: 'setRange', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.setRange),
      'shuffle': VmProxy(identifier: 'shuffle', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.shuffle),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.singleWhere, externalInstanceFunctionCaller: (UnmodifiableInt16ListView instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.skipWhile, externalInstanceFunctionCaller: (UnmodifiableInt16ListView instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'sort': VmProxy(identifier: 'sort', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.sort, externalInstanceFunctionCaller: (UnmodifiableInt16ListView instance, [a0]) => instance.sort(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'sublist': VmProxy(identifier: 'sublist', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.sublist),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.takeWhile, externalInstanceFunctionCaller: (UnmodifiableInt16ListView instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.where, externalInstanceFunctionCaller: (UnmodifiableInt16ListView instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (UnmodifiableInt16ListView instance) => instance.whereType),
    },
  );

  ///class UnmodifiableInt32ListView
  static final classUnmodifiableInt32ListView = VmClass<UnmodifiableInt32ListView>(
    identifier: 'UnmodifiableInt32ListView',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable', 'List', 'TypedData', '_TypedIntList', 'Int32List'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => UnmodifiableInt32ListView.new),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.any, externalInstanceFunctionCaller: (UnmodifiableInt32ListView instance, a0) => instance.any((b0) => a0(b0))),
      'asMap': VmProxy(identifier: 'asMap', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.asMap),
      'buffer': VmProxy(identifier: 'buffer', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.buffer),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.elementAtOrNull),
      'elementSizeInBytes': VmProxy(identifier: 'elementSizeInBytes', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.elementSizeInBytes),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.every, externalInstanceFunctionCaller: (UnmodifiableInt32ListView instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.expand, externalInstanceFunctionCaller: (UnmodifiableInt32ListView instance, a0) => instance.expand((b0) => a0(b0))),
      'fillRange': VmProxy(identifier: 'fillRange', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.fillRange),
      'first': VmProxy(identifier: 'first', externalInstancePropertyWriter: (UnmodifiableInt32ListView instance, value) => instance.first = value, externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.first),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.firstWhere, externalInstanceFunctionCaller: (UnmodifiableInt32ListView instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.fold, externalInstanceFunctionCaller: (UnmodifiableInt32ListView instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.forEach, externalInstanceFunctionCaller: (UnmodifiableInt32ListView instance, a0) => instance.forEach((b0) => a0(b0))),
      'getRange': VmProxy(identifier: 'getRange', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.getRange),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.indexed),
      'indexOf': VmProxy(identifier: 'indexOf', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.indexOf),
      'indexWhere': VmProxy(identifier: 'indexWhere', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.indexWhere, externalInstanceFunctionCaller: (UnmodifiableInt32ListView instance, a0, [a1 = 0]) => instance.indexWhere((b0) => a0(b0), a1)),
      'insert': VmProxy(identifier: 'insert', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.insert),
      'insertAll': VmProxy(identifier: 'insertAll', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.insertAll),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyWriter: (UnmodifiableInt32ListView instance, value) => instance.last = value, externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.last),
      'lastIndexOf': VmProxy(identifier: 'lastIndexOf', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.lastIndexOf),
      'lastIndexWhere': VmProxy(identifier: 'lastIndexWhere', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.lastIndexWhere, externalInstanceFunctionCaller: (UnmodifiableInt32ListView instance, a0, [a1]) => instance.lastIndexWhere((b0) => a0(b0), a1)),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.lastWhere, externalInstanceFunctionCaller: (UnmodifiableInt32ListView instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.length, externalInstancePropertyWriter: (UnmodifiableInt32ListView instance, value) => instance.length = value),
      'lengthInBytes': VmProxy(identifier: 'lengthInBytes', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.lengthInBytes),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.map, externalInstanceFunctionCaller: (UnmodifiableInt32ListView instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.noSuchMethod),
      'offsetInBytes': VmProxy(identifier: 'offsetInBytes', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.offsetInBytes),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.reduce, externalInstanceFunctionCaller: (UnmodifiableInt32ListView instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.remove),
      'removeAt': VmProxy(identifier: 'removeAt', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.removeAt),
      'removeLast': VmProxy(identifier: 'removeLast', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.removeLast),
      'removeRange': VmProxy(identifier: 'removeRange', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.removeRange),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.removeWhere, externalInstanceFunctionCaller: (UnmodifiableInt32ListView instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'replaceRange': VmProxy(identifier: 'replaceRange', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.replaceRange),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.retainWhere, externalInstanceFunctionCaller: (UnmodifiableInt32ListView instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'reversed': VmProxy(identifier: 'reversed', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.reversed),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.runtimeType),
      'setAll': VmProxy(identifier: 'setAll', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.setAll),
      'setRange': VmProxy(identifier: 'setRange', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.setRange),
      'shuffle': VmProxy(identifier: 'shuffle', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.shuffle),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.singleWhere, externalInstanceFunctionCaller: (UnmodifiableInt32ListView instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.skipWhile, externalInstanceFunctionCaller: (UnmodifiableInt32ListView instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'sort': VmProxy(identifier: 'sort', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.sort, externalInstanceFunctionCaller: (UnmodifiableInt32ListView instance, [a0]) => instance.sort(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'sublist': VmProxy(identifier: 'sublist', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.sublist),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.takeWhile, externalInstanceFunctionCaller: (UnmodifiableInt32ListView instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.where, externalInstanceFunctionCaller: (UnmodifiableInt32ListView instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (UnmodifiableInt32ListView instance) => instance.whereType),
    },
  );

  ///class UnmodifiableInt32x4ListView
  static final classUnmodifiableInt32x4ListView = VmClass<UnmodifiableInt32x4ListView>(
    identifier: 'UnmodifiableInt32x4ListView',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable', 'List', 'TypedData', 'Int32x4List'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => UnmodifiableInt32x4ListView.new),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.any, externalInstanceFunctionCaller: (UnmodifiableInt32x4ListView instance, a0) => instance.any((b0) => a0(b0))),
      'asMap': VmProxy(identifier: 'asMap', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.asMap),
      'buffer': VmProxy(identifier: 'buffer', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.buffer),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.elementAtOrNull),
      'elementSizeInBytes': VmProxy(identifier: 'elementSizeInBytes', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.elementSizeInBytes),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.every, externalInstanceFunctionCaller: (UnmodifiableInt32x4ListView instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.expand, externalInstanceFunctionCaller: (UnmodifiableInt32x4ListView instance, a0) => instance.expand((b0) => a0(b0))),
      'fillRange': VmProxy(identifier: 'fillRange', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.fillRange),
      'first': VmProxy(identifier: 'first', externalInstancePropertyWriter: (UnmodifiableInt32x4ListView instance, value) => instance.first = value, externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.first),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.firstWhere, externalInstanceFunctionCaller: (UnmodifiableInt32x4ListView instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.fold, externalInstanceFunctionCaller: (UnmodifiableInt32x4ListView instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.forEach, externalInstanceFunctionCaller: (UnmodifiableInt32x4ListView instance, a0) => instance.forEach((b0) => a0(b0))),
      'getRange': VmProxy(identifier: 'getRange', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.getRange),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.indexed),
      'indexOf': VmProxy(identifier: 'indexOf', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.indexOf),
      'indexWhere': VmProxy(identifier: 'indexWhere', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.indexWhere, externalInstanceFunctionCaller: (UnmodifiableInt32x4ListView instance, a0, [a1 = 0]) => instance.indexWhere((b0) => a0(b0), a1)),
      'insert': VmProxy(identifier: 'insert', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.insert),
      'insertAll': VmProxy(identifier: 'insertAll', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.insertAll),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.last, externalInstancePropertyWriter: (UnmodifiableInt32x4ListView instance, value) => instance.last = value),
      'lastIndexOf': VmProxy(identifier: 'lastIndexOf', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.lastIndexOf),
      'lastIndexWhere': VmProxy(identifier: 'lastIndexWhere', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.lastIndexWhere, externalInstanceFunctionCaller: (UnmodifiableInt32x4ListView instance, a0, [a1]) => instance.lastIndexWhere((b0) => a0(b0), a1)),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.lastWhere, externalInstanceFunctionCaller: (UnmodifiableInt32x4ListView instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.length, externalInstancePropertyWriter: (UnmodifiableInt32x4ListView instance, value) => instance.length = value),
      'lengthInBytes': VmProxy(identifier: 'lengthInBytes', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.lengthInBytes),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.map, externalInstanceFunctionCaller: (UnmodifiableInt32x4ListView instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.noSuchMethod),
      'offsetInBytes': VmProxy(identifier: 'offsetInBytes', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.offsetInBytes),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.reduce, externalInstanceFunctionCaller: (UnmodifiableInt32x4ListView instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.remove),
      'removeAt': VmProxy(identifier: 'removeAt', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.removeAt),
      'removeLast': VmProxy(identifier: 'removeLast', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.removeLast),
      'removeRange': VmProxy(identifier: 'removeRange', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.removeRange),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.removeWhere, externalInstanceFunctionCaller: (UnmodifiableInt32x4ListView instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'replaceRange': VmProxy(identifier: 'replaceRange', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.replaceRange),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.retainWhere, externalInstanceFunctionCaller: (UnmodifiableInt32x4ListView instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'reversed': VmProxy(identifier: 'reversed', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.reversed),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.runtimeType),
      'setAll': VmProxy(identifier: 'setAll', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.setAll),
      'setRange': VmProxy(identifier: 'setRange', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.setRange),
      'shuffle': VmProxy(identifier: 'shuffle', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.shuffle),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.singleWhere, externalInstanceFunctionCaller: (UnmodifiableInt32x4ListView instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.skipWhile, externalInstanceFunctionCaller: (UnmodifiableInt32x4ListView instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'sort': VmProxy(identifier: 'sort', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.sort, externalInstanceFunctionCaller: (UnmodifiableInt32x4ListView instance, [a0]) => instance.sort(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'sublist': VmProxy(identifier: 'sublist', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.sublist),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.takeWhile, externalInstanceFunctionCaller: (UnmodifiableInt32x4ListView instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.where, externalInstanceFunctionCaller: (UnmodifiableInt32x4ListView instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (UnmodifiableInt32x4ListView instance) => instance.whereType),
    },
  );

  ///class UnmodifiableInt64ListView
  static final classUnmodifiableInt64ListView = VmClass<UnmodifiableInt64ListView>(
    identifier: 'UnmodifiableInt64ListView',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable', 'List', 'TypedData', '_TypedIntList', 'Int64List'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => UnmodifiableInt64ListView.new),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.any, externalInstanceFunctionCaller: (UnmodifiableInt64ListView instance, a0) => instance.any((b0) => a0(b0))),
      'asMap': VmProxy(identifier: 'asMap', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.asMap),
      'buffer': VmProxy(identifier: 'buffer', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.buffer),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.elementAtOrNull),
      'elementSizeInBytes': VmProxy(identifier: 'elementSizeInBytes', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.elementSizeInBytes),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.every, externalInstanceFunctionCaller: (UnmodifiableInt64ListView instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.expand, externalInstanceFunctionCaller: (UnmodifiableInt64ListView instance, a0) => instance.expand((b0) => a0(b0))),
      'fillRange': VmProxy(identifier: 'fillRange', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.fillRange),
      'first': VmProxy(identifier: 'first', externalInstancePropertyWriter: (UnmodifiableInt64ListView instance, value) => instance.first = value, externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.first),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.firstWhere, externalInstanceFunctionCaller: (UnmodifiableInt64ListView instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.fold, externalInstanceFunctionCaller: (UnmodifiableInt64ListView instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.forEach, externalInstanceFunctionCaller: (UnmodifiableInt64ListView instance, a0) => instance.forEach((b0) => a0(b0))),
      'getRange': VmProxy(identifier: 'getRange', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.getRange),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.indexed),
      'indexOf': VmProxy(identifier: 'indexOf', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.indexOf),
      'indexWhere': VmProxy(identifier: 'indexWhere', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.indexWhere, externalInstanceFunctionCaller: (UnmodifiableInt64ListView instance, a0, [a1 = 0]) => instance.indexWhere((b0) => a0(b0), a1)),
      'insert': VmProxy(identifier: 'insert', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.insert),
      'insertAll': VmProxy(identifier: 'insertAll', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.insertAll),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyWriter: (UnmodifiableInt64ListView instance, value) => instance.last = value, externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.last),
      'lastIndexOf': VmProxy(identifier: 'lastIndexOf', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.lastIndexOf),
      'lastIndexWhere': VmProxy(identifier: 'lastIndexWhere', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.lastIndexWhere, externalInstanceFunctionCaller: (UnmodifiableInt64ListView instance, a0, [a1]) => instance.lastIndexWhere((b0) => a0(b0), a1)),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.lastWhere, externalInstanceFunctionCaller: (UnmodifiableInt64ListView instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.length, externalInstancePropertyWriter: (UnmodifiableInt64ListView instance, value) => instance.length = value),
      'lengthInBytes': VmProxy(identifier: 'lengthInBytes', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.lengthInBytes),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.map, externalInstanceFunctionCaller: (UnmodifiableInt64ListView instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.noSuchMethod),
      'offsetInBytes': VmProxy(identifier: 'offsetInBytes', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.offsetInBytes),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.reduce, externalInstanceFunctionCaller: (UnmodifiableInt64ListView instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.remove),
      'removeAt': VmProxy(identifier: 'removeAt', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.removeAt),
      'removeLast': VmProxy(identifier: 'removeLast', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.removeLast),
      'removeRange': VmProxy(identifier: 'removeRange', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.removeRange),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.removeWhere, externalInstanceFunctionCaller: (UnmodifiableInt64ListView instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'replaceRange': VmProxy(identifier: 'replaceRange', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.replaceRange),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.retainWhere, externalInstanceFunctionCaller: (UnmodifiableInt64ListView instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'reversed': VmProxy(identifier: 'reversed', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.reversed),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.runtimeType),
      'setAll': VmProxy(identifier: 'setAll', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.setAll),
      'setRange': VmProxy(identifier: 'setRange', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.setRange),
      'shuffle': VmProxy(identifier: 'shuffle', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.shuffle),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.singleWhere, externalInstanceFunctionCaller: (UnmodifiableInt64ListView instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.skipWhile, externalInstanceFunctionCaller: (UnmodifiableInt64ListView instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'sort': VmProxy(identifier: 'sort', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.sort, externalInstanceFunctionCaller: (UnmodifiableInt64ListView instance, [a0]) => instance.sort(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'sublist': VmProxy(identifier: 'sublist', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.sublist),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.takeWhile, externalInstanceFunctionCaller: (UnmodifiableInt64ListView instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.where, externalInstanceFunctionCaller: (UnmodifiableInt64ListView instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (UnmodifiableInt64ListView instance) => instance.whereType),
    },
  );

  ///class UnmodifiableInt8ListView
  static final classUnmodifiableInt8ListView = VmClass<UnmodifiableInt8ListView>(
    identifier: 'UnmodifiableInt8ListView',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable', 'List', 'TypedData', '_TypedIntList', 'Int8List'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => UnmodifiableInt8ListView.new),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.any, externalInstanceFunctionCaller: (UnmodifiableInt8ListView instance, a0) => instance.any((b0) => a0(b0))),
      'asMap': VmProxy(identifier: 'asMap', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.asMap),
      'buffer': VmProxy(identifier: 'buffer', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.buffer),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.elementAtOrNull),
      'elementSizeInBytes': VmProxy(identifier: 'elementSizeInBytes', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.elementSizeInBytes),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.every, externalInstanceFunctionCaller: (UnmodifiableInt8ListView instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.expand, externalInstanceFunctionCaller: (UnmodifiableInt8ListView instance, a0) => instance.expand((b0) => a0(b0))),
      'fillRange': VmProxy(identifier: 'fillRange', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.fillRange),
      'first': VmProxy(identifier: 'first', externalInstancePropertyWriter: (UnmodifiableInt8ListView instance, value) => instance.first = value, externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.first),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.firstWhere, externalInstanceFunctionCaller: (UnmodifiableInt8ListView instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.fold, externalInstanceFunctionCaller: (UnmodifiableInt8ListView instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.forEach, externalInstanceFunctionCaller: (UnmodifiableInt8ListView instance, a0) => instance.forEach((b0) => a0(b0))),
      'getRange': VmProxy(identifier: 'getRange', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.getRange),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.indexed),
      'indexOf': VmProxy(identifier: 'indexOf', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.indexOf),
      'indexWhere': VmProxy(identifier: 'indexWhere', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.indexWhere, externalInstanceFunctionCaller: (UnmodifiableInt8ListView instance, a0, [a1 = 0]) => instance.indexWhere((b0) => a0(b0), a1)),
      'insert': VmProxy(identifier: 'insert', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.insert),
      'insertAll': VmProxy(identifier: 'insertAll', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.insertAll),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyWriter: (UnmodifiableInt8ListView instance, value) => instance.last = value, externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.last),
      'lastIndexOf': VmProxy(identifier: 'lastIndexOf', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.lastIndexOf),
      'lastIndexWhere': VmProxy(identifier: 'lastIndexWhere', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.lastIndexWhere, externalInstanceFunctionCaller: (UnmodifiableInt8ListView instance, a0, [a1]) => instance.lastIndexWhere((b0) => a0(b0), a1)),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.lastWhere, externalInstanceFunctionCaller: (UnmodifiableInt8ListView instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.length, externalInstancePropertyWriter: (UnmodifiableInt8ListView instance, value) => instance.length = value),
      'lengthInBytes': VmProxy(identifier: 'lengthInBytes', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.lengthInBytes),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.map, externalInstanceFunctionCaller: (UnmodifiableInt8ListView instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.noSuchMethod),
      'offsetInBytes': VmProxy(identifier: 'offsetInBytes', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.offsetInBytes),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.reduce, externalInstanceFunctionCaller: (UnmodifiableInt8ListView instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.remove),
      'removeAt': VmProxy(identifier: 'removeAt', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.removeAt),
      'removeLast': VmProxy(identifier: 'removeLast', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.removeLast),
      'removeRange': VmProxy(identifier: 'removeRange', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.removeRange),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.removeWhere, externalInstanceFunctionCaller: (UnmodifiableInt8ListView instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'replaceRange': VmProxy(identifier: 'replaceRange', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.replaceRange),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.retainWhere, externalInstanceFunctionCaller: (UnmodifiableInt8ListView instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'reversed': VmProxy(identifier: 'reversed', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.reversed),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.runtimeType),
      'setAll': VmProxy(identifier: 'setAll', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.setAll),
      'setRange': VmProxy(identifier: 'setRange', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.setRange),
      'shuffle': VmProxy(identifier: 'shuffle', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.shuffle),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.singleWhere, externalInstanceFunctionCaller: (UnmodifiableInt8ListView instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.skipWhile, externalInstanceFunctionCaller: (UnmodifiableInt8ListView instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'sort': VmProxy(identifier: 'sort', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.sort, externalInstanceFunctionCaller: (UnmodifiableInt8ListView instance, [a0]) => instance.sort(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'sublist': VmProxy(identifier: 'sublist', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.sublist),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.takeWhile, externalInstanceFunctionCaller: (UnmodifiableInt8ListView instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.where, externalInstanceFunctionCaller: (UnmodifiableInt8ListView instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (UnmodifiableInt8ListView instance) => instance.whereType),
    },
  );

  ///class UnmodifiableListView
  static final classUnmodifiableListView = VmClass<UnmodifiableListView>(
    identifier: 'UnmodifiableListView',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable', 'List', 'ListBase', 'UnmodifiableListMixin', 'UnmodifiableListBase'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => UnmodifiableListView.new),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.any, externalInstanceFunctionCaller: (UnmodifiableListView instance, a0) => instance.any((b0) => a0(b0))),
      'asMap': VmProxy(identifier: 'asMap', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.asMap),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.elementAtOrNull),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.every, externalInstanceFunctionCaller: (UnmodifiableListView instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.expand, externalInstanceFunctionCaller: (UnmodifiableListView instance, a0) => instance.expand((b0) => a0(b0))),
      'fillRange': VmProxy(identifier: 'fillRange', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.fillRange),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.first, externalInstancePropertyWriter: (UnmodifiableListView instance, value) => instance.first = value),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.firstWhere, externalInstanceFunctionCaller: (UnmodifiableListView instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.fold, externalInstanceFunctionCaller: (UnmodifiableListView instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.forEach, externalInstanceFunctionCaller: (UnmodifiableListView instance, a0) => instance.forEach((b0) => a0(b0))),
      'getRange': VmProxy(identifier: 'getRange', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.getRange),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.indexed),
      'indexOf': VmProxy(identifier: 'indexOf', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.indexOf),
      'indexWhere': VmProxy(identifier: 'indexWhere', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.indexWhere, externalInstanceFunctionCaller: (UnmodifiableListView instance, a0, [a1 = 0]) => instance.indexWhere((b0) => a0(b0), a1)),
      'insert': VmProxy(identifier: 'insert', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.insert),
      'insertAll': VmProxy(identifier: 'insertAll', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.insertAll),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyWriter: (UnmodifiableListView instance, value) => instance.last = value, externalInstancePropertyReader: (UnmodifiableListView instance) => instance.last),
      'lastIndexOf': VmProxy(identifier: 'lastIndexOf', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.lastIndexOf),
      'lastIndexWhere': VmProxy(identifier: 'lastIndexWhere', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.lastIndexWhere, externalInstanceFunctionCaller: (UnmodifiableListView instance, a0, [a1]) => instance.lastIndexWhere((b0) => a0(b0), a1)),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.lastWhere, externalInstanceFunctionCaller: (UnmodifiableListView instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.length, externalInstancePropertyWriter: (UnmodifiableListView instance, value) => instance.length = value),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.map, externalInstanceFunctionCaller: (UnmodifiableListView instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.noSuchMethod),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.reduce, externalInstanceFunctionCaller: (UnmodifiableListView instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.remove),
      'removeAt': VmProxy(identifier: 'removeAt', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.removeAt),
      'removeLast': VmProxy(identifier: 'removeLast', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.removeLast),
      'removeRange': VmProxy(identifier: 'removeRange', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.removeRange),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.removeWhere, externalInstanceFunctionCaller: (UnmodifiableListView instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'replaceRange': VmProxy(identifier: 'replaceRange', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.replaceRange),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.retainWhere, externalInstanceFunctionCaller: (UnmodifiableListView instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'reversed': VmProxy(identifier: 'reversed', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.reversed),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.runtimeType),
      'setAll': VmProxy(identifier: 'setAll', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.setAll),
      'setRange': VmProxy(identifier: 'setRange', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.setRange),
      'shuffle': VmProxy(identifier: 'shuffle', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.shuffle),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.singleWhere, externalInstanceFunctionCaller: (UnmodifiableListView instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.skipWhile, externalInstanceFunctionCaller: (UnmodifiableListView instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'sort': VmProxy(identifier: 'sort', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.sort, externalInstanceFunctionCaller: (UnmodifiableListView instance, [a0]) => instance.sort(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'sublist': VmProxy(identifier: 'sublist', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.sublist),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.takeWhile, externalInstanceFunctionCaller: (UnmodifiableListView instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.where, externalInstanceFunctionCaller: (UnmodifiableListView instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (UnmodifiableListView instance) => instance.whereType),
    },
  );

  ///class UnmodifiableMapBase
  static final classUnmodifiableMapBase = VmClass<UnmodifiableMapBase>(
    identifier: 'UnmodifiableMapBase',
    superclassNames: ['Object', 'Map', 'MapBase', '_UnmodifiableMapMixin'],
    externalProxyMap: {
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (UnmodifiableMapBase instance) => instance.addAll),
      'addEntries': VmProxy(identifier: 'addEntries', externalInstancePropertyReader: (UnmodifiableMapBase instance) => instance.addEntries),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (UnmodifiableMapBase instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (UnmodifiableMapBase instance) => instance.clear),
      'containsKey': VmProxy(identifier: 'containsKey', externalInstancePropertyReader: (UnmodifiableMapBase instance) => instance.containsKey),
      'containsValue': VmProxy(identifier: 'containsValue', externalInstancePropertyReader: (UnmodifiableMapBase instance) => instance.containsValue),
      'entries': VmProxy(identifier: 'entries', externalInstancePropertyReader: (UnmodifiableMapBase instance) => instance.entries),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (UnmodifiableMapBase instance) => instance.forEach, externalInstanceFunctionCaller: (UnmodifiableMapBase instance, a0) => instance.forEach((b0, b1) => a0(b0, b1))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (UnmodifiableMapBase instance) => instance.hashCode),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (UnmodifiableMapBase instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (UnmodifiableMapBase instance) => instance.isNotEmpty),
      'keys': VmProxy(identifier: 'keys', externalInstancePropertyReader: (UnmodifiableMapBase instance) => instance.keys),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (UnmodifiableMapBase instance) => instance.length),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (UnmodifiableMapBase instance) => instance.map, externalInstanceFunctionCaller: (UnmodifiableMapBase instance, a0) => instance.map((b0, b1) => a0(b0, b1))),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (UnmodifiableMapBase instance) => instance.noSuchMethod),
      'putIfAbsent': VmProxy(identifier: 'putIfAbsent', externalInstancePropertyReader: (UnmodifiableMapBase instance) => instance.putIfAbsent, externalInstanceFunctionCaller: (UnmodifiableMapBase instance, a0, a1) => instance.putIfAbsent(a0, () => a1())),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (UnmodifiableMapBase instance) => instance.remove),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (UnmodifiableMapBase instance) => instance.removeWhere, externalInstanceFunctionCaller: (UnmodifiableMapBase instance, a0) => instance.removeWhere((b0, b1) => a0(b0, b1))),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (UnmodifiableMapBase instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (UnmodifiableMapBase instance) => instance.toString),
      'update': VmProxy(identifier: 'update', externalInstancePropertyReader: (UnmodifiableMapBase instance) => instance.update, externalInstanceFunctionCaller: (UnmodifiableMapBase instance, a0, a1, {ifAbsent}) => instance.update(a0, (b0) => a1(b0), ifAbsent: ifAbsent == null ? null : () => ifAbsent())),
      'updateAll': VmProxy(identifier: 'updateAll', externalInstancePropertyReader: (UnmodifiableMapBase instance) => instance.updateAll, externalInstanceFunctionCaller: (UnmodifiableMapBase instance, a0) => instance.updateAll((b0, b1) => a0(b0, b1))),
      'values': VmProxy(identifier: 'values', externalInstancePropertyReader: (UnmodifiableMapBase instance) => instance.values),
    },
  );

  ///class UnmodifiableMapView
  static final classUnmodifiableMapView = VmClass<UnmodifiableMapView>(
    identifier: 'UnmodifiableMapView',
    superclassNames: ['Object', 'Map', 'MapView', '_UnmodifiableMapMixin'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => UnmodifiableMapView.new),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (UnmodifiableMapView instance) => instance.addAll),
      'addEntries': VmProxy(identifier: 'addEntries', externalInstancePropertyReader: (UnmodifiableMapView instance) => instance.addEntries),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (UnmodifiableMapView instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (UnmodifiableMapView instance) => instance.clear),
      'containsKey': VmProxy(identifier: 'containsKey', externalInstancePropertyReader: (UnmodifiableMapView instance) => instance.containsKey),
      'containsValue': VmProxy(identifier: 'containsValue', externalInstancePropertyReader: (UnmodifiableMapView instance) => instance.containsValue),
      'entries': VmProxy(identifier: 'entries', externalInstancePropertyReader: (UnmodifiableMapView instance) => instance.entries),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (UnmodifiableMapView instance) => instance.forEach, externalInstanceFunctionCaller: (UnmodifiableMapView instance, a0) => instance.forEach((b0, b1) => a0(b0, b1))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (UnmodifiableMapView instance) => instance.hashCode),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (UnmodifiableMapView instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (UnmodifiableMapView instance) => instance.isNotEmpty),
      'keys': VmProxy(identifier: 'keys', externalInstancePropertyReader: (UnmodifiableMapView instance) => instance.keys),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (UnmodifiableMapView instance) => instance.length),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (UnmodifiableMapView instance) => instance.map, externalInstanceFunctionCaller: (UnmodifiableMapView instance, a0) => instance.map((b0, b1) => a0(b0, b1))),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (UnmodifiableMapView instance) => instance.noSuchMethod),
      'putIfAbsent': VmProxy(identifier: 'putIfAbsent', externalInstancePropertyReader: (UnmodifiableMapView instance) => instance.putIfAbsent, externalInstanceFunctionCaller: (UnmodifiableMapView instance, a0, a1) => instance.putIfAbsent(a0, () => a1())),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (UnmodifiableMapView instance) => instance.remove),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (UnmodifiableMapView instance) => instance.removeWhere, externalInstanceFunctionCaller: (UnmodifiableMapView instance, a0) => instance.removeWhere((b0, b1) => a0(b0, b1))),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (UnmodifiableMapView instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (UnmodifiableMapView instance) => instance.toString),
      'update': VmProxy(identifier: 'update', externalInstancePropertyReader: (UnmodifiableMapView instance) => instance.update, externalInstanceFunctionCaller: (UnmodifiableMapView instance, a0, a1, {ifAbsent}) => instance.update(a0, (b0) => a1(b0), ifAbsent: ifAbsent == null ? null : () => ifAbsent())),
      'updateAll': VmProxy(identifier: 'updateAll', externalInstancePropertyReader: (UnmodifiableMapView instance) => instance.updateAll, externalInstanceFunctionCaller: (UnmodifiableMapView instance, a0) => instance.updateAll((b0, b1) => a0(b0, b1))),
      'values': VmProxy(identifier: 'values', externalInstancePropertyReader: (UnmodifiableMapView instance) => instance.values),
    },
  );

  ///class UnmodifiableSetView
  static final classUnmodifiableSetView = VmClass<UnmodifiableSetView>(
    identifier: 'UnmodifiableSetView',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable', 'Set', 'SetBase', '_UnmodifiableSetMixin'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => UnmodifiableSetView.new),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.any, externalInstanceFunctionCaller: (UnmodifiableSetView instance, a0) => instance.any((b0) => a0(b0))),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.contains),
      'containsAll': VmProxy(identifier: 'containsAll', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.containsAll),
      'difference': VmProxy(identifier: 'difference', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.difference),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.elementAtOrNull),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.every, externalInstanceFunctionCaller: (UnmodifiableSetView instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.expand, externalInstanceFunctionCaller: (UnmodifiableSetView instance, a0) => instance.expand((b0) => a0(b0))),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.first),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.firstWhere, externalInstanceFunctionCaller: (UnmodifiableSetView instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.fold, externalInstanceFunctionCaller: (UnmodifiableSetView instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.forEach, externalInstanceFunctionCaller: (UnmodifiableSetView instance, a0) => instance.forEach((b0) => a0(b0))),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.indexed),
      'intersection': VmProxy(identifier: 'intersection', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.intersection),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.last),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.lastWhere, externalInstanceFunctionCaller: (UnmodifiableSetView instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.length),
      'lookup': VmProxy(identifier: 'lookup', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.lookup),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.map, externalInstanceFunctionCaller: (UnmodifiableSetView instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.noSuchMethod),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.reduce, externalInstanceFunctionCaller: (UnmodifiableSetView instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.remove),
      'removeAll': VmProxy(identifier: 'removeAll', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.removeAll),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.removeWhere, externalInstanceFunctionCaller: (UnmodifiableSetView instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'retainAll': VmProxy(identifier: 'retainAll', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.retainAll),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.retainWhere, externalInstanceFunctionCaller: (UnmodifiableSetView instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.runtimeType),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.singleWhere, externalInstanceFunctionCaller: (UnmodifiableSetView instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.skipWhile, externalInstanceFunctionCaller: (UnmodifiableSetView instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.takeWhile, externalInstanceFunctionCaller: (UnmodifiableSetView instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.toString),
      'union': VmProxy(identifier: 'union', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.union),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.where, externalInstanceFunctionCaller: (UnmodifiableSetView instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (UnmodifiableSetView instance) => instance.whereType),
    },
  );

  ///class UnmodifiableUint16ListView
  static final classUnmodifiableUint16ListView = VmClass<UnmodifiableUint16ListView>(
    identifier: 'UnmodifiableUint16ListView',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable', 'List', 'TypedData', '_TypedIntList', 'Uint16List'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => UnmodifiableUint16ListView.new),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.any, externalInstanceFunctionCaller: (UnmodifiableUint16ListView instance, a0) => instance.any((b0) => a0(b0))),
      'asMap': VmProxy(identifier: 'asMap', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.asMap),
      'buffer': VmProxy(identifier: 'buffer', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.buffer),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.elementAtOrNull),
      'elementSizeInBytes': VmProxy(identifier: 'elementSizeInBytes', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.elementSizeInBytes),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.every, externalInstanceFunctionCaller: (UnmodifiableUint16ListView instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.expand, externalInstanceFunctionCaller: (UnmodifiableUint16ListView instance, a0) => instance.expand((b0) => a0(b0))),
      'fillRange': VmProxy(identifier: 'fillRange', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.fillRange),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.first, externalInstancePropertyWriter: (UnmodifiableUint16ListView instance, value) => instance.first = value),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.firstWhere, externalInstanceFunctionCaller: (UnmodifiableUint16ListView instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.fold, externalInstanceFunctionCaller: (UnmodifiableUint16ListView instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.forEach, externalInstanceFunctionCaller: (UnmodifiableUint16ListView instance, a0) => instance.forEach((b0) => a0(b0))),
      'getRange': VmProxy(identifier: 'getRange', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.getRange),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.indexed),
      'indexOf': VmProxy(identifier: 'indexOf', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.indexOf),
      'indexWhere': VmProxy(identifier: 'indexWhere', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.indexWhere, externalInstanceFunctionCaller: (UnmodifiableUint16ListView instance, a0, [a1 = 0]) => instance.indexWhere((b0) => a0(b0), a1)),
      'insert': VmProxy(identifier: 'insert', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.insert),
      'insertAll': VmProxy(identifier: 'insertAll', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.insertAll),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.last, externalInstancePropertyWriter: (UnmodifiableUint16ListView instance, value) => instance.last = value),
      'lastIndexOf': VmProxy(identifier: 'lastIndexOf', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.lastIndexOf),
      'lastIndexWhere': VmProxy(identifier: 'lastIndexWhere', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.lastIndexWhere, externalInstanceFunctionCaller: (UnmodifiableUint16ListView instance, a0, [a1]) => instance.lastIndexWhere((b0) => a0(b0), a1)),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.lastWhere, externalInstanceFunctionCaller: (UnmodifiableUint16ListView instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.length, externalInstancePropertyWriter: (UnmodifiableUint16ListView instance, value) => instance.length = value),
      'lengthInBytes': VmProxy(identifier: 'lengthInBytes', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.lengthInBytes),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.map, externalInstanceFunctionCaller: (UnmodifiableUint16ListView instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.noSuchMethod),
      'offsetInBytes': VmProxy(identifier: 'offsetInBytes', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.offsetInBytes),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.reduce, externalInstanceFunctionCaller: (UnmodifiableUint16ListView instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.remove),
      'removeAt': VmProxy(identifier: 'removeAt', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.removeAt),
      'removeLast': VmProxy(identifier: 'removeLast', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.removeLast),
      'removeRange': VmProxy(identifier: 'removeRange', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.removeRange),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.removeWhere, externalInstanceFunctionCaller: (UnmodifiableUint16ListView instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'replaceRange': VmProxy(identifier: 'replaceRange', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.replaceRange),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.retainWhere, externalInstanceFunctionCaller: (UnmodifiableUint16ListView instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'reversed': VmProxy(identifier: 'reversed', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.reversed),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.runtimeType),
      'setAll': VmProxy(identifier: 'setAll', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.setAll),
      'setRange': VmProxy(identifier: 'setRange', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.setRange),
      'shuffle': VmProxy(identifier: 'shuffle', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.shuffle),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.singleWhere, externalInstanceFunctionCaller: (UnmodifiableUint16ListView instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.skipWhile, externalInstanceFunctionCaller: (UnmodifiableUint16ListView instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'sort': VmProxy(identifier: 'sort', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.sort, externalInstanceFunctionCaller: (UnmodifiableUint16ListView instance, [a0]) => instance.sort(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'sublist': VmProxy(identifier: 'sublist', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.sublist),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.takeWhile, externalInstanceFunctionCaller: (UnmodifiableUint16ListView instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.where, externalInstanceFunctionCaller: (UnmodifiableUint16ListView instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (UnmodifiableUint16ListView instance) => instance.whereType),
    },
  );

  ///class UnmodifiableUint32ListView
  static final classUnmodifiableUint32ListView = VmClass<UnmodifiableUint32ListView>(
    identifier: 'UnmodifiableUint32ListView',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable', 'List', 'TypedData', '_TypedIntList', 'Uint32List'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => UnmodifiableUint32ListView.new),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.any, externalInstanceFunctionCaller: (UnmodifiableUint32ListView instance, a0) => instance.any((b0) => a0(b0))),
      'asMap': VmProxy(identifier: 'asMap', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.asMap),
      'buffer': VmProxy(identifier: 'buffer', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.buffer),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.elementAtOrNull),
      'elementSizeInBytes': VmProxy(identifier: 'elementSizeInBytes', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.elementSizeInBytes),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.every, externalInstanceFunctionCaller: (UnmodifiableUint32ListView instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.expand, externalInstanceFunctionCaller: (UnmodifiableUint32ListView instance, a0) => instance.expand((b0) => a0(b0))),
      'fillRange': VmProxy(identifier: 'fillRange', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.fillRange),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.first, externalInstancePropertyWriter: (UnmodifiableUint32ListView instance, value) => instance.first = value),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.firstWhere, externalInstanceFunctionCaller: (UnmodifiableUint32ListView instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.fold, externalInstanceFunctionCaller: (UnmodifiableUint32ListView instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.forEach, externalInstanceFunctionCaller: (UnmodifiableUint32ListView instance, a0) => instance.forEach((b0) => a0(b0))),
      'getRange': VmProxy(identifier: 'getRange', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.getRange),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.indexed),
      'indexOf': VmProxy(identifier: 'indexOf', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.indexOf),
      'indexWhere': VmProxy(identifier: 'indexWhere', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.indexWhere, externalInstanceFunctionCaller: (UnmodifiableUint32ListView instance, a0, [a1 = 0]) => instance.indexWhere((b0) => a0(b0), a1)),
      'insert': VmProxy(identifier: 'insert', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.insert),
      'insertAll': VmProxy(identifier: 'insertAll', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.insertAll),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.last, externalInstancePropertyWriter: (UnmodifiableUint32ListView instance, value) => instance.last = value),
      'lastIndexOf': VmProxy(identifier: 'lastIndexOf', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.lastIndexOf),
      'lastIndexWhere': VmProxy(identifier: 'lastIndexWhere', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.lastIndexWhere, externalInstanceFunctionCaller: (UnmodifiableUint32ListView instance, a0, [a1]) => instance.lastIndexWhere((b0) => a0(b0), a1)),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.lastWhere, externalInstanceFunctionCaller: (UnmodifiableUint32ListView instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.length, externalInstancePropertyWriter: (UnmodifiableUint32ListView instance, value) => instance.length = value),
      'lengthInBytes': VmProxy(identifier: 'lengthInBytes', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.lengthInBytes),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.map, externalInstanceFunctionCaller: (UnmodifiableUint32ListView instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.noSuchMethod),
      'offsetInBytes': VmProxy(identifier: 'offsetInBytes', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.offsetInBytes),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.reduce, externalInstanceFunctionCaller: (UnmodifiableUint32ListView instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.remove),
      'removeAt': VmProxy(identifier: 'removeAt', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.removeAt),
      'removeLast': VmProxy(identifier: 'removeLast', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.removeLast),
      'removeRange': VmProxy(identifier: 'removeRange', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.removeRange),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.removeWhere, externalInstanceFunctionCaller: (UnmodifiableUint32ListView instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'replaceRange': VmProxy(identifier: 'replaceRange', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.replaceRange),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.retainWhere, externalInstanceFunctionCaller: (UnmodifiableUint32ListView instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'reversed': VmProxy(identifier: 'reversed', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.reversed),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.runtimeType),
      'setAll': VmProxy(identifier: 'setAll', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.setAll),
      'setRange': VmProxy(identifier: 'setRange', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.setRange),
      'shuffle': VmProxy(identifier: 'shuffle', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.shuffle),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.singleWhere, externalInstanceFunctionCaller: (UnmodifiableUint32ListView instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.skipWhile, externalInstanceFunctionCaller: (UnmodifiableUint32ListView instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'sort': VmProxy(identifier: 'sort', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.sort, externalInstanceFunctionCaller: (UnmodifiableUint32ListView instance, [a0]) => instance.sort(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'sublist': VmProxy(identifier: 'sublist', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.sublist),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.takeWhile, externalInstanceFunctionCaller: (UnmodifiableUint32ListView instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.where, externalInstanceFunctionCaller: (UnmodifiableUint32ListView instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (UnmodifiableUint32ListView instance) => instance.whereType),
    },
  );

  ///class UnmodifiableUint64ListView
  static final classUnmodifiableUint64ListView = VmClass<UnmodifiableUint64ListView>(
    identifier: 'UnmodifiableUint64ListView',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable', 'List', 'TypedData', '_TypedIntList', 'Uint64List'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => UnmodifiableUint64ListView.new),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.any, externalInstanceFunctionCaller: (UnmodifiableUint64ListView instance, a0) => instance.any((b0) => a0(b0))),
      'asMap': VmProxy(identifier: 'asMap', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.asMap),
      'buffer': VmProxy(identifier: 'buffer', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.buffer),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.elementAtOrNull),
      'elementSizeInBytes': VmProxy(identifier: 'elementSizeInBytes', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.elementSizeInBytes),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.every, externalInstanceFunctionCaller: (UnmodifiableUint64ListView instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.expand, externalInstanceFunctionCaller: (UnmodifiableUint64ListView instance, a0) => instance.expand((b0) => a0(b0))),
      'fillRange': VmProxy(identifier: 'fillRange', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.fillRange),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.first, externalInstancePropertyWriter: (UnmodifiableUint64ListView instance, value) => instance.first = value),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.firstWhere, externalInstanceFunctionCaller: (UnmodifiableUint64ListView instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.fold, externalInstanceFunctionCaller: (UnmodifiableUint64ListView instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.forEach, externalInstanceFunctionCaller: (UnmodifiableUint64ListView instance, a0) => instance.forEach((b0) => a0(b0))),
      'getRange': VmProxy(identifier: 'getRange', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.getRange),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.indexed),
      'indexOf': VmProxy(identifier: 'indexOf', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.indexOf),
      'indexWhere': VmProxy(identifier: 'indexWhere', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.indexWhere, externalInstanceFunctionCaller: (UnmodifiableUint64ListView instance, a0, [a1 = 0]) => instance.indexWhere((b0) => a0(b0), a1)),
      'insert': VmProxy(identifier: 'insert', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.insert),
      'insertAll': VmProxy(identifier: 'insertAll', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.insertAll),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.last, externalInstancePropertyWriter: (UnmodifiableUint64ListView instance, value) => instance.last = value),
      'lastIndexOf': VmProxy(identifier: 'lastIndexOf', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.lastIndexOf),
      'lastIndexWhere': VmProxy(identifier: 'lastIndexWhere', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.lastIndexWhere, externalInstanceFunctionCaller: (UnmodifiableUint64ListView instance, a0, [a1]) => instance.lastIndexWhere((b0) => a0(b0), a1)),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.lastWhere, externalInstanceFunctionCaller: (UnmodifiableUint64ListView instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.length, externalInstancePropertyWriter: (UnmodifiableUint64ListView instance, value) => instance.length = value),
      'lengthInBytes': VmProxy(identifier: 'lengthInBytes', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.lengthInBytes),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.map, externalInstanceFunctionCaller: (UnmodifiableUint64ListView instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.noSuchMethod),
      'offsetInBytes': VmProxy(identifier: 'offsetInBytes', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.offsetInBytes),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.reduce, externalInstanceFunctionCaller: (UnmodifiableUint64ListView instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.remove),
      'removeAt': VmProxy(identifier: 'removeAt', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.removeAt),
      'removeLast': VmProxy(identifier: 'removeLast', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.removeLast),
      'removeRange': VmProxy(identifier: 'removeRange', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.removeRange),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.removeWhere, externalInstanceFunctionCaller: (UnmodifiableUint64ListView instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'replaceRange': VmProxy(identifier: 'replaceRange', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.replaceRange),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.retainWhere, externalInstanceFunctionCaller: (UnmodifiableUint64ListView instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'reversed': VmProxy(identifier: 'reversed', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.reversed),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.runtimeType),
      'setAll': VmProxy(identifier: 'setAll', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.setAll),
      'setRange': VmProxy(identifier: 'setRange', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.setRange),
      'shuffle': VmProxy(identifier: 'shuffle', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.shuffle),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.singleWhere, externalInstanceFunctionCaller: (UnmodifiableUint64ListView instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.skipWhile, externalInstanceFunctionCaller: (UnmodifiableUint64ListView instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'sort': VmProxy(identifier: 'sort', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.sort, externalInstanceFunctionCaller: (UnmodifiableUint64ListView instance, [a0]) => instance.sort(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'sublist': VmProxy(identifier: 'sublist', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.sublist),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.takeWhile, externalInstanceFunctionCaller: (UnmodifiableUint64ListView instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.where, externalInstanceFunctionCaller: (UnmodifiableUint64ListView instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (UnmodifiableUint64ListView instance) => instance.whereType),
    },
  );

  ///class UnmodifiableUint8ClampedListView
  static final classUnmodifiableUint8ClampedListView = VmClass<UnmodifiableUint8ClampedListView>(
    identifier: 'UnmodifiableUint8ClampedListView',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable', 'List', 'TypedData', '_TypedIntList', 'Uint8ClampedList'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => UnmodifiableUint8ClampedListView.new),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.any, externalInstanceFunctionCaller: (UnmodifiableUint8ClampedListView instance, a0) => instance.any((b0) => a0(b0))),
      'asMap': VmProxy(identifier: 'asMap', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.asMap),
      'buffer': VmProxy(identifier: 'buffer', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.buffer),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.elementAtOrNull),
      'elementSizeInBytes': VmProxy(identifier: 'elementSizeInBytes', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.elementSizeInBytes),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.every, externalInstanceFunctionCaller: (UnmodifiableUint8ClampedListView instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.expand, externalInstanceFunctionCaller: (UnmodifiableUint8ClampedListView instance, a0) => instance.expand((b0) => a0(b0))),
      'fillRange': VmProxy(identifier: 'fillRange', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.fillRange),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.first, externalInstancePropertyWriter: (UnmodifiableUint8ClampedListView instance, value) => instance.first = value),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.firstWhere, externalInstanceFunctionCaller: (UnmodifiableUint8ClampedListView instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.fold, externalInstanceFunctionCaller: (UnmodifiableUint8ClampedListView instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.forEach, externalInstanceFunctionCaller: (UnmodifiableUint8ClampedListView instance, a0) => instance.forEach((b0) => a0(b0))),
      'getRange': VmProxy(identifier: 'getRange', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.getRange),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.indexed),
      'indexOf': VmProxy(identifier: 'indexOf', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.indexOf),
      'indexWhere': VmProxy(identifier: 'indexWhere', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.indexWhere, externalInstanceFunctionCaller: (UnmodifiableUint8ClampedListView instance, a0, [a1 = 0]) => instance.indexWhere((b0) => a0(b0), a1)),
      'insert': VmProxy(identifier: 'insert', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.insert),
      'insertAll': VmProxy(identifier: 'insertAll', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.insertAll),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.last, externalInstancePropertyWriter: (UnmodifiableUint8ClampedListView instance, value) => instance.last = value),
      'lastIndexOf': VmProxy(identifier: 'lastIndexOf', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.lastIndexOf),
      'lastIndexWhere': VmProxy(identifier: 'lastIndexWhere', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.lastIndexWhere, externalInstanceFunctionCaller: (UnmodifiableUint8ClampedListView instance, a0, [a1]) => instance.lastIndexWhere((b0) => a0(b0), a1)),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.lastWhere, externalInstanceFunctionCaller: (UnmodifiableUint8ClampedListView instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.length, externalInstancePropertyWriter: (UnmodifiableUint8ClampedListView instance, value) => instance.length = value),
      'lengthInBytes': VmProxy(identifier: 'lengthInBytes', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.lengthInBytes),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.map, externalInstanceFunctionCaller: (UnmodifiableUint8ClampedListView instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.noSuchMethod),
      'offsetInBytes': VmProxy(identifier: 'offsetInBytes', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.offsetInBytes),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.reduce, externalInstanceFunctionCaller: (UnmodifiableUint8ClampedListView instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.remove),
      'removeAt': VmProxy(identifier: 'removeAt', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.removeAt),
      'removeLast': VmProxy(identifier: 'removeLast', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.removeLast),
      'removeRange': VmProxy(identifier: 'removeRange', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.removeRange),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.removeWhere, externalInstanceFunctionCaller: (UnmodifiableUint8ClampedListView instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'replaceRange': VmProxy(identifier: 'replaceRange', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.replaceRange),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.retainWhere, externalInstanceFunctionCaller: (UnmodifiableUint8ClampedListView instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'reversed': VmProxy(identifier: 'reversed', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.reversed),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.runtimeType),
      'setAll': VmProxy(identifier: 'setAll', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.setAll),
      'setRange': VmProxy(identifier: 'setRange', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.setRange),
      'shuffle': VmProxy(identifier: 'shuffle', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.shuffle),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.singleWhere, externalInstanceFunctionCaller: (UnmodifiableUint8ClampedListView instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.skipWhile, externalInstanceFunctionCaller: (UnmodifiableUint8ClampedListView instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'sort': VmProxy(identifier: 'sort', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.sort, externalInstanceFunctionCaller: (UnmodifiableUint8ClampedListView instance, [a0]) => instance.sort(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'sublist': VmProxy(identifier: 'sublist', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.sublist),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.takeWhile, externalInstanceFunctionCaller: (UnmodifiableUint8ClampedListView instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.where, externalInstanceFunctionCaller: (UnmodifiableUint8ClampedListView instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (UnmodifiableUint8ClampedListView instance) => instance.whereType),
    },
  );

  ///class UnmodifiableUint8ListView
  static final classUnmodifiableUint8ListView = VmClass<UnmodifiableUint8ListView>(
    identifier: 'UnmodifiableUint8ListView',
    superclassNames: ['Object', 'Iterable', 'EfficientLengthIterable', 'List', 'TypedData', '_TypedIntList', 'Uint8List'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => UnmodifiableUint8ListView.new),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.any, externalInstanceFunctionCaller: (UnmodifiableUint8ListView instance, a0) => instance.any((b0) => a0(b0))),
      'asMap': VmProxy(identifier: 'asMap', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.asMap),
      'buffer': VmProxy(identifier: 'buffer', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.buffer),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.elementAt),
      'elementAtOrNull': VmProxy(identifier: 'elementAtOrNull', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.elementAtOrNull),
      'elementSizeInBytes': VmProxy(identifier: 'elementSizeInBytes', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.elementSizeInBytes),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.every, externalInstanceFunctionCaller: (UnmodifiableUint8ListView instance, a0) => instance.every((b0) => a0(b0))),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.expand, externalInstanceFunctionCaller: (UnmodifiableUint8ListView instance, a0) => instance.expand((b0) => a0(b0))),
      'fillRange': VmProxy(identifier: 'fillRange', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.fillRange),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.first, externalInstancePropertyWriter: (UnmodifiableUint8ListView instance, value) => instance.first = value),
      'firstOrNull': VmProxy(identifier: 'firstOrNull', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.firstOrNull),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.firstWhere, externalInstanceFunctionCaller: (UnmodifiableUint8ListView instance, a0, {orElse}) => instance.firstWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.fold, externalInstanceFunctionCaller: (UnmodifiableUint8ListView instance, a0, a1) => instance.fold(a0, (b0, b1) => a1(b0, b1))),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.forEach, externalInstanceFunctionCaller: (UnmodifiableUint8ListView instance, a0) => instance.forEach((b0) => a0(b0))),
      'getRange': VmProxy(identifier: 'getRange', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.getRange),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.hashCode),
      'indexed': VmProxy(identifier: 'indexed', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.indexed),
      'indexOf': VmProxy(identifier: 'indexOf', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.indexOf),
      'indexWhere': VmProxy(identifier: 'indexWhere', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.indexWhere, externalInstanceFunctionCaller: (UnmodifiableUint8ListView instance, a0, [a1 = 0]) => instance.indexWhere((b0) => a0(b0), a1)),
      'insert': VmProxy(identifier: 'insert', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.insert),
      'insertAll': VmProxy(identifier: 'insertAll', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.insertAll),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.last, externalInstancePropertyWriter: (UnmodifiableUint8ListView instance, value) => instance.last = value),
      'lastIndexOf': VmProxy(identifier: 'lastIndexOf', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.lastIndexOf),
      'lastIndexWhere': VmProxy(identifier: 'lastIndexWhere', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.lastIndexWhere, externalInstanceFunctionCaller: (UnmodifiableUint8ListView instance, a0, [a1]) => instance.lastIndexWhere((b0) => a0(b0), a1)),
      'lastOrNull': VmProxy(identifier: 'lastOrNull', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.lastOrNull),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.lastWhere, externalInstanceFunctionCaller: (UnmodifiableUint8ListView instance, a0, {orElse}) => instance.lastWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.length, externalInstancePropertyWriter: (UnmodifiableUint8ListView instance, value) => instance.length = value),
      'lengthInBytes': VmProxy(identifier: 'lengthInBytes', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.lengthInBytes),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.map, externalInstanceFunctionCaller: (UnmodifiableUint8ListView instance, a0) => instance.map((b0) => a0(b0))),
      'nonNulls': VmProxy(identifier: 'nonNulls', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.nonNulls),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.noSuchMethod),
      'offsetInBytes': VmProxy(identifier: 'offsetInBytes', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.offsetInBytes),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.reduce, externalInstanceFunctionCaller: (UnmodifiableUint8ListView instance, a0) => instance.reduce((b0, b1) => a0(b0, b1))),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.remove),
      'removeAt': VmProxy(identifier: 'removeAt', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.removeAt),
      'removeLast': VmProxy(identifier: 'removeLast', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.removeLast),
      'removeRange': VmProxy(identifier: 'removeRange', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.removeRange),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.removeWhere, externalInstanceFunctionCaller: (UnmodifiableUint8ListView instance, a0) => instance.removeWhere((b0) => a0(b0))),
      'replaceRange': VmProxy(identifier: 'replaceRange', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.replaceRange),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.retainWhere, externalInstanceFunctionCaller: (UnmodifiableUint8ListView instance, a0) => instance.retainWhere((b0) => a0(b0))),
      'reversed': VmProxy(identifier: 'reversed', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.reversed),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.runtimeType),
      'setAll': VmProxy(identifier: 'setAll', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.setAll),
      'setRange': VmProxy(identifier: 'setRange', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.setRange),
      'shuffle': VmProxy(identifier: 'shuffle', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.shuffle),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.single),
      'singleOrNull': VmProxy(identifier: 'singleOrNull', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.singleOrNull),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.singleWhere, externalInstanceFunctionCaller: (UnmodifiableUint8ListView instance, a0, {orElse}) => instance.singleWhere((b0) => a0(b0), orElse: orElse == null ? null : () => orElse())),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.skipWhile, externalInstanceFunctionCaller: (UnmodifiableUint8ListView instance, a0) => instance.skipWhile((b0) => a0(b0))),
      'sort': VmProxy(identifier: 'sort', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.sort, externalInstanceFunctionCaller: (UnmodifiableUint8ListView instance, [a0]) => instance.sort(a0 == null ? null : (b0, b1) => a0(b0, b1))),
      'sublist': VmProxy(identifier: 'sublist', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.sublist),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.takeWhile, externalInstanceFunctionCaller: (UnmodifiableUint8ListView instance, a0) => instance.takeWhile((b0) => a0(b0))),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.where, externalInstanceFunctionCaller: (UnmodifiableUint8ListView instance, a0) => instance.where((b0) => a0(b0))),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (UnmodifiableUint8ListView instance) => instance.whereType),
    },
  );

  ///class UnsupportedError
  static final classUnsupportedError = VmClass<UnsupportedError>(
    identifier: 'UnsupportedError',
    superclassNames: ['Object', 'Error'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => UnsupportedError.new),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (UnsupportedError instance) => instance.hashCode),
      'message': VmProxy(identifier: 'message', externalInstancePropertyReader: (UnsupportedError instance) => instance.message),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (UnsupportedError instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (UnsupportedError instance) => instance.runtimeType),
      'stackTrace': VmProxy(identifier: 'stackTrace', externalInstancePropertyReader: (UnsupportedError instance) => instance.stackTrace),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (UnsupportedError instance) => instance.toString),
    },
  );

  ///class Uri
  static final classUri = VmClass<Uri>(
    identifier: 'Uri',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Uri.new),
      'dataFromBytes': VmProxy(identifier: 'dataFromBytes', externalStaticPropertyReader: () => Uri.dataFromBytes),
      'dataFromString': VmProxy(identifier: 'dataFromString', externalStaticPropertyReader: () => Uri.dataFromString),
      'directory': VmProxy(identifier: 'directory', externalStaticPropertyReader: () => Uri.directory),
      'file': VmProxy(identifier: 'file', externalStaticPropertyReader: () => Uri.file),
      'http': VmProxy(identifier: 'http', externalStaticPropertyReader: () => Uri.http),
      'https': VmProxy(identifier: 'https', externalStaticPropertyReader: () => Uri.https),
      'base': VmProxy(identifier: 'base', externalStaticPropertyReader: () => Uri.base),
      'decodeComponent': VmProxy(identifier: 'decodeComponent', externalStaticPropertyReader: () => Uri.decodeComponent),
      'decodeFull': VmProxy(identifier: 'decodeFull', externalStaticPropertyReader: () => Uri.decodeFull),
      'decodeQueryComponent': VmProxy(identifier: 'decodeQueryComponent', externalStaticPropertyReader: () => Uri.decodeQueryComponent),
      'encodeComponent': VmProxy(identifier: 'encodeComponent', externalStaticPropertyReader: () => Uri.encodeComponent),
      'encodeFull': VmProxy(identifier: 'encodeFull', externalStaticPropertyReader: () => Uri.encodeFull),
      'encodeQueryComponent': VmProxy(identifier: 'encodeQueryComponent', externalStaticPropertyReader: () => Uri.encodeQueryComponent),
      'parse': VmProxy(identifier: 'parse', externalStaticPropertyReader: () => Uri.parse),
      'parseIPv4Address': VmProxy(identifier: 'parseIPv4Address', externalStaticPropertyReader: () => Uri.parseIPv4Address),
      'parseIPv6Address': VmProxy(identifier: 'parseIPv6Address', externalStaticPropertyReader: () => Uri.parseIPv6Address),
      'splitQueryString': VmProxy(identifier: 'splitQueryString', externalStaticPropertyReader: () => Uri.splitQueryString),
      'tryParse': VmProxy(identifier: 'tryParse', externalStaticPropertyReader: () => Uri.tryParse),
      'authority': VmProxy(identifier: 'authority', externalInstancePropertyReader: (Uri instance) => instance.authority),
      'data': VmProxy(identifier: 'data', externalInstancePropertyReader: (Uri instance) => instance.data),
      'fragment': VmProxy(identifier: 'fragment', externalInstancePropertyReader: (Uri instance) => instance.fragment),
      'hasAbsolutePath': VmProxy(identifier: 'hasAbsolutePath', externalInstancePropertyReader: (Uri instance) => instance.hasAbsolutePath),
      'hasAuthority': VmProxy(identifier: 'hasAuthority', externalInstancePropertyReader: (Uri instance) => instance.hasAuthority),
      'hasEmptyPath': VmProxy(identifier: 'hasEmptyPath', externalInstancePropertyReader: (Uri instance) => instance.hasEmptyPath),
      'hasFragment': VmProxy(identifier: 'hasFragment', externalInstancePropertyReader: (Uri instance) => instance.hasFragment),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Uri instance) => instance.hashCode),
      'hasPort': VmProxy(identifier: 'hasPort', externalInstancePropertyReader: (Uri instance) => instance.hasPort),
      'hasQuery': VmProxy(identifier: 'hasQuery', externalInstancePropertyReader: (Uri instance) => instance.hasQuery),
      'hasScheme': VmProxy(identifier: 'hasScheme', externalInstancePropertyReader: (Uri instance) => instance.hasScheme),
      'host': VmProxy(identifier: 'host', externalInstancePropertyReader: (Uri instance) => instance.host),
      'isAbsolute': VmProxy(identifier: 'isAbsolute', externalInstancePropertyReader: (Uri instance) => instance.isAbsolute),
      'isScheme': VmProxy(identifier: 'isScheme', externalInstancePropertyReader: (Uri instance) => instance.isScheme),
      'normalizePath': VmProxy(identifier: 'normalizePath', externalInstancePropertyReader: (Uri instance) => instance.normalizePath),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Uri instance) => instance.noSuchMethod),
      'origin': VmProxy(identifier: 'origin', externalInstancePropertyReader: (Uri instance) => instance.origin),
      'path': VmProxy(identifier: 'path', externalInstancePropertyReader: (Uri instance) => instance.path),
      'pathSegments': VmProxy(identifier: 'pathSegments', externalInstancePropertyReader: (Uri instance) => instance.pathSegments),
      'port': VmProxy(identifier: 'port', externalInstancePropertyReader: (Uri instance) => instance.port),
      'query': VmProxy(identifier: 'query', externalInstancePropertyReader: (Uri instance) => instance.query),
      'queryParameters': VmProxy(identifier: 'queryParameters', externalInstancePropertyReader: (Uri instance) => instance.queryParameters),
      'queryParametersAll': VmProxy(identifier: 'queryParametersAll', externalInstancePropertyReader: (Uri instance) => instance.queryParametersAll),
      'removeFragment': VmProxy(identifier: 'removeFragment', externalInstancePropertyReader: (Uri instance) => instance.removeFragment),
      'replace': VmProxy(identifier: 'replace', externalInstancePropertyReader: (Uri instance) => instance.replace),
      'resolve': VmProxy(identifier: 'resolve', externalInstancePropertyReader: (Uri instance) => instance.resolve),
      'resolveUri': VmProxy(identifier: 'resolveUri', externalInstancePropertyReader: (Uri instance) => instance.resolveUri),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Uri instance) => instance.runtimeType),
      'scheme': VmProxy(identifier: 'scheme', externalInstancePropertyReader: (Uri instance) => instance.scheme),
      'toFilePath': VmProxy(identifier: 'toFilePath', externalInstancePropertyReader: (Uri instance) => instance.toFilePath),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Uri instance) => instance.toString),
      'userInfo': VmProxy(identifier: 'userInfo', externalInstancePropertyReader: (Uri instance) => instance.userInfo),
    },
  );

  ///class UriData
  static final classUriData = VmClass<UriData>(
    identifier: 'UriData',
    superclassNames: ['Object'],
    externalProxyMap: {
      'fromBytes': VmProxy(identifier: 'fromBytes', externalStaticPropertyReader: () => UriData.fromBytes),
      'fromString': VmProxy(identifier: 'fromString', externalStaticPropertyReader: () => UriData.fromString),
      'fromUri': VmProxy(identifier: 'fromUri', externalStaticPropertyReader: () => UriData.fromUri),
      'parse': VmProxy(identifier: 'parse', externalStaticPropertyReader: () => UriData.parse),
      'charset': VmProxy(identifier: 'charset', externalInstancePropertyReader: (UriData instance) => instance.charset),
      'contentAsBytes': VmProxy(identifier: 'contentAsBytes', externalInstancePropertyReader: (UriData instance) => instance.contentAsBytes),
      'contentAsString': VmProxy(identifier: 'contentAsString', externalInstancePropertyReader: (UriData instance) => instance.contentAsString),
      'contentText': VmProxy(identifier: 'contentText', externalInstancePropertyReader: (UriData instance) => instance.contentText),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (UriData instance) => instance.hashCode),
      'isBase64': VmProxy(identifier: 'isBase64', externalInstancePropertyReader: (UriData instance) => instance.isBase64),
      'isCharset': VmProxy(identifier: 'isCharset', externalInstancePropertyReader: (UriData instance) => instance.isCharset),
      'isEncoding': VmProxy(identifier: 'isEncoding', externalInstancePropertyReader: (UriData instance) => instance.isEncoding),
      'isMimeType': VmProxy(identifier: 'isMimeType', externalInstancePropertyReader: (UriData instance) => instance.isMimeType),
      'mimeType': VmProxy(identifier: 'mimeType', externalInstancePropertyReader: (UriData instance) => instance.mimeType),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (UriData instance) => instance.noSuchMethod),
      'parameters': VmProxy(identifier: 'parameters', externalInstancePropertyReader: (UriData instance) => instance.parameters),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (UriData instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (UriData instance) => instance.toString),
      'uri': VmProxy(identifier: 'uri', externalInstancePropertyReader: (UriData instance) => instance.uri),
    },
  );

  ///class Utf8Codec
  static final classUtf8Codec = VmClass<Utf8Codec>(
    identifier: 'Utf8Codec',
    superclassNames: ['Object', 'Codec', 'Encoding'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Utf8Codec.new),
      'decode': VmProxy(identifier: 'decode', externalInstancePropertyReader: (Utf8Codec instance) => instance.decode),
      'decoder': VmProxy(identifier: 'decoder', externalInstancePropertyReader: (Utf8Codec instance) => instance.decoder),
      'decodeStream': VmProxy(identifier: 'decodeStream', externalInstancePropertyReader: (Utf8Codec instance) => instance.decodeStream),
      'encode': VmProxy(identifier: 'encode', externalInstancePropertyReader: (Utf8Codec instance) => instance.encode),
      'encoder': VmProxy(identifier: 'encoder', externalInstancePropertyReader: (Utf8Codec instance) => instance.encoder),
      'fuse': VmProxy(identifier: 'fuse', externalInstancePropertyReader: (Utf8Codec instance) => instance.fuse),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Utf8Codec instance) => instance.hashCode),
      'inverted': VmProxy(identifier: 'inverted', externalInstancePropertyReader: (Utf8Codec instance) => instance.inverted),
      'name': VmProxy(identifier: 'name', externalInstancePropertyReader: (Utf8Codec instance) => instance.name),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Utf8Codec instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Utf8Codec instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Utf8Codec instance) => instance.toString),
    },
  );

  ///class Utf8Decoder
  static final classUtf8Decoder = VmClass<Utf8Decoder>(
    identifier: 'Utf8Decoder',
    superclassNames: ['Object', 'StreamTransformer', 'StreamTransformerBase', 'Converter'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Utf8Decoder.new),
      'bind': VmProxy(identifier: 'bind', externalInstancePropertyReader: (Utf8Decoder instance) => instance.bind),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (Utf8Decoder instance) => instance.cast),
      'convert': VmProxy(identifier: 'convert', externalInstancePropertyReader: (Utf8Decoder instance) => instance.convert),
      'fuse': VmProxy(identifier: 'fuse', externalInstancePropertyReader: (Utf8Decoder instance) => instance.fuse),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Utf8Decoder instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Utf8Decoder instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Utf8Decoder instance) => instance.runtimeType),
      'startChunkedConversion': VmProxy(identifier: 'startChunkedConversion', externalInstancePropertyReader: (Utf8Decoder instance) => instance.startChunkedConversion),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Utf8Decoder instance) => instance.toString),
    },
  );

  ///class Utf8Encoder
  static final classUtf8Encoder = VmClass<Utf8Encoder>(
    identifier: 'Utf8Encoder',
    superclassNames: ['Object', 'StreamTransformer', 'StreamTransformerBase', 'Converter'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Utf8Encoder.new),
      'bind': VmProxy(identifier: 'bind', externalInstancePropertyReader: (Utf8Encoder instance) => instance.bind),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (Utf8Encoder instance) => instance.cast),
      'convert': VmProxy(identifier: 'convert', externalInstancePropertyReader: (Utf8Encoder instance) => instance.convert),
      'fuse': VmProxy(identifier: 'fuse', externalInstancePropertyReader: (Utf8Encoder instance) => instance.fuse),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Utf8Encoder instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Utf8Encoder instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Utf8Encoder instance) => instance.runtimeType),
      'startChunkedConversion': VmProxy(identifier: 'startChunkedConversion', externalInstancePropertyReader: (Utf8Encoder instance) => instance.startChunkedConversion),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Utf8Encoder instance) => instance.toString),
    },
  );

  ///class WeakReference
  static final classWeakReference = VmClass<WeakReference>(
    identifier: 'WeakReference',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => WeakReference.new),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (WeakReference instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (WeakReference instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (WeakReference instance) => instance.runtimeType),
      'target': VmProxy(identifier: 'target', externalInstancePropertyReader: (WeakReference instance) => instance.target),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (WeakReference instance) => instance.toString),
    },
  );

  ///class WritePipe
  static final classWritePipe = VmClass<WritePipe>(
    identifier: 'WritePipe',
    superclassNames: ['Object', 'Sink', 'EventSink', 'StreamConsumer', 'StreamSink', 'StringSink', 'IOSink'],
    externalProxyMap: {
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (WritePipe instance) => instance.add),
      'addError': VmProxy(identifier: 'addError', externalInstancePropertyReader: (WritePipe instance) => instance.addError),
      'addStream': VmProxy(identifier: 'addStream', externalInstancePropertyReader: (WritePipe instance) => instance.addStream),
      'close': VmProxy(identifier: 'close', externalInstancePropertyReader: (WritePipe instance) => instance.close),
      'done': VmProxy(identifier: 'done', externalInstancePropertyReader: (WritePipe instance) => instance.done),
      'encoding': VmProxy(identifier: 'encoding', externalInstancePropertyReader: (WritePipe instance) => instance.encoding, externalInstancePropertyWriter: (WritePipe instance, value) => instance.encoding = value),
      'flush': VmProxy(identifier: 'flush', externalInstancePropertyReader: (WritePipe instance) => instance.flush),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (WritePipe instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (WritePipe instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (WritePipe instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (WritePipe instance) => instance.toString),
      'write': VmProxy(identifier: 'write', externalInstancePropertyReader: (WritePipe instance) => instance.write),
      'writeAll': VmProxy(identifier: 'writeAll', externalInstancePropertyReader: (WritePipe instance) => instance.writeAll),
      'writeCharCode': VmProxy(identifier: 'writeCharCode', externalInstancePropertyReader: (WritePipe instance) => instance.writeCharCode),
      'writeln': VmProxy(identifier: 'writeln', externalInstancePropertyReader: (WritePipe instance) => instance.writeln),
    },
  );

  ///class X509Certificate
  static final classX509Certificate = VmClass<X509Certificate>(
    identifier: 'X509Certificate',
    superclassNames: ['Object'],
    externalProxyMap: {
      'der': VmProxy(identifier: 'der', externalInstancePropertyReader: (X509Certificate instance) => instance.der),
      'endValidity': VmProxy(identifier: 'endValidity', externalInstancePropertyReader: (X509Certificate instance) => instance.endValidity),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (X509Certificate instance) => instance.hashCode),
      'issuer': VmProxy(identifier: 'issuer', externalInstancePropertyReader: (X509Certificate instance) => instance.issuer),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (X509Certificate instance) => instance.noSuchMethod),
      'pem': VmProxy(identifier: 'pem', externalInstancePropertyReader: (X509Certificate instance) => instance.pem),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (X509Certificate instance) => instance.runtimeType),
      'sha1': VmProxy(identifier: 'sha1', externalInstancePropertyReader: (X509Certificate instance) => instance.sha1),
      'startValidity': VmProxy(identifier: 'startValidity', externalInstancePropertyReader: (X509Certificate instance) => instance.startValidity),
      'subject': VmProxy(identifier: 'subject', externalInstancePropertyReader: (X509Certificate instance) => instance.subject),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (X509Certificate instance) => instance.toString),
    },
  );

  ///class ZLibCodec
  static final classZLibCodec = VmClass<ZLibCodec>(
    identifier: 'ZLibCodec',
    superclassNames: ['Object', 'Codec'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZLibCodec.new),
      'decode': VmProxy(identifier: 'decode', externalInstancePropertyReader: (ZLibCodec instance) => instance.decode),
      'decoder': VmProxy(identifier: 'decoder', externalInstancePropertyReader: (ZLibCodec instance) => instance.decoder),
      'dictionary': VmProxy(identifier: 'dictionary', externalInstancePropertyReader: (ZLibCodec instance) => instance.dictionary),
      'encode': VmProxy(identifier: 'encode', externalInstancePropertyReader: (ZLibCodec instance) => instance.encode),
      'encoder': VmProxy(identifier: 'encoder', externalInstancePropertyReader: (ZLibCodec instance) => instance.encoder),
      'fuse': VmProxy(identifier: 'fuse', externalInstancePropertyReader: (ZLibCodec instance) => instance.fuse),
      'gzip': VmProxy(identifier: 'gzip', externalInstancePropertyReader: (ZLibCodec instance) => instance.gzip),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZLibCodec instance) => instance.hashCode),
      'inverted': VmProxy(identifier: 'inverted', externalInstancePropertyReader: (ZLibCodec instance) => instance.inverted),
      'level': VmProxy(identifier: 'level', externalInstancePropertyReader: (ZLibCodec instance) => instance.level),
      'memLevel': VmProxy(identifier: 'memLevel', externalInstancePropertyReader: (ZLibCodec instance) => instance.memLevel),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZLibCodec instance) => instance.noSuchMethod),
      'raw': VmProxy(identifier: 'raw', externalInstancePropertyReader: (ZLibCodec instance) => instance.raw),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZLibCodec instance) => instance.runtimeType),
      'strategy': VmProxy(identifier: 'strategy', externalInstancePropertyReader: (ZLibCodec instance) => instance.strategy),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZLibCodec instance) => instance.toString),
      'windowBits': VmProxy(identifier: 'windowBits', externalInstancePropertyReader: (ZLibCodec instance) => instance.windowBits),
    },
  );

  ///class ZLibDecoder
  static final classZLibDecoder = VmClass<ZLibDecoder>(
    identifier: 'ZLibDecoder',
    superclassNames: ['Object', 'StreamTransformer', 'StreamTransformerBase', 'Converter'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZLibDecoder.new),
      'bind': VmProxy(identifier: 'bind', externalInstancePropertyReader: (ZLibDecoder instance) => instance.bind),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (ZLibDecoder instance) => instance.cast),
      'convert': VmProxy(identifier: 'convert', externalInstancePropertyReader: (ZLibDecoder instance) => instance.convert),
      'dictionary': VmProxy(identifier: 'dictionary', externalInstancePropertyReader: (ZLibDecoder instance) => instance.dictionary),
      'fuse': VmProxy(identifier: 'fuse', externalInstancePropertyReader: (ZLibDecoder instance) => instance.fuse),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZLibDecoder instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZLibDecoder instance) => instance.noSuchMethod),
      'raw': VmProxy(identifier: 'raw', externalInstancePropertyReader: (ZLibDecoder instance) => instance.raw),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZLibDecoder instance) => instance.runtimeType),
      'startChunkedConversion': VmProxy(identifier: 'startChunkedConversion', externalInstancePropertyReader: (ZLibDecoder instance) => instance.startChunkedConversion),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZLibDecoder instance) => instance.toString),
      'windowBits': VmProxy(identifier: 'windowBits', externalInstancePropertyReader: (ZLibDecoder instance) => instance.windowBits),
    },
  );

  ///class ZLibEncoder
  static final classZLibEncoder = VmClass<ZLibEncoder>(
    identifier: 'ZLibEncoder',
    superclassNames: ['Object', 'StreamTransformer', 'StreamTransformerBase', 'Converter'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZLibEncoder.new),
      'bind': VmProxy(identifier: 'bind', externalInstancePropertyReader: (ZLibEncoder instance) => instance.bind),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (ZLibEncoder instance) => instance.cast),
      'convert': VmProxy(identifier: 'convert', externalInstancePropertyReader: (ZLibEncoder instance) => instance.convert),
      'dictionary': VmProxy(identifier: 'dictionary', externalInstancePropertyReader: (ZLibEncoder instance) => instance.dictionary),
      'fuse': VmProxy(identifier: 'fuse', externalInstancePropertyReader: (ZLibEncoder instance) => instance.fuse),
      'gzip': VmProxy(identifier: 'gzip', externalInstancePropertyReader: (ZLibEncoder instance) => instance.gzip),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZLibEncoder instance) => instance.hashCode),
      'level': VmProxy(identifier: 'level', externalInstancePropertyReader: (ZLibEncoder instance) => instance.level),
      'memLevel': VmProxy(identifier: 'memLevel', externalInstancePropertyReader: (ZLibEncoder instance) => instance.memLevel),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZLibEncoder instance) => instance.noSuchMethod),
      'raw': VmProxy(identifier: 'raw', externalInstancePropertyReader: (ZLibEncoder instance) => instance.raw),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZLibEncoder instance) => instance.runtimeType),
      'startChunkedConversion': VmProxy(identifier: 'startChunkedConversion', externalInstancePropertyReader: (ZLibEncoder instance) => instance.startChunkedConversion),
      'strategy': VmProxy(identifier: 'strategy', externalInstancePropertyReader: (ZLibEncoder instance) => instance.strategy),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZLibEncoder instance) => instance.toString),
      'windowBits': VmProxy(identifier: 'windowBits', externalInstancePropertyReader: (ZLibEncoder instance) => instance.windowBits),
    },
  );

  ///class ZLibOption
  static final classZLibOption = VmClass<ZLibOption>(
    identifier: 'ZLibOption',
    superclassNames: ['Object'],
    externalProxyMap: {
      'defaultLevel': VmProxy(identifier: 'defaultLevel', externalStaticPropertyReader: () => ZLibOption.defaultLevel),
      'defaultMemLevel': VmProxy(identifier: 'defaultMemLevel', externalStaticPropertyReader: () => ZLibOption.defaultMemLevel),
      'defaultWindowBits': VmProxy(identifier: 'defaultWindowBits', externalStaticPropertyReader: () => ZLibOption.defaultWindowBits),
      'maxLevel': VmProxy(identifier: 'maxLevel', externalStaticPropertyReader: () => ZLibOption.maxLevel),
      'maxMemLevel': VmProxy(identifier: 'maxMemLevel', externalStaticPropertyReader: () => ZLibOption.maxMemLevel),
      'maxWindowBits': VmProxy(identifier: 'maxWindowBits', externalStaticPropertyReader: () => ZLibOption.maxWindowBits),
      'minLevel': VmProxy(identifier: 'minLevel', externalStaticPropertyReader: () => ZLibOption.minLevel),
      'minMemLevel': VmProxy(identifier: 'minMemLevel', externalStaticPropertyReader: () => ZLibOption.minMemLevel),
      'minWindowBits': VmProxy(identifier: 'minWindowBits', externalStaticPropertyReader: () => ZLibOption.minWindowBits),
      'strategyDefault': VmProxy(identifier: 'strategyDefault', externalStaticPropertyReader: () => ZLibOption.strategyDefault),
      'strategyFiltered': VmProxy(identifier: 'strategyFiltered', externalStaticPropertyReader: () => ZLibOption.strategyFiltered),
      'strategyFixed': VmProxy(identifier: 'strategyFixed', externalStaticPropertyReader: () => ZLibOption.strategyFixed),
      'strategyHuffmanOnly': VmProxy(identifier: 'strategyHuffmanOnly', externalStaticPropertyReader: () => ZLibOption.strategyHuffmanOnly),
      'strategyRle': VmProxy(identifier: 'strategyRle', externalStaticPropertyReader: () => ZLibOption.strategyRle),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZLibOption instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZLibOption instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZLibOption instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZLibOption instance) => instance.toString),
    },
  );

  ///class Zone
  static final classZone = VmClass<Zone>(
    identifier: 'Zone',
    superclassNames: ['Object'],
    externalProxyMap: {
      'current': VmProxy(identifier: 'current', externalStaticPropertyReader: () => Zone.current),
      'root': VmProxy(identifier: 'root', externalStaticPropertyReader: () => Zone.root),
      'bindBinaryCallback': VmProxy(identifier: 'bindBinaryCallback', externalInstancePropertyReader: (Zone instance) => instance.bindBinaryCallback, externalInstanceFunctionCaller: (Zone instance, a0) => instance.bindBinaryCallback((b0, b1) => a0(b0, b1))),
      'bindBinaryCallbackGuarded': VmProxy(identifier: 'bindBinaryCallbackGuarded', externalInstancePropertyReader: (Zone instance) => instance.bindBinaryCallbackGuarded, externalInstanceFunctionCaller: (Zone instance, a0) => instance.bindBinaryCallbackGuarded((b0, b1) => a0(b0, b1))),
      'bindCallback': VmProxy(identifier: 'bindCallback', externalInstancePropertyReader: (Zone instance) => instance.bindCallback, externalInstanceFunctionCaller: (Zone instance, a0) => instance.bindCallback(() => a0())),
      'bindCallbackGuarded': VmProxy(identifier: 'bindCallbackGuarded', externalInstancePropertyReader: (Zone instance) => instance.bindCallbackGuarded),
      'bindUnaryCallback': VmProxy(identifier: 'bindUnaryCallback', externalInstancePropertyReader: (Zone instance) => instance.bindUnaryCallback, externalInstanceFunctionCaller: (Zone instance, a0) => instance.bindUnaryCallback((b0) => a0(b0))),
      'bindUnaryCallbackGuarded': VmProxy(identifier: 'bindUnaryCallbackGuarded', externalInstancePropertyReader: (Zone instance) => instance.bindUnaryCallbackGuarded, externalInstanceFunctionCaller: (Zone instance, a0) => instance.bindUnaryCallbackGuarded((b0) => a0(b0))),
      'createPeriodicTimer': VmProxy(identifier: 'createPeriodicTimer', externalInstancePropertyReader: (Zone instance) => instance.createPeriodicTimer, externalInstanceFunctionCaller: (Zone instance, a0, a1) => instance.createPeriodicTimer(a0, (b0) => a1(b0))),
      'createTimer': VmProxy(identifier: 'createTimer', externalInstancePropertyReader: (Zone instance) => instance.createTimer),
      'errorCallback': VmProxy(identifier: 'errorCallback', externalInstancePropertyReader: (Zone instance) => instance.errorCallback),
      'errorZone': VmProxy(identifier: 'errorZone', externalInstancePropertyReader: (Zone instance) => instance.errorZone),
      'fork': VmProxy(identifier: 'fork', externalInstancePropertyReader: (Zone instance) => instance.fork),
      'handleUncaughtError': VmProxy(identifier: 'handleUncaughtError', externalInstancePropertyReader: (Zone instance) => instance.handleUncaughtError),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (Zone instance) => instance.hashCode),
      'inSameErrorZone': VmProxy(identifier: 'inSameErrorZone', externalInstancePropertyReader: (Zone instance) => instance.inSameErrorZone),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (Zone instance) => instance.noSuchMethod),
      'parent': VmProxy(identifier: 'parent', externalInstancePropertyReader: (Zone instance) => instance.parent),
      'print': VmProxy(identifier: 'print', externalInstancePropertyReader: (Zone instance) => instance.print),
      'registerBinaryCallback': VmProxy(identifier: 'registerBinaryCallback', externalInstancePropertyReader: (Zone instance) => instance.registerBinaryCallback, externalInstanceFunctionCaller: (Zone instance, a0) => instance.registerBinaryCallback((b0, b1) => a0(b0, b1))),
      'registerCallback': VmProxy(identifier: 'registerCallback', externalInstancePropertyReader: (Zone instance) => instance.registerCallback, externalInstanceFunctionCaller: (Zone instance, a0) => instance.registerCallback(() => a0())),
      'registerUnaryCallback': VmProxy(identifier: 'registerUnaryCallback', externalInstancePropertyReader: (Zone instance) => instance.registerUnaryCallback, externalInstanceFunctionCaller: (Zone instance, a0) => instance.registerUnaryCallback((b0) => a0(b0))),
      'run': VmProxy(identifier: 'run', externalInstancePropertyReader: (Zone instance) => instance.run, externalInstanceFunctionCaller: (Zone instance, a0) => instance.run(() => a0())),
      'runBinary': VmProxy(identifier: 'runBinary', externalInstancePropertyReader: (Zone instance) => instance.runBinary, externalInstanceFunctionCaller: (Zone instance, a0, a1, a2) => instance.runBinary((b0, b1) => a0(b0, b1), a1, a2)),
      'runBinaryGuarded': VmProxy(identifier: 'runBinaryGuarded', externalInstancePropertyReader: (Zone instance) => instance.runBinaryGuarded, externalInstanceFunctionCaller: (Zone instance, a0, a1, a2) => instance.runBinaryGuarded((b0, b1) => a0(b0, b1), a1, a2)),
      'runGuarded': VmProxy(identifier: 'runGuarded', externalInstancePropertyReader: (Zone instance) => instance.runGuarded),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (Zone instance) => instance.runtimeType),
      'runUnary': VmProxy(identifier: 'runUnary', externalInstancePropertyReader: (Zone instance) => instance.runUnary, externalInstanceFunctionCaller: (Zone instance, a0, a1) => instance.runUnary((b0) => a0(b0), a1)),
      'runUnaryGuarded': VmProxy(identifier: 'runUnaryGuarded', externalInstancePropertyReader: (Zone instance) => instance.runUnaryGuarded, externalInstanceFunctionCaller: (Zone instance, a0, a1) => instance.runUnaryGuarded((b0) => a0(b0), a1)),
      'scheduleMicrotask': VmProxy(identifier: 'scheduleMicrotask', externalInstancePropertyReader: (Zone instance) => instance.scheduleMicrotask),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (Zone instance) => instance.toString),
    },
  );

  ///class ZoneDelegate
  static final classZoneDelegate = VmClass<ZoneDelegate>(
    identifier: 'ZoneDelegate',
    superclassNames: ['Object'],
    externalProxyMap: {
      'createPeriodicTimer': VmProxy(identifier: 'createPeriodicTimer', externalInstancePropertyReader: (ZoneDelegate instance) => instance.createPeriodicTimer, externalInstanceFunctionCaller: (ZoneDelegate instance, a0, a1, a2) => instance.createPeriodicTimer(a0, a1, (b0) => a2(b0))),
      'createTimer': VmProxy(identifier: 'createTimer', externalInstancePropertyReader: (ZoneDelegate instance) => instance.createTimer),
      'errorCallback': VmProxy(identifier: 'errorCallback', externalInstancePropertyReader: (ZoneDelegate instance) => instance.errorCallback),
      'fork': VmProxy(identifier: 'fork', externalInstancePropertyReader: (ZoneDelegate instance) => instance.fork),
      'handleUncaughtError': VmProxy(identifier: 'handleUncaughtError', externalInstancePropertyReader: (ZoneDelegate instance) => instance.handleUncaughtError),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZoneDelegate instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZoneDelegate instance) => instance.noSuchMethod),
      'print': VmProxy(identifier: 'print', externalInstancePropertyReader: (ZoneDelegate instance) => instance.print),
      'registerBinaryCallback': VmProxy(identifier: 'registerBinaryCallback', externalInstancePropertyReader: (ZoneDelegate instance) => instance.registerBinaryCallback, externalInstanceFunctionCaller: (ZoneDelegate instance, a0, a1) => instance.registerBinaryCallback(a0, (b0, b1) => a1(b0, b1))),
      'registerCallback': VmProxy(identifier: 'registerCallback', externalInstancePropertyReader: (ZoneDelegate instance) => instance.registerCallback, externalInstanceFunctionCaller: (ZoneDelegate instance, a0, a1) => instance.registerCallback(a0, () => a1())),
      'registerUnaryCallback': VmProxy(identifier: 'registerUnaryCallback', externalInstancePropertyReader: (ZoneDelegate instance) => instance.registerUnaryCallback, externalInstanceFunctionCaller: (ZoneDelegate instance, a0, a1) => instance.registerUnaryCallback(a0, (b0) => a1(b0))),
      'run': VmProxy(identifier: 'run', externalInstancePropertyReader: (ZoneDelegate instance) => instance.run, externalInstanceFunctionCaller: (ZoneDelegate instance, a0, a1) => instance.run(a0, () => a1())),
      'runBinary': VmProxy(identifier: 'runBinary', externalInstancePropertyReader: (ZoneDelegate instance) => instance.runBinary, externalInstanceFunctionCaller: (ZoneDelegate instance, a0, a1, a2, a3) => instance.runBinary(a0, (b0, b1) => a1(b0, b1), a2, a3)),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZoneDelegate instance) => instance.runtimeType),
      'runUnary': VmProxy(identifier: 'runUnary', externalInstancePropertyReader: (ZoneDelegate instance) => instance.runUnary, externalInstanceFunctionCaller: (ZoneDelegate instance, a0, a1, a2) => instance.runUnary(a0, (b0) => a1(b0), a2)),
      'scheduleMicrotask': VmProxy(identifier: 'scheduleMicrotask', externalInstancePropertyReader: (ZoneDelegate instance) => instance.scheduleMicrotask),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZoneDelegate instance) => instance.toString),
    },
  );

  ///class ZoneSpecification
  static final classZoneSpecification = VmClass<ZoneSpecification>(
    identifier: 'ZoneSpecification',
    superclassNames: ['Object'],
    externalProxyMap: {
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => ZoneSpecification.new, externalStaticFunctionCaller: ({handleUncaughtError, run, runUnary, runBinary, registerCallback, registerUnaryCallback, registerBinaryCallback, errorCallback, scheduleMicrotask, createTimer, createPeriodicTimer, print, fork}) => ZoneSpecification.new(handleUncaughtError: handleUncaughtError == null ? null : (b0, b1, b2, b3, b4) => handleUncaughtError(b0, b1, b2, b3, b4), run: run == null ? null : <R>(b0, b1, b2, b3) => run(b0, b1, b2, b3), runUnary: runUnary == null ? null : <R, T>(b0, b1, b2, b3, b4) => runUnary(b0, b1, b2, b3, b4), runBinary: runBinary == null ? null : <R, T1, T2>(b0, b1, b2, b3, b4, b5) => runBinary(b0, b1, b2, b3, b4, b5), registerCallback: registerCallback == null ? null : <R>(b0, b1, b2, b3) => registerCallback(b0, b1, b2, b3), registerUnaryCallback: registerUnaryCallback == null ? null : <R, T>(b0, b1, b2, b3) => registerUnaryCallback(b0, b1, b2, b3), registerBinaryCallback: registerBinaryCallback == null ? null : <R, T1, T2>(b0, b1, b2, b3) => registerBinaryCallback(b0, b1, b2, b3), errorCallback: errorCallback == null ? null : (b0, b1, b2, b3, b4) => errorCallback(b0, b1, b2, b3, b4), scheduleMicrotask: scheduleMicrotask == null ? null : (b0, b1, b2, b3) => scheduleMicrotask(b0, b1, b2, b3), createTimer: createTimer == null ? null : (b0, b1, b2, b3, b4) => createTimer(b0, b1, b2, b3, b4), createPeriodicTimer: createPeriodicTimer == null ? null : (b0, b1, b2, b3, b4) => createPeriodicTimer(b0, b1, b2, b3, b4), print: print == null ? null : (b0, b1, b2, b3) => print(b0, b1, b2, b3), fork: fork == null ? null : (b0, b1, b2, b3, b4) => fork(b0, b1, b2, b3, b4))),
      'from': VmProxy(identifier: 'from', externalStaticPropertyReader: () => ZoneSpecification.from, externalStaticFunctionCaller: (a0, {handleUncaughtError, run, runUnary, runBinary, registerCallback, registerUnaryCallback, registerBinaryCallback, errorCallback, scheduleMicrotask, createTimer, createPeriodicTimer, print, fork}) => ZoneSpecification.from(a0, handleUncaughtError: handleUncaughtError == null ? null : (b0, b1, b2, b3, b4) => handleUncaughtError(b0, b1, b2, b3, b4), run: run == null ? null : <R>(b0, b1, b2, b3) => run(b0, b1, b2, b3), runUnary: runUnary == null ? null : <R, T>(b0, b1, b2, b3, b4) => runUnary(b0, b1, b2, b3, b4), runBinary: runBinary == null ? null : <R, T1, T2>(b0, b1, b2, b3, b4, b5) => runBinary(b0, b1, b2, b3, b4, b5), registerCallback: registerCallback == null ? null : <R>(b0, b1, b2, b3) => registerCallback(b0, b1, b2, b3), registerUnaryCallback: registerUnaryCallback == null ? null : <R, T>(b0, b1, b2, b3) => registerUnaryCallback(b0, b1, b2, b3), registerBinaryCallback: registerBinaryCallback == null ? null : <R, T1, T2>(b0, b1, b2, b3) => registerBinaryCallback(b0, b1, b2, b3), errorCallback: errorCallback == null ? null : (b0, b1, b2, b3, b4) => errorCallback(b0, b1, b2, b3, b4), scheduleMicrotask: scheduleMicrotask == null ? null : (b0, b1, b2, b3) => scheduleMicrotask(b0, b1, b2, b3), createTimer: createTimer == null ? null : (b0, b1, b2, b3, b4) => createTimer(b0, b1, b2, b3, b4), createPeriodicTimer: createPeriodicTimer == null ? null : (b0, b1, b2, b3, b4) => createPeriodicTimer(b0, b1, b2, b3, b4), print: print == null ? null : (b0, b1, b2, b3) => print(b0, b1, b2, b3), fork: fork == null ? null : (b0, b1, b2, b3, b4) => fork(b0, b1, b2, b3, b4))),
      'createPeriodicTimer': VmProxy(identifier: 'createPeriodicTimer', externalInstancePropertyReader: (ZoneSpecification instance) => instance.createPeriodicTimer),
      'createTimer': VmProxy(identifier: 'createTimer', externalInstancePropertyReader: (ZoneSpecification instance) => instance.createTimer),
      'errorCallback': VmProxy(identifier: 'errorCallback', externalInstancePropertyReader: (ZoneSpecification instance) => instance.errorCallback),
      'fork': VmProxy(identifier: 'fork', externalInstancePropertyReader: (ZoneSpecification instance) => instance.fork),
      'handleUncaughtError': VmProxy(identifier: 'handleUncaughtError', externalInstancePropertyReader: (ZoneSpecification instance) => instance.handleUncaughtError),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (ZoneSpecification instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (ZoneSpecification instance) => instance.noSuchMethod),
      'print': VmProxy(identifier: 'print', externalInstancePropertyReader: (ZoneSpecification instance) => instance.print),
      'registerBinaryCallback': VmProxy(identifier: 'registerBinaryCallback', externalInstancePropertyReader: (ZoneSpecification instance) => instance.registerBinaryCallback),
      'registerCallback': VmProxy(identifier: 'registerCallback', externalInstancePropertyReader: (ZoneSpecification instance) => instance.registerCallback),
      'registerUnaryCallback': VmProxy(identifier: 'registerUnaryCallback', externalInstancePropertyReader: (ZoneSpecification instance) => instance.registerUnaryCallback),
      'run': VmProxy(identifier: 'run', externalInstancePropertyReader: (ZoneSpecification instance) => instance.run),
      'runBinary': VmProxy(identifier: 'runBinary', externalInstancePropertyReader: (ZoneSpecification instance) => instance.runBinary),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (ZoneSpecification instance) => instance.runtimeType),
      'runUnary': VmProxy(identifier: 'runUnary', externalInstancePropertyReader: (ZoneSpecification instance) => instance.runUnary),
      'scheduleMicrotask': VmProxy(identifier: 'scheduleMicrotask', externalInstancePropertyReader: (ZoneSpecification instance) => instance.scheduleMicrotask),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (ZoneSpecification instance) => instance.toString),
    },
  );

  ///all class list
  static final libraryClassList = <VmClass>[
    classArgumentError,
    classAsciiCodec,
    classAsciiDecoder,
    classAsciiEncoder,
    classAssertionError,
    classAsyncError,
    classBase64Codec,
    classBase64Decoder,
    classBase64Encoder,
    classBigInt,
    classBool,
    classByteBuffer,
    classByteConversionSink,
    classByteConversionSinkBase,
    classByteData,
    classCapability,
    classCertificateException,
    classChunkedConversionSink,
    classClosableStringSink,
    classCodec,
    classComparable,
    classCompleter,
    classConcurrentModificationError,
    classConnectionTask,
    classConverter,
    classDatagram,
    classDateTime,
    classDeferredLoadException,
    classDeprecated,
    classDirectory,
    classDouble,
    classDoubleLinkedQueue,
    classDuration,
    classEncoding,
    classEndian,
    classEnum,
    classError,
    classEventSink,
    classException,
    classExpando,
    classFile,
    classFileLock,
    classFileMode,
    classFileStat,
    classFileSystemCreateEvent,
    classFileSystemDeleteEvent,
    classFileSystemEntity,
    classFileSystemEntityType,
    classFileSystemEvent,
    classFileSystemException,
    classFileSystemModifyEvent,
    classFileSystemMoveEvent,
    classFinalizer,
    classFloat32List,
    classFloat32x4,
    classFloat32x4List,
    classFloat64List,
    classFloat64x2,
    classFloat64x2List,
    classFormatException,
    classFunction,
    classFuture,
    classFutureOr,
    classGZipCodec,
    classHandshakeException,
    classHashMap,
    classHashSet,
    classHasNextIterator,
    classHtmlEscape,
    classHtmlEscapeMode,
    classIndexError,
    classInt,
    classInt16List,
    classInt32List,
    classInt32x4,
    classInt32x4List,
    classInt64List,
    classInt8List,
    classIntegerDivisionByZeroException,
    classInternetAddress,
    classInternetAddressType,
    classInvocation,
    classIOException,
    classIOOverrides,
    classIOSink,
    classIsolate,
    classIsolateSpawnException,
    classIterable,
    classIterableBase,
    classIterableMixin,
    classIterator,
    classJsonCodec,
    classJsonCyclicError,
    classJsonDecoder,
    classJsonEncoder,
    classJsonUnsupportedObjectError,
    classJsonUtf8Encoder,
    classLatin1Codec,
    classLatin1Decoder,
    classLatin1Encoder,
    classLineSplitter,
    classLink,
    classLinkedHashMap,
    classLinkedHashSet,
    classLinkedList,
    classLinkedListEntry,
    classList,
    classListBase,
    classListMixin,
    classListQueue,
    classMap,
    classMapBase,
    classMapEntry,
    classMapMixin,
    classMapView,
    classMatch,
    classMultiStreamController,
    classMutableRectangle,
    classNetworkInterface,
    classNoSuchMethodError,
    classNum,
    classObject,
    classOSError,
    classOutOfMemoryError,
    classParallelWaitError,
    classPathAccessException,
    classPathExistsException,
    classPathNotFoundException,
    classPattern,
    classPipe,
    classPlatform,
    classPoint,
    classPragma,
    classProcess,
    classProcessException,
    classProcessInfo,
    classProcessResult,
    classProcessSignal,
    classProcessStartMode,
    classQueue,
    classRandom,
    classRandomAccessFile,
    classRangeError,
    classRawDatagramSocket,
    classRawReceivePort,
    classRawSecureServerSocket,
    classRawSecureSocket,
    classRawServerSocket,
    classRawSocket,
    classRawSocketEvent,
    classRawSocketOption,
    classRawSynchronousSocket,
    classRawZLibFilter,
    classReadPipe,
    classReceivePort,
    classRecord,
    classRectangle,
    classRegExp,
    classRegExpMatch,
    classRemoteError,
    classResourceHandle,
    classRuneIterator,
    classRunes,
    classSecureServerSocket,
    classSecureSocket,
    classSecurityContext,
    classSendPort,
    classServerSocket,
    classSet,
    classSetBase,
    classSetMixin,
    classSignalException,
    classSink,
    classSocket,
    classSocketControlMessage,
    classSocketDirection,
    classSocketException,
    classSocketMessage,
    classSocketOption,
    classSplayTreeMap,
    classSplayTreeSet,
    classStackOverflowError,
    classStackTrace,
    classStateError,
    classStdin,
    classStdinException,
    classStdioType,
    classStdout,
    classStdoutException,
    classStopwatch,
    classStream,
    classStreamConsumer,
    classStreamController,
    classStreamIterator,
    classStreamSink,
    classStreamSubscription,
    classStreamTransformer,
    classStreamTransformerBase,
    classStreamView,
    classString,
    classStringBuffer,
    classStringConversionSink,
    classStringConversionSinkBase,
    classStringConversionSinkMixin,
    classStringSink,
    classSymbol,
    classSynchronousStreamController,
    classSystemEncoding,
    classTimeoutException,
    classTimer,
    classTlsException,
    classTransferableTypedData,
    classType,
    classTypedData,
    classTypeError,
    classUint16List,
    classUint32List,
    classUint64List,
    classUint8ClampedList,
    classUint8List,
    classUnimplementedError,
    classUnmodifiableByteBufferView,
    classUnmodifiableByteDataView,
    classUnmodifiableFloat32ListView,
    classUnmodifiableFloat32x4ListView,
    classUnmodifiableFloat64ListView,
    classUnmodifiableFloat64x2ListView,
    classUnmodifiableInt16ListView,
    classUnmodifiableInt32ListView,
    classUnmodifiableInt32x4ListView,
    classUnmodifiableInt64ListView,
    classUnmodifiableInt8ListView,
    classUnmodifiableListView,
    classUnmodifiableMapBase,
    classUnmodifiableMapView,
    classUnmodifiableSetView,
    classUnmodifiableUint16ListView,
    classUnmodifiableUint32ListView,
    classUnmodifiableUint64ListView,
    classUnmodifiableUint8ClampedListView,
    classUnmodifiableUint8ListView,
    classUnsupportedError,
    classUri,
    classUriData,
    classUtf8Codec,
    classUtf8Decoder,
    classUtf8Encoder,
    classWeakReference,
    classWritePipe,
    classX509Certificate,
    classZLibCodec,
    classZLibDecoder,
    classZLibEncoder,
    classZLibOption,
    classZone,
    classZoneDelegate,
    classZoneSpecification,
  ];

  ///all proxy list
  static final libraryProxyList = <VmProxy<void>>[
    VmProxy(identifier: 'acos', externalStaticPropertyReader: () => acos),
    VmProxy(identifier: 'ascii', externalStaticPropertyReader: () => ascii),
    VmProxy(identifier: 'asin', externalStaticPropertyReader: () => asin),
    VmProxy(identifier: 'atan', externalStaticPropertyReader: () => atan),
    VmProxy(identifier: 'atan2', externalStaticPropertyReader: () => atan2),
    VmProxy(identifier: 'base64', externalStaticPropertyReader: () => base64),
    VmProxy(identifier: 'base64Decode', externalStaticPropertyReader: () => base64Decode),
    VmProxy(identifier: 'base64Encode', externalStaticPropertyReader: () => base64Encode),
    VmProxy(identifier: 'base64Url', externalStaticPropertyReader: () => base64Url),
    VmProxy(identifier: 'base64UrlEncode', externalStaticPropertyReader: () => base64UrlEncode),
    VmProxy(identifier: 'cos', externalStaticPropertyReader: () => cos),
    VmProxy(identifier: 'deprecated', externalStaticPropertyReader: () => deprecated),
    VmProxy(identifier: 'e', externalStaticPropertyReader: () => e),
    VmProxy(identifier: 'exit', externalStaticPropertyReader: () => exit),
    VmProxy(identifier: 'exitCode', externalStaticPropertyWriter: (value) => exitCode = value, externalStaticPropertyReader: () => exitCode),
    VmProxy(identifier: 'exp', externalStaticPropertyReader: () => exp),
    VmProxy(identifier: 'gzip', externalStaticPropertyReader: () => gzip),
    VmProxy(identifier: 'htmlEscape', externalStaticPropertyReader: () => htmlEscape),
    VmProxy(identifier: 'identical', externalStaticPropertyReader: () => identical),
    VmProxy(identifier: 'identityHashCode', externalStaticPropertyReader: () => identityHashCode),
    VmProxy(identifier: 'json', externalStaticPropertyReader: () => json),
    VmProxy(identifier: 'jsonDecode', externalStaticPropertyReader: () => jsonDecode, externalStaticFunctionCaller: (a0, {reviver}) => jsonDecode(a0, reviver: reviver == null ? null : (b0, b1) => reviver(b0, b1))),
    VmProxy(identifier: 'jsonEncode', externalStaticPropertyReader: () => jsonEncode, externalStaticFunctionCaller: (a0, {toEncodable}) => jsonEncode(a0, toEncodable: toEncodable == null ? null : (b0) => toEncodable(b0))),
    VmProxy(identifier: 'latin1', externalStaticPropertyReader: () => latin1),
    VmProxy(identifier: 'ln10', externalStaticPropertyReader: () => ln10),
    VmProxy(identifier: 'ln2', externalStaticPropertyReader: () => ln2),
    VmProxy(identifier: 'log', externalStaticPropertyReader: () => log),
    VmProxy(identifier: 'log10e', externalStaticPropertyReader: () => log10e),
    VmProxy(identifier: 'log2e', externalStaticPropertyReader: () => log2e),
    VmProxy(identifier: 'max', externalStaticPropertyReader: () => max),
    VmProxy(identifier: 'min', externalStaticPropertyReader: () => min),
    VmProxy(identifier: 'override', externalStaticPropertyReader: () => override),
    VmProxy(identifier: 'pi', externalStaticPropertyReader: () => pi),
    VmProxy(identifier: 'pid', externalStaticPropertyReader: () => pid),
    VmProxy(identifier: 'pow', externalStaticPropertyReader: () => pow),
    VmProxy(identifier: 'print', externalStaticPropertyReader: () => print),
    VmProxy(identifier: 'runZoned', externalStaticPropertyReader: () => runZoned, externalStaticFunctionCaller: (a0, {zoneValues, zoneSpecification, onError}) => runZoned(() => a0(), zoneValues: zoneValues, zoneSpecification: zoneSpecification, onError: onError)),
    VmProxy(identifier: 'runZonedGuarded', externalStaticPropertyReader: () => runZonedGuarded, externalStaticFunctionCaller: (a0, a1, {zoneValues, zoneSpecification}) => runZonedGuarded(() => a0(), (b0, b1) => a1(b0, b1), zoneValues: zoneValues, zoneSpecification: zoneSpecification)),
    VmProxy(identifier: 'scheduleMicrotask', externalStaticPropertyReader: () => scheduleMicrotask),
    VmProxy(identifier: 'sin', externalStaticPropertyReader: () => sin),
    VmProxy(identifier: 'sleep', externalStaticPropertyReader: () => sleep),
    VmProxy(identifier: 'sqrt', externalStaticPropertyReader: () => sqrt),
    VmProxy(identifier: 'sqrt1_2', externalStaticPropertyReader: () => sqrt1_2),
    VmProxy(identifier: 'sqrt2', externalStaticPropertyReader: () => sqrt2),
    VmProxy(identifier: 'stderr', externalStaticPropertyReader: () => stderr),
    VmProxy(identifier: 'stdin', externalStaticPropertyReader: () => stdin),
    VmProxy(identifier: 'stdioType', externalStaticPropertyReader: () => stdioType),
    VmProxy(identifier: 'stdout', externalStaticPropertyReader: () => stdout),
    VmProxy(identifier: 'systemEncoding', externalStaticPropertyReader: () => systemEncoding),
    VmProxy(identifier: 'tan', externalStaticPropertyReader: () => tan),
    VmProxy(identifier: 'unawaited', externalStaticPropertyReader: () => unawaited),
    VmProxy(identifier: 'unicodeBomCharacterRune', externalStaticPropertyReader: () => unicodeBomCharacterRune),
    VmProxy(identifier: 'unicodeReplacementCharacterRune', externalStaticPropertyReader: () => unicodeReplacementCharacterRune),
    VmProxy(identifier: 'utf8', externalStaticPropertyReader: () => utf8),
    VmProxy(identifier: 'zlib', externalStaticPropertyReader: () => zlib),
  ];
}
