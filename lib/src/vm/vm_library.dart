import 'dart:math';

import 'vm_object.dart';

///
///Dart基本库
///
class VmLibrary {
  ///类型[int]
  static final classInt = VmClass<int>(
    identifier: 'int',
    externalProxyMap: {
      'fromEnvironment': VmProxy(identifier: 'fromEnvironment', externalStaticPropertyReader: () => int.fromEnvironment),
      'parse': VmProxy(identifier: 'parse', externalStaticPropertyReader: () => int.parse),
      'tryParse': VmProxy(identifier: 'tryParse', externalStaticPropertyReader: () => int.tryParse),
      'abs': VmProxy(identifier: 'abs', externalInstancePropertyReader: (instance) => instance.abs),
      'bitLength': VmProxy(identifier: 'bitLength', externalInstancePropertyReader: (instance) => instance.bitLength),
      'ceil': VmProxy(identifier: 'ceil', externalInstancePropertyReader: (instance) => instance.ceil),
      'ceilToDouble': VmProxy(identifier: 'ceilToDouble', externalInstancePropertyReader: (instance) => instance.ceilToDouble),
      'clamp': VmProxy(identifier: 'clamp', externalInstancePropertyReader: (instance) => instance.clamp),
      'compareTo': VmProxy(identifier: 'compareTo', externalInstancePropertyReader: (instance) => instance.compareTo),
      'floor': VmProxy(identifier: 'floor', externalInstancePropertyReader: (instance) => instance.floor),
      'floorToDouble': VmProxy(identifier: 'floorToDouble', externalInstancePropertyReader: (instance) => instance.floorToDouble),
      'gcd': VmProxy(identifier: 'gcd', externalInstancePropertyReader: (instance) => instance.gcd),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (instance) => instance.hashCode),
      'isEven': VmProxy(identifier: 'isEven', externalInstancePropertyReader: (instance) => instance.isEven),
      'isFinite': VmProxy(identifier: 'isFinite', externalInstancePropertyReader: (instance) => instance.isFinite),
      'isInfinite': VmProxy(identifier: 'isInfinite', externalInstancePropertyReader: (instance) => instance.isInfinite),
      'isNaN': VmProxy(identifier: 'isNaN', externalInstancePropertyReader: (instance) => instance.isNaN),
      'isNegative': VmProxy(identifier: 'isNegative', externalInstancePropertyReader: (instance) => instance.isNegative),
      'isOdd': VmProxy(identifier: 'isOdd', externalInstancePropertyReader: (instance) => instance.isOdd),
      'modInverse': VmProxy(identifier: 'modInverse', externalInstancePropertyReader: (instance) => instance.modInverse),
      'modPow': VmProxy(identifier: 'modPow', externalInstancePropertyReader: (instance) => instance.modPow),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (instance) => instance.noSuchMethod),
      'remainder': VmProxy(identifier: 'remainder', externalInstancePropertyReader: (instance) => instance.remainder),
      'round': VmProxy(identifier: 'round', externalInstancePropertyReader: (instance) => instance.round),
      'roundToDouble': VmProxy(identifier: 'roundToDouble', externalInstancePropertyReader: (instance) => instance.roundToDouble),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (instance) => instance.runtimeType),
      'sign': VmProxy(identifier: 'sign', externalInstancePropertyReader: (instance) => instance.sign),
      'toDouble': VmProxy(identifier: 'toDouble', externalInstancePropertyReader: (instance) => instance.toDouble),
      'toInt': VmProxy(identifier: 'toInt', externalInstancePropertyReader: (instance) => instance.toInt),
      'toRadixString': VmProxy(identifier: 'toRadixString', externalInstancePropertyReader: (instance) => instance.toRadixString),
      'toSigned': VmProxy(identifier: 'toSigned', externalInstancePropertyReader: (instance) => instance.toSigned),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (instance) => instance.toString),
      'toStringAsExponential': VmProxy(identifier: 'toStringAsExponential', externalInstancePropertyReader: (instance) => instance.toStringAsExponential),
      'toStringAsFixed': VmProxy(identifier: 'toStringAsFixed', externalInstancePropertyReader: (instance) => instance.toStringAsFixed),
      'toStringAsPrecision': VmProxy(identifier: 'toStringAsPrecision', externalInstancePropertyReader: (instance) => instance.toStringAsPrecision),
      'toUnsigned': VmProxy(identifier: 'toUnsigned', externalInstancePropertyReader: (instance) => instance.toUnsigned),
      'truncate': VmProxy(identifier: 'truncate', externalInstancePropertyReader: (instance) => instance.truncate),
      'truncateToDouble': VmProxy(identifier: 'truncateToDouble', externalInstancePropertyReader: (instance) => instance.truncateToDouble),
    },
  );

  ///类型[double]
  static final classDouble = VmClass<double>(
    identifier: 'double',
    externalProxyMap: {
      'infinity': VmProxy(identifier: 'infinity', externalStaticPropertyReader: () => double.infinity),
      'maxFinite': VmProxy(identifier: 'maxFinite', externalStaticPropertyReader: () => double.maxFinite),
      'minPositive': VmProxy(identifier: 'minPositive', externalStaticPropertyReader: () => double.minPositive),
      'nan': VmProxy(identifier: 'nan', externalStaticPropertyReader: () => double.nan),
      'negativeInfinity': VmProxy(identifier: 'negativeInfinity', externalStaticPropertyReader: () => double.negativeInfinity),
      'parse': VmProxy(identifier: 'parse', externalStaticPropertyReader: () => double.parse),
      'tryParse': VmProxy(identifier: 'tryParse', externalStaticPropertyReader: () => double.tryParse),
      'abs': VmProxy(identifier: 'abs', externalInstancePropertyReader: (instance) => instance.abs),
      'ceil': VmProxy(identifier: 'ceil', externalInstancePropertyReader: (instance) => instance.ceil),
      'ceilToDouble': VmProxy(identifier: 'ceilToDouble', externalInstancePropertyReader: (instance) => instance.ceilToDouble),
      'clamp': VmProxy(identifier: 'clamp', externalInstancePropertyReader: (instance) => instance.clamp),
      'compareTo': VmProxy(identifier: 'compareTo', externalInstancePropertyReader: (instance) => instance.compareTo),
      'floor': VmProxy(identifier: 'floor', externalInstancePropertyReader: (instance) => instance.floor),
      'floorToDouble': VmProxy(identifier: 'floorToDouble', externalInstancePropertyReader: (instance) => instance.floorToDouble),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (instance) => instance.hashCode),
      'isFinite': VmProxy(identifier: 'isFinite', externalInstancePropertyReader: (instance) => instance.isFinite),
      'isInfinite': VmProxy(identifier: 'isInfinite', externalInstancePropertyReader: (instance) => instance.isInfinite),
      'isNaN': VmProxy(identifier: 'isNaN', externalInstancePropertyReader: (instance) => instance.isNaN),
      'isNegative': VmProxy(identifier: 'isNegative', externalInstancePropertyReader: (instance) => instance.isNegative),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (instance) => instance.noSuchMethod),
      'remainder': VmProxy(identifier: 'remainder', externalInstancePropertyReader: (instance) => instance.remainder),
      'round': VmProxy(identifier: 'round', externalInstancePropertyReader: (instance) => instance.round),
      'roundToDouble': VmProxy(identifier: 'roundToDouble', externalInstancePropertyReader: (instance) => instance.roundToDouble),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (instance) => instance.runtimeType),
      'sign': VmProxy(identifier: 'sign', externalInstancePropertyReader: (instance) => instance.sign),
      'toDouble': VmProxy(identifier: 'toDouble', externalInstancePropertyReader: (instance) => instance.toDouble),
      'toInt': VmProxy(identifier: 'toInt', externalInstancePropertyReader: (instance) => instance.toInt),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (instance) => instance.toString),
      'toStringAsExponential': VmProxy(identifier: 'toStringAsExponential', externalInstancePropertyReader: (instance) => instance.toStringAsExponential),
      'toStringAsFixed': VmProxy(identifier: 'toStringAsFixed', externalInstancePropertyReader: (instance) => instance.toStringAsFixed),
      'toStringAsPrecision': VmProxy(identifier: 'toStringAsPrecision', externalInstancePropertyReader: (instance) => instance.toStringAsPrecision),
      'truncate': VmProxy(identifier: 'truncate', externalInstancePropertyReader: (instance) => instance.truncate),
      'truncateToDouble': VmProxy(identifier: 'truncateToDouble', externalInstancePropertyReader: (instance) => instance.truncateToDouble),
    },
  );

  ///类型[num]
  static final classNum = VmClass<num>(
    identifier: 'num',
    externalProxyMap: {
      'parse': VmProxy(identifier: 'parse', externalStaticPropertyReader: () => num.parse),
      'tryParse': VmProxy(identifier: 'tryParse', externalStaticPropertyReader: () => num.tryParse),
      'abs': VmProxy(identifier: 'abs', externalInstancePropertyReader: (instance) => instance.abs),
      'ceil': VmProxy(identifier: 'ceil', externalInstancePropertyReader: (instance) => instance.ceil),
      'ceilToDouble': VmProxy(identifier: 'ceilToDouble', externalInstancePropertyReader: (instance) => instance.ceilToDouble),
      'clamp': VmProxy(identifier: 'clamp', externalInstancePropertyReader: (instance) => instance.clamp),
      'compareTo': VmProxy(identifier: 'compareTo', externalInstancePropertyReader: (instance) => instance.compareTo),
      'floor': VmProxy(identifier: 'floor', externalInstancePropertyReader: (instance) => instance.floor),
      'floorToDouble': VmProxy(identifier: 'floorToDouble', externalInstancePropertyReader: (instance) => instance.floorToDouble),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (instance) => instance.hashCode),
      'isFinite': VmProxy(identifier: 'isFinite', externalInstancePropertyReader: (instance) => instance.isFinite),
      'isInfinite': VmProxy(identifier: 'isInfinite', externalInstancePropertyReader: (instance) => instance.isInfinite),
      'isNaN': VmProxy(identifier: 'isNaN', externalInstancePropertyReader: (instance) => instance.isNaN),
      'isNegative': VmProxy(identifier: 'isNegative', externalInstancePropertyReader: (instance) => instance.isNegative),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (instance) => instance.noSuchMethod),
      'remainder': VmProxy(identifier: 'remainder', externalInstancePropertyReader: (instance) => instance.remainder),
      'round': VmProxy(identifier: 'round', externalInstancePropertyReader: (instance) => instance.round),
      'roundToDouble': VmProxy(identifier: 'roundToDouble', externalInstancePropertyReader: (instance) => instance.roundToDouble),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (instance) => instance.runtimeType),
      'sign': VmProxy(identifier: 'sign', externalInstancePropertyReader: (instance) => instance.sign),
      'toDouble': VmProxy(identifier: 'toDouble', externalInstancePropertyReader: (instance) => instance.toDouble),
      'toInt': VmProxy(identifier: 'toInt', externalInstancePropertyReader: (instance) => instance.toInt),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (instance) => instance.toString),
      'toStringAsExponential': VmProxy(identifier: 'toStringAsExponential', externalInstancePropertyReader: (instance) => instance.toStringAsExponential),
      'toStringAsFixed': VmProxy(identifier: 'toStringAsFixed', externalInstancePropertyReader: (instance) => instance.toStringAsFixed),
      'toStringAsPrecision': VmProxy(identifier: 'toStringAsPrecision', externalInstancePropertyReader: (instance) => instance.toStringAsPrecision),
      'truncate': VmProxy(identifier: 'truncate', externalInstancePropertyReader: (instance) => instance.truncate),
      'truncateToDouble': VmProxy(identifier: 'truncateToDouble', externalInstancePropertyReader: (instance) => instance.truncateToDouble),
    },
  );

  ///类型[bool]
  static final classBool = VmClass<bool>(
    identifier: 'bool',
    externalProxyMap: {
      'fromEnvironment': VmProxy(identifier: 'fromEnvironment', externalStaticPropertyReader: () => bool.fromEnvironment),
      'hasEnvironment': VmProxy(identifier: 'hasEnvironment', externalStaticPropertyReader: () => bool.hasEnvironment),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (instance) => instance.toString),
    },
  );

  ///类型[String]
  static final classString = VmClass<String>(
    identifier: 'String',
    externalProxyMap: {
      'fromCharCode': VmProxy(identifier: 'fromCharCode', externalStaticPropertyReader: () => String.fromCharCode),
      'fromCharCodes': VmProxy(identifier: 'fromCharCodes', externalStaticPropertyReader: () => String.fromCharCodes),
      'fromEnvironment': VmProxy(identifier: 'fromEnvironment', externalStaticPropertyReader: () => String.fromEnvironment),
      'allMatches': VmProxy(identifier: 'allMatches', externalInstancePropertyReader: (instance) => instance.allMatches),
      'codeUnitAt': VmProxy(identifier: 'codeUnitAt', externalInstancePropertyReader: (instance) => instance.codeUnitAt),
      'codeUnits': VmProxy(identifier: 'codeUnits', externalInstancePropertyReader: (instance) => instance.codeUnits),
      'compareTo': VmProxy(identifier: 'compareTo', externalInstancePropertyReader: (instance) => instance.compareTo),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (instance) => instance.contains),
      'endsWith': VmProxy(identifier: 'endsWith', externalInstancePropertyReader: (instance) => instance.endsWith),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (instance) => instance.hashCode),
      'indexOf': VmProxy(identifier: 'indexOf', externalInstancePropertyReader: (instance) => instance.indexOf),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (instance) => instance.isNotEmpty),
      'lastIndexOf': VmProxy(identifier: 'lastIndexOf', externalInstancePropertyReader: (instance) => instance.lastIndexOf),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (instance) => instance.length),
      'matchAsPrefix': VmProxy(identifier: 'matchAsPrefix', externalInstancePropertyReader: (instance) => instance.matchAsPrefix),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (instance) => instance.noSuchMethod),
      'padLeft': VmProxy(identifier: 'padLeft', externalInstancePropertyReader: (instance) => instance.padLeft),
      'padRight': VmProxy(identifier: 'padRight', externalInstancePropertyReader: (instance) => instance.padRight),
      'replaceAll': VmProxy(identifier: 'replaceAll', externalInstancePropertyReader: (instance) => instance.replaceAll),
      'replaceAllMapped': VmProxy(identifier: 'replaceAllMapped', externalInstancePropertyReader: (instance) => instance.replaceAllMapped),
      'replaceFirst': VmProxy(identifier: 'replaceFirst', externalInstancePropertyReader: (instance) => instance.replaceFirst),
      'replaceFirstMapped': VmProxy(identifier: 'replaceFirstMapped', externalInstancePropertyReader: (instance) => instance.replaceFirstMapped),
      'replaceRange': VmProxy(identifier: 'replaceRange', externalInstancePropertyReader: (instance) => instance.replaceRange),
      'runes': VmProxy(identifier: 'runes', externalInstancePropertyReader: (instance) => instance.runes),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (instance) => instance.runtimeType),
      'split': VmProxy(identifier: 'split', externalInstancePropertyReader: (instance) => instance.split),
      'splitMapJoin': VmProxy(identifier: 'splitMapJoin', externalInstancePropertyReader: (instance) => instance.splitMapJoin),
      'startsWith': VmProxy(identifier: 'startsWith', externalInstancePropertyReader: (instance) => instance.startsWith),
      'substring': VmProxy(identifier: 'substring', externalInstancePropertyReader: (instance) => instance.substring),
      'toLowerCase': VmProxy(identifier: 'toLowerCase', externalInstancePropertyReader: (instance) => instance.toLowerCase),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (instance) => instance.toString),
      'toUpperCase': VmProxy(identifier: 'toUpperCase', externalInstancePropertyReader: (instance) => instance.toUpperCase),
      'trim': VmProxy(identifier: 'trim', externalInstancePropertyReader: (instance) => instance.trim),
      'trimLeft': VmProxy(identifier: 'trimLeft', externalInstancePropertyReader: (instance) => instance.trimLeft),
      'trimRight': VmProxy(identifier: 'trimRight', externalInstancePropertyReader: (instance) => instance.trimRight),
    },
  );

  ///类型[List]
  static final classList = VmClass<List>(
    identifier: 'List',
    externalProxyMap: {
      'empty': VmProxy(identifier: 'empty', externalStaticPropertyReader: () => List.empty),
      'filled': VmProxy(identifier: 'filled', externalStaticPropertyReader: () => List.filled),
      'from': VmProxy(identifier: 'from', externalStaticPropertyReader: () => List.from),
      'generate': VmProxy(identifier: 'generate', externalStaticPropertyReader: () => List.generate),
      'of': VmProxy(identifier: 'of', externalStaticPropertyReader: () => List.of),
      'unmodifiable': VmProxy(identifier: 'unmodifiable', externalStaticPropertyReader: () => List.unmodifiable),
      'castFrom': VmProxy(identifier: 'castFrom', externalStaticPropertyReader: () => List.castFrom),
      'copyRange': VmProxy(identifier: 'copyRange', externalStaticPropertyReader: () => List.copyRange),
      'writeIterable': VmProxy(identifier: 'writeIterable', externalStaticPropertyReader: () => List.writeIterable),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (instance) => instance.any),
      'asMap': VmProxy(identifier: 'asMap', externalInstancePropertyReader: (instance) => instance.asMap),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (instance) => instance.elementAt),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (instance) => instance.every),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (instance) => instance.expand, externalInstanceFunctionCaller: (List instance, a0) => instance.expand((b0) => a0 == null ? null : a0(b0))),
      'fillRange': VmProxy(identifier: 'fillRange', externalInstancePropertyReader: (instance) => instance.fillRange),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (instance) => instance.first, externalInstancePropertyWriter: (instance, value) => instance.first = value),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (instance) => instance.firstWhere),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (instance) => instance.fold),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (instance) => instance.forEach),
      'getRange': VmProxy(identifier: 'getRange', externalInstancePropertyReader: (instance) => instance.getRange),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (instance) => instance.hashCode),
      'indexOf': VmProxy(identifier: 'indexOf', externalInstancePropertyReader: (instance) => instance.indexOf),
      'indexWhere': VmProxy(identifier: 'indexWhere', externalInstancePropertyReader: (instance) => instance.indexWhere),
      'insert': VmProxy(identifier: 'insert', externalInstancePropertyReader: (instance) => instance.insert),
      'insertAll': VmProxy(identifier: 'insertAll', externalInstancePropertyReader: (instance) => instance.insertAll),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (instance) => instance.last, externalInstancePropertyWriter: (instance, value) => instance.last = value),
      'lastIndexOf': VmProxy(identifier: 'lastIndexOf', externalInstancePropertyReader: (instance) => instance.lastIndexOf),
      'lastIndexWhere': VmProxy(identifier: 'lastIndexWhere', externalInstancePropertyReader: (instance) => instance.lastIndexWhere),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (instance) => instance.lastWhere),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (instance) => instance.length, externalInstancePropertyWriter: (instance, value) => instance.length = value),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (instance) => instance.map),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (instance) => instance.noSuchMethod),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (instance) => instance.reduce),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (instance) => instance.remove),
      'removeAt': VmProxy(identifier: 'removeAt', externalInstancePropertyReader: (instance) => instance.removeAt),
      'removeLast': VmProxy(identifier: 'removeLast', externalInstancePropertyReader: (instance) => instance.removeLast),
      'removeRange': VmProxy(identifier: 'removeRange', externalInstancePropertyReader: (instance) => instance.removeRange),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (instance) => instance.removeWhere),
      'replaceRange': VmProxy(identifier: 'replaceRange', externalInstancePropertyReader: (instance) => instance.replaceRange),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (instance) => instance.retainWhere),
      'reversed': VmProxy(identifier: 'reversed', externalInstancePropertyReader: (instance) => instance.reversed),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (instance) => instance.runtimeType),
      'setAll': VmProxy(identifier: 'setAll', externalInstancePropertyReader: (instance) => instance.setAll),
      'setRange': VmProxy(identifier: 'setRange', externalInstancePropertyReader: (instance) => instance.setRange),
      'shuffle': VmProxy(identifier: 'shuffle', externalInstancePropertyReader: (instance) => instance.shuffle),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (instance) => instance.single),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (instance) => instance.singleWhere),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (instance) => instance.skipWhile),
      'sort': VmProxy(identifier: 'sort', externalInstancePropertyReader: (instance) => instance.sort),
      'sublist': VmProxy(identifier: 'sublist', externalInstancePropertyReader: (instance) => instance.sublist),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (instance) => instance.takeWhile),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (instance) => instance.where),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (instance) => instance.whereType),
    },
  );

  ///类型[Set]
  static final classSet = VmClass<Set>(
    identifier: 'Set',
    externalProxyMap: {
      'Set': VmProxy(identifier: 'Set', externalStaticPropertyReader: () => Set.new),
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Set.new),
      'from': VmProxy(identifier: 'from', externalStaticPropertyReader: () => Set.from),
      'identity': VmProxy(identifier: 'identity', externalStaticPropertyReader: () => Set.identity),
      'of': VmProxy(identifier: 'of', externalStaticPropertyReader: () => Set.of),
      'unmodifiable': VmProxy(identifier: 'unmodifiable', externalStaticPropertyReader: () => Set.unmodifiable),
      'castFrom': VmProxy(identifier: 'castFrom', externalStaticPropertyReader: () => Set.castFrom),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (instance) => instance.add),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (instance) => instance.addAll),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (instance) => instance.any),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (instance) => instance.clear),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (instance) => instance.contains),
      'containsAll': VmProxy(identifier: 'containsAll', externalInstancePropertyReader: (instance) => instance.containsAll),
      'difference': VmProxy(identifier: 'difference', externalInstancePropertyReader: (instance) => instance.difference),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (instance) => instance.elementAt),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (instance) => instance.every),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (instance) => instance.expand, externalInstanceFunctionCaller: (Set instance, a0) => instance.expand((b0) => a0 == null ? null : a0(b0))),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (instance) => instance.first),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (instance) => instance.firstWhere),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (instance) => instance.fold),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (instance) => instance.forEach),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (instance) => instance.hashCode),
      'intersection': VmProxy(identifier: 'intersection', externalInstancePropertyReader: (instance) => instance.intersection),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (instance) => instance.last),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (instance) => instance.lastWhere),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (instance) => instance.length),
      'lookup': VmProxy(identifier: 'lookup', externalInstancePropertyReader: (instance) => instance.lookup),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (instance) => instance.map),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (instance) => instance.noSuchMethod),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (instance) => instance.reduce),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (instance) => instance.remove),
      'removeAll': VmProxy(identifier: 'removeAll', externalInstancePropertyReader: (instance) => instance.removeAll),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (instance) => instance.removeWhere),
      'retainAll': VmProxy(identifier: 'retainAll', externalInstancePropertyReader: (instance) => instance.retainAll),
      'retainWhere': VmProxy(identifier: 'retainWhere', externalInstancePropertyReader: (instance) => instance.retainWhere),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (instance) => instance.runtimeType),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (instance) => instance.single),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (instance) => instance.singleWhere),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (instance) => instance.skipWhile),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (instance) => instance.takeWhile),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (instance) => instance.toString),
      'union': VmProxy(identifier: 'union', externalInstancePropertyReader: (instance) => instance.union),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (instance) => instance.where),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (instance) => instance.whereType),
    },
  );

  ///类型[Map]
  static final classMap = VmClass<Map>(
    identifier: 'Map',
    externalProxyMap: {
      'Map': VmProxy(identifier: 'Map', externalStaticPropertyReader: () => Map.new),
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Map.new),
      'from': VmProxy(identifier: 'from', externalStaticPropertyReader: () => Map.from),
      'fromEntries': VmProxy(identifier: 'fromEntries', externalStaticPropertyReader: () => Map.fromEntries),
      'fromIterable': VmProxy(identifier: 'fromIterable', externalStaticPropertyReader: () => Map.fromIterable),
      'fromIterables': VmProxy(identifier: 'fromIterables', externalStaticPropertyReader: () => Map.fromIterables),
      'identity': VmProxy(identifier: 'identity', externalStaticPropertyReader: () => Map.identity),
      'of': VmProxy(identifier: 'of', externalStaticPropertyReader: () => Map.of),
      'unmodifiable': VmProxy(identifier: 'unmodifiable', externalStaticPropertyReader: () => Map.unmodifiable),
      'castFrom': VmProxy(identifier: 'castFrom', externalStaticPropertyReader: () => Map.castFrom),
      'addAll': VmProxy(identifier: 'addAll', externalInstancePropertyReader: (instance) => instance.addAll),
      'addEntries': VmProxy(identifier: 'addEntries', externalInstancePropertyReader: (instance) => instance.addEntries),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (instance) => instance.cast),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (instance) => instance.clear),
      'containsKey': VmProxy(identifier: 'containsKey', externalInstancePropertyReader: (instance) => instance.containsKey),
      'containsValue': VmProxy(identifier: 'containsValue', externalInstancePropertyReader: (instance) => instance.containsValue),
      'entries': VmProxy(identifier: 'entries', externalInstancePropertyReader: (instance) => instance.entries),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (instance) => instance.forEach),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (instance) => instance.hashCode),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (instance) => instance.isNotEmpty),
      'keys': VmProxy(identifier: 'keys', externalInstancePropertyReader: (instance) => instance.keys),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (instance) => instance.length),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (instance) => instance.map, externalInstanceFunctionCaller: (Map instance, a0) => instance.map((b0, b1) => a0 == null ? null : a0(b0, b1))),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (instance) => instance.noSuchMethod),
      'putIfAbsent': VmProxy(identifier: 'putIfAbsent', externalInstancePropertyReader: (instance) => instance.putIfAbsent),
      'remove': VmProxy(identifier: 'remove', externalInstancePropertyReader: (instance) => instance.remove),
      'removeWhere': VmProxy(identifier: 'removeWhere', externalInstancePropertyReader: (instance) => instance.removeWhere),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (instance) => instance.toString),
      'update': VmProxy(identifier: 'update', externalInstancePropertyReader: (instance) => instance.update),
      'updateAll': VmProxy(identifier: 'updateAll', externalInstancePropertyReader: (instance) => instance.updateAll),
      'values': VmProxy(identifier: 'values', externalInstancePropertyReader: (instance) => instance.values),
    },
  );

  ///类型[Runes]
  static final classRunes = VmClass<Runes>(
    identifier: 'Runes',
    externalProxyMap: {
      'Runes': VmProxy(identifier: 'Runes', externalStaticPropertyReader: () => Runes.new),
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Runes.new),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (instance) => instance.any),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (instance) => instance.cast),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (instance) => instance.elementAt),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (instance) => instance.every),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (instance) => instance.expand, externalInstanceFunctionCaller: (Runes instance, a0) => instance.expand((b0) => a0 == null ? null : a0(b0))),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (instance) => instance.first),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (instance) => instance.firstWhere),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (instance) => instance.fold),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (instance) => instance.forEach),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (instance) => instance.hashCode),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (instance) => instance.last),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (instance) => instance.lastWhere),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (instance) => instance.length),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (instance) => instance.map),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (instance) => instance.noSuchMethod),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (instance) => instance.reduce),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (instance) => instance.runtimeType),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (instance) => instance.single),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (instance) => instance.singleWhere),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (instance) => instance.skipWhile),
      'string': VmProxy(identifier: 'string', externalInstancePropertyReader: (instance) => instance.string),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (instance) => instance.takeWhile),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (instance) => instance.where),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (instance) => instance.whereType),
    },
  );

  ///类型[Symbol]
  static final classSymbol = VmClass<Symbol>(
    identifier: 'Symbol',
    externalProxyMap: {
      'Symbol': VmProxy(identifier: 'Symbol', externalStaticPropertyReader: () => Symbol.new),
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Symbol.new),
      'empty': VmProxy(identifier: 'empty', externalStaticPropertyReader: () => Symbol.empty),
      'unaryMinus': VmProxy(identifier: 'unaryMinus', externalStaticPropertyReader: () => Symbol.unaryMinus),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (instance) => instance.toString),
    },
  );

  ///类型[MapEntry]
  static final classMapEntry = VmClass<MapEntry>(
    identifier: 'MapEntry',
    externalProxyMap: {
      'MapEntry': VmProxy(identifier: 'MapEntry', externalStaticPropertyReader: () => MapEntry.new),
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => MapEntry.new),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (instance) => instance.hashCode),
      'key': VmProxy(identifier: 'key', externalInstancePropertyReader: (instance) => instance.key),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (instance) => instance.toString),
      'value': VmProxy(identifier: 'value', externalInstancePropertyReader: (instance) => instance.value),
    },
  );

  ///类型[Duration]
  static final classDuration = VmClass<Duration>(
    identifier: 'Duration',
    externalProxyMap: {
      'Duration': VmProxy(identifier: 'Duration', externalStaticPropertyReader: () => Duration.new),
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Duration.new),
      'hoursPerDay': VmProxy(identifier: 'hoursPerDay', externalStaticPropertyReader: () => Duration.hoursPerDay),
      'microsecondsPerDay': VmProxy(identifier: 'microsecondsPerDay', externalStaticPropertyReader: () => Duration.microsecondsPerDay),
      'microsecondsPerHour': VmProxy(identifier: 'microsecondsPerHour', externalStaticPropertyReader: () => Duration.microsecondsPerHour),
      'microsecondsPerMillisecond': VmProxy(identifier: 'microsecondsPerMillisecond', externalStaticPropertyReader: () => Duration.microsecondsPerMillisecond),
      'microsecondsPerMinute': VmProxy(identifier: 'microsecondsPerMinute', externalStaticPropertyReader: () => Duration.microsecondsPerMinute),
      'microsecondsPerSecond': VmProxy(identifier: 'microsecondsPerSecond', externalStaticPropertyReader: () => Duration.microsecondsPerSecond),
      'millisecondsPerDay': VmProxy(identifier: 'millisecondsPerDay', externalStaticPropertyReader: () => Duration.millisecondsPerDay),
      'millisecondsPerHour': VmProxy(identifier: 'millisecondsPerHour', externalStaticPropertyReader: () => Duration.millisecondsPerHour),
      'millisecondsPerMinute': VmProxy(identifier: 'millisecondsPerMinute', externalStaticPropertyReader: () => Duration.millisecondsPerMinute),
      'millisecondsPerSecond': VmProxy(identifier: 'millisecondsPerSecond', externalStaticPropertyReader: () => Duration.millisecondsPerSecond),
      'minutesPerDay': VmProxy(identifier: 'minutesPerDay', externalStaticPropertyReader: () => Duration.minutesPerDay),
      'minutesPerHour': VmProxy(identifier: 'minutesPerHour', externalStaticPropertyReader: () => Duration.minutesPerHour),
      'secondsPerDay': VmProxy(identifier: 'secondsPerDay', externalStaticPropertyReader: () => Duration.secondsPerDay),
      'secondsPerHour': VmProxy(identifier: 'secondsPerHour', externalStaticPropertyReader: () => Duration.secondsPerHour),
      'secondsPerMinute': VmProxy(identifier: 'secondsPerMinute', externalStaticPropertyReader: () => Duration.secondsPerMinute),
      'zero': VmProxy(identifier: 'zero', externalStaticPropertyReader: () => Duration.zero),
      'abs': VmProxy(identifier: 'abs', externalInstancePropertyReader: (instance) => instance.abs),
      'compareTo': VmProxy(identifier: 'compareTo', externalInstancePropertyReader: (instance) => instance.compareTo),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (instance) => instance.hashCode),
      'inDays': VmProxy(identifier: 'inDays', externalInstancePropertyReader: (instance) => instance.inDays),
      'inHours': VmProxy(identifier: 'inHours', externalInstancePropertyReader: (instance) => instance.inHours),
      'inMicroseconds': VmProxy(identifier: 'inMicroseconds', externalInstancePropertyReader: (instance) => instance.inMicroseconds),
      'inMilliseconds': VmProxy(identifier: 'inMilliseconds', externalInstancePropertyReader: (instance) => instance.inMilliseconds),
      'inMinutes': VmProxy(identifier: 'inMinutes', externalInstancePropertyReader: (instance) => instance.inMinutes),
      'inSeconds': VmProxy(identifier: 'inSeconds', externalInstancePropertyReader: (instance) => instance.inSeconds),
      'isNegative': VmProxy(identifier: 'isNegative', externalInstancePropertyReader: (instance) => instance.isNegative),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (instance) => instance.toString),
    },
  );

  ///类型[DateTime]
  static final classDateTime = VmClass<DateTime>(
    identifier: 'DateTime',
    externalProxyMap: {
      'DateTime': VmProxy(identifier: 'DateTime', externalStaticPropertyReader: () => DateTime.new),
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => DateTime.new),
      'fromMicrosecondsSinceEpoch': VmProxy(identifier: 'fromMicrosecondsSinceEpoch', externalStaticPropertyReader: () => DateTime.fromMicrosecondsSinceEpoch),
      'fromMillisecondsSinceEpoch': VmProxy(identifier: 'fromMillisecondsSinceEpoch', externalStaticPropertyReader: () => DateTime.fromMillisecondsSinceEpoch),
      'now': VmProxy(identifier: 'now', externalStaticPropertyReader: () => DateTime.now),
      'utc': VmProxy(identifier: 'utc', externalStaticPropertyReader: () => DateTime.utc),
      'april': VmProxy(identifier: 'april', externalStaticPropertyReader: () => DateTime.april),
      'august': VmProxy(identifier: 'august', externalStaticPropertyReader: () => DateTime.august),
      'daysPerWeek': VmProxy(identifier: 'daysPerWeek', externalStaticPropertyReader: () => DateTime.daysPerWeek),
      'december': VmProxy(identifier: 'december', externalStaticPropertyReader: () => DateTime.december),
      'february': VmProxy(identifier: 'february', externalStaticPropertyReader: () => DateTime.february),
      'friday': VmProxy(identifier: 'friday', externalStaticPropertyReader: () => DateTime.friday),
      'january': VmProxy(identifier: 'january', externalStaticPropertyReader: () => DateTime.january),
      'july': VmProxy(identifier: 'july', externalStaticPropertyReader: () => DateTime.july),
      'june': VmProxy(identifier: 'june', externalStaticPropertyReader: () => DateTime.june),
      'march': VmProxy(identifier: 'march', externalStaticPropertyReader: () => DateTime.march),
      'may': VmProxy(identifier: 'may', externalStaticPropertyReader: () => DateTime.may),
      'monday': VmProxy(identifier: 'monday', externalStaticPropertyReader: () => DateTime.monday),
      'monthsPerYear': VmProxy(identifier: 'monthsPerYear', externalStaticPropertyReader: () => DateTime.monthsPerYear),
      'november': VmProxy(identifier: 'november', externalStaticPropertyReader: () => DateTime.november),
      'october': VmProxy(identifier: 'october', externalStaticPropertyReader: () => DateTime.october),
      'parse': VmProxy(identifier: 'parse', externalStaticPropertyReader: () => DateTime.parse),
      'saturday': VmProxy(identifier: 'saturday', externalStaticPropertyReader: () => DateTime.saturday),
      'september': VmProxy(identifier: 'september', externalStaticPropertyReader: () => DateTime.september),
      'sunday': VmProxy(identifier: 'sunday', externalStaticPropertyReader: () => DateTime.sunday),
      'thursday': VmProxy(identifier: 'thursday', externalStaticPropertyReader: () => DateTime.thursday),
      'tryParse': VmProxy(identifier: 'tryParse', externalStaticPropertyReader: () => DateTime.tryParse),
      'tuesday': VmProxy(identifier: 'tuesday', externalStaticPropertyReader: () => DateTime.tuesday),
      'wednesday': VmProxy(identifier: 'wednesday', externalStaticPropertyReader: () => DateTime.wednesday),
      'add': VmProxy(identifier: 'add', externalInstancePropertyReader: (instance) => instance.add),
      'compareTo': VmProxy(identifier: 'compareTo', externalInstancePropertyReader: (instance) => instance.compareTo),
      'day': VmProxy(identifier: 'day', externalInstancePropertyReader: (instance) => instance.day),
      'difference': VmProxy(identifier: 'difference', externalInstancePropertyReader: (instance) => instance.difference),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (instance) => instance.hashCode),
      'hour': VmProxy(identifier: 'hour', externalInstancePropertyReader: (instance) => instance.hour),
      'isAfter': VmProxy(identifier: 'isAfter', externalInstancePropertyReader: (instance) => instance.isAfter),
      'isAtSameMomentAs': VmProxy(identifier: 'isAtSameMomentAs', externalInstancePropertyReader: (instance) => instance.isAtSameMomentAs),
      'isBefore': VmProxy(identifier: 'isBefore', externalInstancePropertyReader: (instance) => instance.isBefore),
      'isUtc': VmProxy(identifier: 'isUtc', externalInstancePropertyReader: (instance) => instance.isUtc),
      'microsecond': VmProxy(identifier: 'microsecond', externalInstancePropertyReader: (instance) => instance.microsecond),
      'microsecondsSinceEpoch': VmProxy(identifier: 'microsecondsSinceEpoch', externalInstancePropertyReader: (instance) => instance.microsecondsSinceEpoch),
      'millisecond': VmProxy(identifier: 'millisecond', externalInstancePropertyReader: (instance) => instance.millisecond),
      'millisecondsSinceEpoch': VmProxy(identifier: 'millisecondsSinceEpoch', externalInstancePropertyReader: (instance) => instance.millisecondsSinceEpoch),
      'minute': VmProxy(identifier: 'minute', externalInstancePropertyReader: (instance) => instance.minute),
      'month': VmProxy(identifier: 'month', externalInstancePropertyReader: (instance) => instance.month),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (instance) => instance.runtimeType),
      'second': VmProxy(identifier: 'second', externalInstancePropertyReader: (instance) => instance.second),
      'subtract': VmProxy(identifier: 'subtract', externalInstancePropertyReader: (instance) => instance.subtract),
      'timeZoneName': VmProxy(identifier: 'timeZoneName', externalInstancePropertyReader: (instance) => instance.timeZoneName),
      'timeZoneOffset': VmProxy(identifier: 'timeZoneOffset', externalInstancePropertyReader: (instance) => instance.timeZoneOffset),
      'toIso8601String': VmProxy(identifier: 'toIso8601String', externalInstancePropertyReader: (instance) => instance.toIso8601String),
      'toLocal': VmProxy(identifier: 'toLocal', externalInstancePropertyReader: (instance) => instance.toLocal),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (instance) => instance.toString),
      'toUtc': VmProxy(identifier: 'toUtc', externalInstancePropertyReader: (instance) => instance.toUtc),
      'weekday': VmProxy(identifier: 'weekday', externalInstancePropertyReader: (instance) => instance.weekday),
      'year': VmProxy(identifier: 'year', externalInstancePropertyReader: (instance) => instance.year),
    },
  );

  ///类型[StringBuffer]
  static final classStringBuffer = VmClass<StringBuffer>(
    identifier: 'StringBuffer',
    externalProxyMap: {
      'StringBuffer': VmProxy(identifier: 'StringBuffer', externalStaticPropertyReader: () => StringBuffer.new),
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => StringBuffer.new),
      'clear': VmProxy(identifier: 'clear', externalInstancePropertyReader: (instance) => instance.clear),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (instance) => instance.hashCode),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (instance) => instance.isNotEmpty),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (instance) => instance.length),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (instance) => instance.toString),
      'write': VmProxy(identifier: 'write', externalInstancePropertyReader: (instance) => instance.write),
      'writeAll': VmProxy(identifier: 'writeAll', externalInstancePropertyReader: (instance) => instance.writeAll),
      'writeCharCode': VmProxy(identifier: 'writeCharCode', externalInstancePropertyReader: (instance) => instance.writeCharCode),
      'writeln': VmProxy(identifier: 'writeln', externalInstancePropertyReader: (instance) => instance.writeln),
    },
  );

  ///类型[RegExp]
  static final classRegExp = VmClass<RegExp>(
    identifier: 'RegExp',
    externalProxyMap: {
      'RegExp': VmProxy(identifier: 'RegExp', externalStaticPropertyReader: () => RegExp.new),
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => RegExp.new),
      'escape': VmProxy(identifier: 'escape', externalStaticPropertyReader: () => RegExp.escape),
      'allMatches': VmProxy(identifier: 'allMatches', externalInstancePropertyReader: (instance) => instance.allMatches),
      'firstMatch': VmProxy(identifier: 'firstMatch', externalInstancePropertyReader: (instance) => instance.firstMatch),
      'hasMatch': VmProxy(identifier: 'hasMatch', externalInstancePropertyReader: (instance) => instance.hasMatch),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (instance) => instance.hashCode),
      'isCaseSensitive': VmProxy(identifier: 'isCaseSensitive', externalInstancePropertyReader: (instance) => instance.isCaseSensitive),
      'isDotAll': VmProxy(identifier: 'isDotAll', externalInstancePropertyReader: (instance) => instance.isDotAll),
      'isMultiLine': VmProxy(identifier: 'isMultiLine', externalInstancePropertyReader: (instance) => instance.isMultiLine),
      'isUnicode': VmProxy(identifier: 'isUnicode', externalInstancePropertyReader: (instance) => instance.isUnicode),
      'matchAsPrefix': VmProxy(identifier: 'matchAsPrefix', externalInstancePropertyReader: (instance) => instance.matchAsPrefix),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (instance) => instance.noSuchMethod),
      'pattern': VmProxy(identifier: 'pattern', externalInstancePropertyReader: (instance) => instance.pattern),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (instance) => instance.runtimeType),
      'stringMatch': VmProxy(identifier: 'stringMatch', externalInstancePropertyReader: (instance) => instance.stringMatch),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (instance) => instance.toString),
    },
  );

  ///类型[Uri]
  static final classUri = VmClass<Uri>(
    identifier: 'Uri',
    externalProxyMap: {
      'Uri': VmProxy(identifier: 'Uri', externalStaticPropertyReader: () => Uri.new),
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Uri.new),
      'dataFromBytes': VmProxy(identifier: 'dataFromBytes', externalStaticPropertyReader: () => Uri.dataFromBytes),
      'dataFromString': VmProxy(identifier: 'dataFromString', externalStaticPropertyReader: () => Uri.dataFromString),
      'directory': VmProxy(identifier: 'directory', externalStaticPropertyReader: () => Uri.directory),
      'file': VmProxy(identifier: 'file', externalStaticPropertyReader: () => Uri.file),
      'http': VmProxy(identifier: 'http', externalStaticPropertyReader: () => Uri.http),
      'https': VmProxy(identifier: 'https', externalStaticPropertyReader: () => Uri.https),
      'base': VmProxy(identifier: 'base', externalStaticPropertyReader: () => Uri.base),
      'decodeComponent': VmProxy(identifier: 'decodeComponent', externalStaticPropertyReader: () => Uri.decodeComponent),
      'decodeFull': VmProxy(identifier: 'decodeFull', externalStaticPropertyReader: () => Uri.decodeFull),
      'decodeQueryComponent': VmProxy(identifier: 'decodeQueryComponent', externalStaticPropertyReader: () => Uri.decodeQueryComponent),
      'encodeComponent': VmProxy(identifier: 'encodeComponent', externalStaticPropertyReader: () => Uri.encodeComponent),
      'encodeFull': VmProxy(identifier: 'encodeFull', externalStaticPropertyReader: () => Uri.encodeFull),
      'encodeQueryComponent': VmProxy(identifier: 'encodeQueryComponent', externalStaticPropertyReader: () => Uri.encodeQueryComponent),
      'parse': VmProxy(identifier: 'parse', externalStaticPropertyReader: () => Uri.parse),
      'parseIPv4Address': VmProxy(identifier: 'parseIPv4Address', externalStaticPropertyReader: () => Uri.parseIPv4Address),
      'parseIPv6Address': VmProxy(identifier: 'parseIPv6Address', externalStaticPropertyReader: () => Uri.parseIPv6Address),
      'splitQueryString': VmProxy(identifier: 'splitQueryString', externalStaticPropertyReader: () => Uri.splitQueryString),
      'tryParse': VmProxy(identifier: 'tryParse', externalStaticPropertyReader: () => Uri.tryParse),
      'authority': VmProxy(identifier: 'authority', externalInstancePropertyReader: (instance) => instance.authority),
      'data': VmProxy(identifier: 'data', externalInstancePropertyReader: (instance) => instance.data),
      'fragment': VmProxy(identifier: 'fragment', externalInstancePropertyReader: (instance) => instance.fragment),
      'hasAbsolutePath': VmProxy(identifier: 'hasAbsolutePath', externalInstancePropertyReader: (instance) => instance.hasAbsolutePath),
      'hasAuthority': VmProxy(identifier: 'hasAuthority', externalInstancePropertyReader: (instance) => instance.hasAuthority),
      'hasEmptyPath': VmProxy(identifier: 'hasEmptyPath', externalInstancePropertyReader: (instance) => instance.hasEmptyPath),
      'hasFragment': VmProxy(identifier: 'hasFragment', externalInstancePropertyReader: (instance) => instance.hasFragment),
      'hasPort': VmProxy(identifier: 'hasPort', externalInstancePropertyReader: (instance) => instance.hasPort),
      'hasQuery': VmProxy(identifier: 'hasQuery', externalInstancePropertyReader: (instance) => instance.hasQuery),
      'hasScheme': VmProxy(identifier: 'hasScheme', externalInstancePropertyReader: (instance) => instance.hasScheme),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (instance) => instance.hashCode),
      'host': VmProxy(identifier: 'host', externalInstancePropertyReader: (instance) => instance.host),
      'isAbsolute': VmProxy(identifier: 'isAbsolute', externalInstancePropertyReader: (instance) => instance.isAbsolute),
      'isScheme': VmProxy(identifier: 'isScheme', externalInstancePropertyReader: (instance) => instance.isScheme),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (instance) => instance.noSuchMethod),
      'normalizePath': VmProxy(identifier: 'normalizePath', externalInstancePropertyReader: (instance) => instance.normalizePath),
      'origin': VmProxy(identifier: 'origin', externalInstancePropertyReader: (instance) => instance.origin),
      'path': VmProxy(identifier: 'path', externalInstancePropertyReader: (instance) => instance.path),
      'pathSegments': VmProxy(identifier: 'pathSegments', externalInstancePropertyReader: (instance) => instance.pathSegments),
      'port': VmProxy(identifier: 'port', externalInstancePropertyReader: (instance) => instance.port),
      'query': VmProxy(identifier: 'query', externalInstancePropertyReader: (instance) => instance.query),
      'queryParameters': VmProxy(identifier: 'queryParameters', externalInstancePropertyReader: (instance) => instance.queryParameters),
      'queryParametersAll': VmProxy(identifier: 'queryParametersAll', externalInstancePropertyReader: (instance) => instance.queryParametersAll),
      'removeFragment': VmProxy(identifier: 'removeFragment', externalInstancePropertyReader: (instance) => instance.removeFragment),
      'replace': VmProxy(identifier: 'replace', externalInstancePropertyReader: (instance) => instance.replace),
      'resolve': VmProxy(identifier: 'resolve', externalInstancePropertyReader: (instance) => instance.resolve),
      'resolveUri': VmProxy(identifier: 'resolveUri', externalInstancePropertyReader: (instance) => instance.resolveUri),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (instance) => instance.runtimeType),
      'scheme': VmProxy(identifier: 'scheme', externalInstancePropertyReader: (instance) => instance.scheme),
      'toFilePath': VmProxy(identifier: 'toFilePath', externalInstancePropertyReader: (instance) => instance.toFilePath),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (instance) => instance.toString),
      'userInfo': VmProxy(identifier: 'userInfo', externalInstancePropertyReader: (instance) => instance.userInfo),
    },
  );

  ///类型[UriData]
  static final classUriData = VmClass<UriData>(
    identifier: 'UriData',
    externalProxyMap: {
      'fromBytes': VmProxy(identifier: 'fromBytes', externalStaticPropertyReader: () => UriData.fromBytes),
      'fromString': VmProxy(identifier: 'fromString', externalStaticPropertyReader: () => UriData.fromString),
      'fromUri': VmProxy(identifier: 'fromUri', externalStaticPropertyReader: () => UriData.fromUri),
      'parse': VmProxy(identifier: 'parse', externalStaticPropertyReader: () => UriData.parse),
      'charset': VmProxy(identifier: 'charset', externalInstancePropertyReader: (instance) => instance.charset),
      'contentAsBytes': VmProxy(identifier: 'contentAsBytes', externalInstancePropertyReader: (instance) => instance.contentAsBytes),
      'contentAsString': VmProxy(identifier: 'contentAsString', externalInstancePropertyReader: (instance) => instance.contentAsString),
      'contentText': VmProxy(identifier: 'contentText', externalInstancePropertyReader: (instance) => instance.contentText),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (instance) => instance.hashCode),
      'isBase64': VmProxy(identifier: 'isBase64', externalInstancePropertyReader: (instance) => instance.isBase64),
      'isCharset': VmProxy(identifier: 'isCharset', externalInstancePropertyReader: (instance) => instance.isCharset),
      'isEncoding': VmProxy(identifier: 'isEncoding', externalInstancePropertyReader: (instance) => instance.isEncoding),
      'isMimeType': VmProxy(identifier: 'isMimeType', externalInstancePropertyReader: (instance) => instance.isMimeType),
      'mimeType': VmProxy(identifier: 'mimeType', externalInstancePropertyReader: (instance) => instance.mimeType),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (instance) => instance.noSuchMethod),
      'parameters': VmProxy(identifier: 'parameters', externalInstancePropertyReader: (instance) => instance.parameters),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (instance) => instance.toString),
      'uri': VmProxy(identifier: 'uri', externalInstancePropertyReader: (instance) => instance.uri),
    },
  );

  ///类型[BigInt]
  static final classBigInt = VmClass<BigInt>(
    identifier: 'BigInt',
    externalProxyMap: {
      'from': VmProxy(identifier: 'from', externalStaticPropertyReader: () => BigInt.from),
      'one': VmProxy(identifier: 'one', externalStaticPropertyReader: () => BigInt.one),
      'parse': VmProxy(identifier: 'parse', externalStaticPropertyReader: () => BigInt.parse),
      'tryParse': VmProxy(identifier: 'tryParse', externalStaticPropertyReader: () => BigInt.tryParse),
      'two': VmProxy(identifier: 'two', externalStaticPropertyReader: () => BigInt.two),
      'zero': VmProxy(identifier: 'zero', externalStaticPropertyReader: () => BigInt.zero),
      'abs': VmProxy(identifier: 'abs', externalInstancePropertyReader: (instance) => instance.abs),
      'bitLength': VmProxy(identifier: 'bitLength', externalInstancePropertyReader: (instance) => instance.bitLength),
      'compareTo': VmProxy(identifier: 'compareTo', externalInstancePropertyReader: (instance) => instance.compareTo),
      'gcd': VmProxy(identifier: 'gcd', externalInstancePropertyReader: (instance) => instance.gcd),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (instance) => instance.hashCode),
      'isEven': VmProxy(identifier: 'isEven', externalInstancePropertyReader: (instance) => instance.isEven),
      'isNegative': VmProxy(identifier: 'isNegative', externalInstancePropertyReader: (instance) => instance.isNegative),
      'isOdd': VmProxy(identifier: 'isOdd', externalInstancePropertyReader: (instance) => instance.isOdd),
      'isValidInt': VmProxy(identifier: 'isValidInt', externalInstancePropertyReader: (instance) => instance.isValidInt),
      'modInverse': VmProxy(identifier: 'modInverse', externalInstancePropertyReader: (instance) => instance.modInverse),
      'modPow': VmProxy(identifier: 'modPow', externalInstancePropertyReader: (instance) => instance.modPow),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (instance) => instance.noSuchMethod),
      'pow': VmProxy(identifier: 'pow', externalInstancePropertyReader: (instance) => instance.pow),
      'remainder': VmProxy(identifier: 'remainder', externalInstancePropertyReader: (instance) => instance.remainder),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (instance) => instance.runtimeType),
      'sign': VmProxy(identifier: 'sign', externalInstancePropertyReader: (instance) => instance.sign),
      'toDouble': VmProxy(identifier: 'toDouble', externalInstancePropertyReader: (instance) => instance.toDouble),
      'toInt': VmProxy(identifier: 'toInt', externalInstancePropertyReader: (instance) => instance.toInt),
      'toRadixString': VmProxy(identifier: 'toRadixString', externalInstancePropertyReader: (instance) => instance.toRadixString),
      'toSigned': VmProxy(identifier: 'toSigned', externalInstancePropertyReader: (instance) => instance.toSigned),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (instance) => instance.toString),
      'toUnsigned': VmProxy(identifier: 'toUnsigned', externalInstancePropertyReader: (instance) => instance.toUnsigned),
    },
  );

  ///类型[Stopwatch]
  static final classStopwatch = VmClass<Stopwatch>(
    identifier: 'Stopwatch',
    externalProxyMap: {
      'Stopwatch': VmProxy(identifier: 'Stopwatch', externalStaticPropertyReader: () => Stopwatch.new),
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Stopwatch.new),
      'elapsed': VmProxy(identifier: 'elapsed', externalInstancePropertyReader: (instance) => instance.elapsed),
      'elapsedMicroseconds': VmProxy(identifier: 'elapsedMicroseconds', externalInstancePropertyReader: (instance) => instance.elapsedMicroseconds),
      'elapsedMilliseconds': VmProxy(identifier: 'elapsedMilliseconds', externalInstancePropertyReader: (instance) => instance.elapsedMilliseconds),
      'elapsedTicks': VmProxy(identifier: 'elapsedTicks', externalInstancePropertyReader: (instance) => instance.elapsedTicks),
      'frequency': VmProxy(identifier: 'frequency', externalInstancePropertyReader: (instance) => instance.frequency),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (instance) => instance.hashCode),
      'isRunning': VmProxy(identifier: 'isRunning', externalInstancePropertyReader: (instance) => instance.isRunning),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (instance) => instance.noSuchMethod),
      'reset': VmProxy(identifier: 'reset', externalInstancePropertyReader: (instance) => instance.reset),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (instance) => instance.runtimeType),
      'start': VmProxy(identifier: 'start', externalInstancePropertyReader: (instance) => instance.start),
      'stop': VmProxy(identifier: 'stop', externalInstancePropertyReader: (instance) => instance.stop),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (instance) => instance.toString),
    },
  );

  ///类型[Future]
  static final classFuture = VmClass<Future>(
    identifier: 'Future',
    externalProxyMap: {
      'Future': VmProxy(identifier: 'Future', externalStaticPropertyReader: () => Future.new, externalStaticFunctionCaller: (a0) => Future(() => a0 == null ? null : a0())),
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Future.new, externalStaticFunctionCaller: (a0) => Future(() => a0 == null ? null : a0())),
      'delayed': VmProxy(identifier: 'delayed', externalStaticPropertyReader: () => Future.delayed, externalStaticFunctionCaller: (a0, a1) => Future.delayed(a0, () => a1 == null ? null : a1())),
      'error': VmProxy(identifier: 'error', externalStaticPropertyReader: () => Future.error),
      'microtask': VmProxy(identifier: 'microtask', externalStaticPropertyReader: () => Future.microtask, externalStaticFunctionCaller: (a0) => Future.microtask(() => a0 == null ? null : a0())),
      'sync': VmProxy(identifier: 'sync', externalStaticPropertyReader: () => Future.sync, externalStaticFunctionCaller: (a0) => Future.sync(() => a0 == null ? null : a0())),
      'value': VmProxy(identifier: 'value', externalStaticPropertyReader: () => Future.value),
      'any': VmProxy(identifier: 'any', externalStaticPropertyReader: () => Future.any),
      'doWhile': VmProxy(identifier: 'doWhile', externalStaticPropertyReader: () => Future.doWhile, externalStaticFunctionCaller: (a0) => Future.doWhile(() => a0 == null ? null : a0())),
      'forEach': VmProxy(identifier: 'forEach', externalStaticPropertyReader: () => Future.forEach),
      'wait': VmProxy(identifier: 'wait', externalStaticPropertyReader: () => Future.wait),
      'asStream': VmProxy(identifier: 'asStream', externalInstancePropertyReader: (instance) => instance.asStream),
      'catchError': VmProxy(identifier: 'catchError', externalInstancePropertyReader: (instance) => instance.catchError),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (instance) => instance.runtimeType),
      'then': VmProxy(identifier: 'then', externalInstancePropertyReader: (instance) => instance.then),
      'timeout': VmProxy(identifier: 'timeout', externalInstancePropertyReader: (instance) => instance.timeout),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (instance) => instance.toString),
      'whenComplete': VmProxy(identifier: 'whenComplete', externalInstancePropertyReader: (instance) => instance.whenComplete),
    },
  );

  ///类型[Function]
  static final classFunction = VmClass<Function>(
    identifier: 'Function',
    externalProxyMap: {
      'apply': VmProxy(identifier: 'apply', externalStaticPropertyReader: () => Function.apply),
      'call': VmProxy(identifier: 'call', externalInstancePropertyReader: (instance) => instance.call),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (instance) => instance.toString),
    },
  );

  ///类型[Random]
  static final classRandom = VmClass<Random>(
    identifier: 'Random',
    externalProxyMap: {
      'Random': VmProxy(identifier: 'Random', externalStaticPropertyReader: () => Random.new),
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Random.new),
      'secure': VmProxy(identifier: 'secure', externalStaticPropertyReader: () => Random.secure),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (instance) => instance.hashCode),
      'nextBool': VmProxy(identifier: 'nextBool', externalInstancePropertyReader: (instance) => instance.nextBool),
      'nextDouble': VmProxy(identifier: 'nextDouble', externalInstancePropertyReader: (instance) => instance.nextDouble),
      'nextInt': VmProxy(identifier: 'nextInt', externalInstancePropertyReader: (instance) => instance.nextInt),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (instance) => instance.toString),
    },
  );

  ///类型[Point]
  static final classPoint = VmClass<Point>(
    identifier: 'Point',
    externalProxyMap: {
      'Point': VmProxy(identifier: 'Point', externalStaticPropertyReader: () => Point.new),
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Point.new),
      'distanceTo': VmProxy(identifier: 'distanceTo', externalInstancePropertyReader: (instance) => instance.distanceTo),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (instance) => instance.hashCode),
      'magnitude': VmProxy(identifier: 'magnitude', externalInstancePropertyReader: (instance) => instance.magnitude),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (instance) => instance.runtimeType),
      'squaredDistanceTo': VmProxy(identifier: 'squaredDistanceTo', externalInstancePropertyReader: (instance) => instance.squaredDistanceTo),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (instance) => instance.toString),
      'x': VmProxy(identifier: 'x', externalInstancePropertyReader: (instance) => instance.x),
      'y': VmProxy(identifier: 'y', externalInstancePropertyReader: (instance) => instance.y),
    },
  );

  ///类型[Rectangle]
  static final classRectangle = VmClass<Rectangle>(
    identifier: 'Rectangle',
    externalProxyMap: {
      'Rectangle': VmProxy(identifier: 'Rectangle', externalStaticPropertyReader: () => Rectangle.new),
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Rectangle.new),
      'fromPoints': VmProxy(identifier: 'fromPoints', externalStaticPropertyReader: () => Rectangle.fromPoints),
      'bottom': VmProxy(identifier: 'bottom', externalInstancePropertyReader: (instance) => instance.bottom),
      'bottomLeft': VmProxy(identifier: 'bottomLeft', externalInstancePropertyReader: (instance) => instance.bottomLeft),
      'bottomRight': VmProxy(identifier: 'bottomRight', externalInstancePropertyReader: (instance) => instance.bottomRight),
      'boundingBox': VmProxy(identifier: 'boundingBox', externalInstancePropertyReader: (instance) => instance.boundingBox),
      'containsPoint': VmProxy(identifier: 'containsPoint', externalInstancePropertyReader: (instance) => instance.containsPoint),
      'containsRectangle': VmProxy(identifier: 'containsRectangle', externalInstancePropertyReader: (instance) => instance.containsRectangle),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (instance) => instance.hashCode),
      'height': VmProxy(identifier: 'height', externalInstancePropertyReader: (instance) => instance.height),
      'intersection': VmProxy(identifier: 'intersection', externalInstancePropertyReader: (instance) => instance.intersection),
      'intersects': VmProxy(identifier: 'intersects', externalInstancePropertyReader: (instance) => instance.intersects),
      'left': VmProxy(identifier: 'left', externalInstancePropertyReader: (instance) => instance.left),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (instance) => instance.noSuchMethod),
      'right': VmProxy(identifier: 'right', externalInstancePropertyReader: (instance) => instance.right),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (instance) => instance.toString),
      'top': VmProxy(identifier: 'top', externalInstancePropertyReader: (instance) => instance.top),
      'topLeft': VmProxy(identifier: 'topLeft', externalInstancePropertyReader: (instance) => instance.topLeft),
      'topRight': VmProxy(identifier: 'topRight', externalInstancePropertyReader: (instance) => instance.topRight),
      'width': VmProxy(identifier: 'width', externalInstancePropertyReader: (instance) => instance.width),
    },
  );

  ///类型[Iterable]
  static final classIterable = VmClass<Iterable>(
    identifier: 'Iterable',
    externalProxyMap: {
      'empty': VmProxy(identifier: 'empty', externalStaticPropertyReader: () => Iterable.empty),
      'generate': VmProxy(identifier: 'generate', externalStaticPropertyReader: () => Iterable.generate),
      'castFrom': VmProxy(identifier: 'castFrom', externalStaticPropertyReader: () => Iterable.castFrom),
      'any': VmProxy(identifier: 'any', externalInstancePropertyReader: (instance) => instance.any),
      'cast': VmProxy(identifier: 'cast', externalInstancePropertyReader: (instance) => instance.cast),
      'contains': VmProxy(identifier: 'contains', externalInstancePropertyReader: (instance) => instance.contains),
      'elementAt': VmProxy(identifier: 'elementAt', externalInstancePropertyReader: (instance) => instance.elementAt),
      'every': VmProxy(identifier: 'every', externalInstancePropertyReader: (instance) => instance.every),
      'expand': VmProxy(identifier: 'expand', externalInstancePropertyReader: (instance) => instance.expand, externalInstanceFunctionCaller: (Iterable instance, a0) => instance.expand((b0) => a0 == null ? null : a0(b0))),
      'first': VmProxy(identifier: 'first', externalInstancePropertyReader: (instance) => instance.first),
      'firstWhere': VmProxy(identifier: 'firstWhere', externalInstancePropertyReader: (instance) => instance.firstWhere),
      'fold': VmProxy(identifier: 'fold', externalInstancePropertyReader: (instance) => instance.fold),
      'followedBy': VmProxy(identifier: 'followedBy', externalInstancePropertyReader: (instance) => instance.followedBy),
      'forEach': VmProxy(identifier: 'forEach', externalInstancePropertyReader: (instance) => instance.forEach),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (instance) => instance.hashCode),
      'isEmpty': VmProxy(identifier: 'isEmpty', externalInstancePropertyReader: (instance) => instance.isEmpty),
      'isNotEmpty': VmProxy(identifier: 'isNotEmpty', externalInstancePropertyReader: (instance) => instance.isNotEmpty),
      'iterator': VmProxy(identifier: 'iterator', externalInstancePropertyReader: (instance) => instance.iterator),
      'join': VmProxy(identifier: 'join', externalInstancePropertyReader: (instance) => instance.join),
      'last': VmProxy(identifier: 'last', externalInstancePropertyReader: (instance) => instance.last),
      'lastWhere': VmProxy(identifier: 'lastWhere', externalInstancePropertyReader: (instance) => instance.lastWhere),
      'length': VmProxy(identifier: 'length', externalInstancePropertyReader: (instance) => instance.length),
      'map': VmProxy(identifier: 'map', externalInstancePropertyReader: (instance) => instance.map),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (instance) => instance.noSuchMethod),
      'reduce': VmProxy(identifier: 'reduce', externalInstancePropertyReader: (instance) => instance.reduce),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (instance) => instance.runtimeType),
      'single': VmProxy(identifier: 'single', externalInstancePropertyReader: (instance) => instance.single),
      'singleWhere': VmProxy(identifier: 'singleWhere', externalInstancePropertyReader: (instance) => instance.singleWhere),
      'skip': VmProxy(identifier: 'skip', externalInstancePropertyReader: (instance) => instance.skip),
      'skipWhile': VmProxy(identifier: 'skipWhile', externalInstancePropertyReader: (instance) => instance.skipWhile),
      'take': VmProxy(identifier: 'take', externalInstancePropertyReader: (instance) => instance.take),
      'takeWhile': VmProxy(identifier: 'takeWhile', externalInstancePropertyReader: (instance) => instance.takeWhile),
      'toList': VmProxy(identifier: 'toList', externalInstancePropertyReader: (instance) => instance.toList),
      'toSet': VmProxy(identifier: 'toSet', externalInstancePropertyReader: (instance) => instance.toSet),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (instance) => instance.toString),
      'where': VmProxy(identifier: 'where', externalInstancePropertyReader: (instance) => instance.where),
      'whereType': VmProxy(identifier: 'whereType', externalInstancePropertyReader: (instance) => instance.whereType),
    },
  );

  ///类型[Iterator]
  static final classIterator = VmClass<Iterator>(
    identifier: 'Iterator',
    externalProxyMap: {
      'current': VmProxy(identifier: 'current', externalInstancePropertyReader: (instance) => instance.current),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (instance) => instance.hashCode),
      'moveNext': VmProxy(identifier: 'moveNext', externalInstancePropertyReader: (instance) => instance.moveNext),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (instance) => instance.toString),
    },
  );

  ///类型[RuneIterator]
  static final classRuneIterator = VmClass<RuneIterator>(
    identifier: 'RuneIterator',
    externalProxyMap: {
      'RuneIterator': VmProxy(identifier: 'RuneIterator', externalStaticPropertyReader: () => RuneIterator.new),
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => RuneIterator.new),
      'at': VmProxy(identifier: 'at', externalStaticPropertyReader: () => RuneIterator.at),
      'current': VmProxy(identifier: 'current', externalInstancePropertyReader: (instance) => instance.current),
      'currentAsString': VmProxy(identifier: 'currentAsString', externalInstancePropertyReader: (instance) => instance.currentAsString),
      'currentSize': VmProxy(identifier: 'currentSize', externalInstancePropertyReader: (instance) => instance.currentSize),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (instance) => instance.hashCode),
      'moveNext': VmProxy(identifier: 'moveNext', externalInstancePropertyReader: (instance) => instance.moveNext),
      'movePrevious': VmProxy(identifier: 'movePrevious', externalInstancePropertyReader: (instance) => instance.movePrevious),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (instance) => instance.noSuchMethod),
      'rawIndex': VmProxy(identifier: 'rawIndex', externalInstancePropertyReader: (instance) => instance.rawIndex, externalInstancePropertyWriter: (instance, value) => instance.rawIndex = value),
      'reset': VmProxy(identifier: 'reset', externalInstancePropertyReader: (instance) => instance.reset),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (instance) => instance.runtimeType),
      'string': VmProxy(identifier: 'string', externalInstancePropertyReader: (instance) => instance.string),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (instance) => instance.toString),
    },
  );

  ///类型[RegExpMatch]
  static final classRegExpMatch = VmClass<RegExpMatch>(
    identifier: 'RegExpMatch',
    externalProxyMap: {
      'end': VmProxy(identifier: 'end', externalInstancePropertyReader: (instance) => instance.end),
      'group': VmProxy(identifier: 'group', externalInstancePropertyReader: (instance) => instance.group),
      'groupCount': VmProxy(identifier: 'groupCount', externalInstancePropertyReader: (instance) => instance.groupCount),
      'groupNames': VmProxy(identifier: 'groupNames', externalInstancePropertyReader: (instance) => instance.groupNames),
      'groups': VmProxy(identifier: 'groups', externalInstancePropertyReader: (instance) => instance.groups),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (instance) => instance.hashCode),
      'input': VmProxy(identifier: 'input', externalInstancePropertyReader: (instance) => instance.input),
      'namedGroup': VmProxy(identifier: 'namedGroup', externalInstancePropertyReader: (instance) => instance.namedGroup),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (instance) => instance.noSuchMethod),
      'pattern': VmProxy(identifier: 'pattern', externalInstancePropertyReader: (instance) => instance.pattern),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (instance) => instance.runtimeType),
      'start': VmProxy(identifier: 'start', externalInstancePropertyReader: (instance) => instance.start),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (instance) => instance.toString),
    },
  );

  ///类型[Enum]
  static final classEnum = VmClass<Enum>(
    identifier: 'Enum',
    externalProxyMap: {
      'compareByIndex': VmProxy(identifier: 'compareByIndex', externalStaticPropertyReader: () => Enum.compareByIndex),
      'compareByName': VmProxy(identifier: 'compareByName', externalStaticPropertyReader: () => Enum.compareByName),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (instance) => instance.hashCode),
      'index': VmProxy(identifier: 'index', externalInstancePropertyReader: (instance) => instance.index),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (instance) => instance.toString),
    },
  );

  ///类型[Type]
  static final classType = VmClass<Type>(
    identifier: 'Type',
    externalProxyMap: {
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (instance) => instance.toString),
    },
  );

  ///类型[Object]
  static final classObject = VmClass<Object>(
    identifier: 'Object',
    externalProxyMap: {
      'Object': VmProxy(identifier: 'Object', externalStaticPropertyReader: () => Object.new),
      'new': VmProxy(identifier: 'new', externalStaticPropertyReader: () => Object.new),
      'hash': VmProxy(identifier: 'hash', externalStaticPropertyReader: () => Object.hash),
      'hashAll': VmProxy(identifier: 'hashAll', externalStaticPropertyReader: () => Object.hashAll),
      'hashAllUnordered': VmProxy(identifier: 'hashAllUnordered', externalStaticPropertyReader: () => Object.hashAllUnordered),
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (instance) => instance.toString),
    },
  );

  ///类型dynamic
  static final classDynamic = VmClass<dynamic>(
    identifier: 'dynamic',
    externalProxyMap: {
      'hashCode': VmProxy(identifier: 'hashCode', externalInstancePropertyReader: (instance) => instance.hashCode),
      'noSuchMethod': VmProxy(identifier: 'noSuchMethod', externalInstancePropertyReader: (instance) => instance.noSuchMethod),
      'runtimeType': VmProxy(identifier: 'runtimeType', externalInstancePropertyReader: (instance) => instance.runtimeType),
      'toString': VmProxy(identifier: 'toString', externalInstancePropertyReader: (instance) => instance.toString),
    },
  );

  ///类型void
  static final classVoid = VmClass<void>(
    identifier: 'void',
    externalProxyMap: {},
  );

  ///包装类型列表
  static final libraryClassList = <VmClass>[
    classInt,
    classDouble,
    classNum,
    classBool,
    classString,
    classList,
    classSet,
    classMap,
    classRunes,
    classSymbol,
    classMapEntry,
    classDuration,
    classDateTime,
    classStringBuffer,
    classRegExp,
    classUri,
    classUriData,
    classBigInt,
    classStopwatch,
    classFuture,
    classFunction,
    classRandom,
    classPoint,
    classRectangle,
    classIterable,
    classIterator,
    classRuneIterator,
    classRegExpMatch,
    classEnum,
    classType,
    classObject,
    classDynamic,
    classVoid,
  ];

  ///代理函数列表
  static final libraryProxyList = <VmProxy<void>>[
    VmProxy(identifier: 'print', externalStaticPropertyReader: () => print),
    VmProxy(identifier: 'e', externalStaticPropertyReader: () => e),
    VmProxy(identifier: 'ln10', externalStaticPropertyReader: () => ln10),
    VmProxy(identifier: 'ln2', externalStaticPropertyReader: () => ln2),
    VmProxy(identifier: 'log2e', externalStaticPropertyReader: () => log2e),
    VmProxy(identifier: 'log10e', externalStaticPropertyReader: () => log10e),
    VmProxy(identifier: 'pi', externalStaticPropertyReader: () => pi),
    VmProxy(identifier: 'sqrt1_2', externalStaticPropertyReader: () => sqrt1_2),
    VmProxy(identifier: 'sqrt2', externalStaticPropertyReader: () => sqrt2),
    VmProxy(identifier: 'min', externalStaticPropertyReader: () => min),
    VmProxy(identifier: 'max', externalStaticPropertyReader: () => max),
    VmProxy(identifier: 'atan2', externalStaticPropertyReader: () => atan2),
    VmProxy(identifier: 'pow', externalStaticPropertyReader: () => pow),
    VmProxy(identifier: 'sin', externalStaticPropertyReader: () => sin),
    VmProxy(identifier: 'cos', externalStaticPropertyReader: () => cos),
    VmProxy(identifier: 'tan', externalStaticPropertyReader: () => tan),
    VmProxy(identifier: 'acos', externalStaticPropertyReader: () => acos),
    VmProxy(identifier: 'asin', externalStaticPropertyReader: () => asin),
    VmProxy(identifier: 'atan', externalStaticPropertyReader: () => atan),
    VmProxy(identifier: 'sqrt', externalStaticPropertyReader: () => sqrt),
    VmProxy(identifier: 'exp', externalStaticPropertyReader: () => exp),
    VmProxy(identifier: 'log', externalStaticPropertyReader: () => log),
  ];
}
